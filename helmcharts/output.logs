install.go:224: 2024-10-23 16:36:49.792722 +0530 IST m=+0.077427585 [debug] Original chart version: ""
install.go:241: 2024-10-23 16:36:49.792846 +0530 IST m=+0.077551501 [debug] CHART PATH: /Users/Sunil/Documents/gitlab/wits/sunbird-morocco-sandbox/helmcharts/edbb

client.go:486: 2024-10-23 16:37:02.768047 +0530 IST m=+13.053245626 [debug] Starting delete for "edbb-job-deleter" ServiceAccount
wait.go:104: 2024-10-23 16:37:02.943635 +0530 IST m=+13.228839835 [debug] beginning wait for 1 resources to be deleted with timeout of 5m0s
client.go:142: 2024-10-23 16:37:03.632033 +0530 IST m=+13.917263918 [debug] creating 1 resource(s)
client.go:486: 2024-10-23 16:37:03.709516 +0530 IST m=+13.994749918 [debug] Starting delete for "edbb-job-deleter-role" Role
wait.go:104: 2024-10-23 16:37:03.793426 +0530 IST m=+14.078663585 [debug] beginning wait for 1 resources to be deleted with timeout of 5m0s
client.go:142: 2024-10-23 16:37:04.450117 +0530 IST m=+14.735379043 [debug] creating 1 resource(s)
client.go:486: 2024-10-23 16:37:04.545452 +0530 IST m=+14.830717585 [debug] Starting delete for "edbb-job-deleter-rolebinding" RoleBinding
wait.go:104: 2024-10-23 16:37:04.608315 +0530 IST m=+14.893583418 [debug] beginning wait for 1 resources to be deleted with timeout of 5m0s
client.go:142: 2024-10-23 16:37:05.276826 +0530 IST m=+15.562119918 [debug] creating 1 resource(s)
client.go:486: 2024-10-23 16:37:05.381662 +0530 IST m=+15.666959501 [debug] Starting delete for "edbb-job-deleter" Job
wait.go:104: 2024-10-23 16:37:05.456129 +0530 IST m=+15.741429793 [debug] beginning wait for 1 resources to be deleted with timeout of 5m0s
client.go:142: 2024-10-23 16:37:06.08557 +0530 IST m=+16.370894585 [debug] creating 1 resource(s)
client.go:712: 2024-10-23 16:37:06.169318 +0530 IST m=+16.454645043 [debug] Watching for changes to Job edbb-job-deleter with timeout of 5m0s
client.go:740: 2024-10-23 16:37:06.273125 +0530 IST m=+16.558456293 [debug] Add/Modify event for edbb-job-deleter: ADDED
client.go:779: 2024-10-23 16:37:06.273238 +0530 IST m=+16.558569751 [debug] edbb-job-deleter: Jobs active: 1, jobs failed: 0, jobs succeeded: 0
client.go:740: 2024-10-23 16:37:09.686465 +0530 IST m=+19.971925876 [debug] Add/Modify event for edbb-job-deleter: MODIFIED
client.go:779: 2024-10-23 16:37:09.686562 +0530 IST m=+19.972023126 [debug] edbb-job-deleter: Jobs active: 0, jobs failed: 0, jobs succeeded: 0
client.go:740: 2024-10-23 16:37:09.778482 +0530 IST m=+20.063946001 [debug] Add/Modify event for edbb-job-deleter: MODIFIED
client.go:142: 2024-10-23 16:37:09.778695 +0530 IST m=+20.064159543 [debug] creating 95 resource(s)
client.go:486: 2024-10-23 16:37:11.709653 +0530 IST m=+21.995190543 [debug] Starting delete for "edbb-kong-apis" Job
wait.go:104: 2024-10-23 16:37:11.778283 +0530 IST m=+22.063822876 [debug] beginning wait for 1 resources to be deleted with timeout of 5m0s
client.go:142: 2024-10-23 16:37:12.223958 +0530 IST m=+22.509514710 [debug] creating 1 resource(s)
client.go:712: 2024-10-23 16:37:12.34031 +0530 IST m=+22.625871251 [debug] Watching for changes to Job edbb-kong-apis with timeout of 5m0s
client.go:740: 2024-10-23 16:37:12.5517 +0530 IST m=+22.837269126 [debug] Add/Modify event for edbb-kong-apis: ADDED
client.go:779: 2024-10-23 16:37:12.551791 +0530 IST m=+22.837359918 [debug] edbb-kong-apis: Jobs active: 1, jobs failed: 0, jobs succeeded: 0
client.go:740: 2024-10-23 16:38:13.931994 +0530 IST m=+84.219882918 [debug] Add/Modify event for edbb-kong-apis: MODIFIED
client.go:779: 2024-10-23 16:38:13.932142 +0530 IST m=+84.220030460 [debug] edbb-kong-apis: Jobs active: 1, jobs failed: 0, jobs succeeded: 0
client.go:740: 2024-10-23 16:39:09.860007 +0530 IST m=+140.150008835 [debug] Add/Modify event for edbb-kong-apis: MODIFIED
client.go:779: 2024-10-23 16:39:09.860104 +0530 IST m=+140.150105043 [debug] edbb-kong-apis: Jobs active: 1, jobs failed: 0, jobs succeeded: 0
client.go:740: 2024-10-23 16:39:10.886988 +0530 IST m=+141.177028418 [debug] Add/Modify event for edbb-kong-apis: MODIFIED
client.go:779: 2024-10-23 16:39:10.88708 +0530 IST m=+141.177120543 [debug] edbb-kong-apis: Jobs active: 0, jobs failed: 0, jobs succeeded: 0
client.go:740: 2024-10-23 16:39:10.887382 +0530 IST m=+141.177422585 [debug] Add/Modify event for edbb-kong-apis: MODIFIED
client.go:486: 2024-10-23 16:39:10.902858 +0530 IST m=+141.192898460 [debug] Starting delete for "edbb-kong-consumers" Job
wait.go:104: 2024-10-23 16:39:11.060953 +0530 IST m=+141.350999668 [debug] beginning wait for 1 resources to be deleted with timeout of 5m0s
client.go:142: 2024-10-23 16:39:15.610945 +0530 IST m=+145.901163668 [debug] creating 1 resource(s)
client.go:712: 2024-10-23 16:39:15.705826 +0530 IST m=+145.996048793 [debug] Watching for changes to Job edbb-kong-consumers with timeout of 5m0s
client.go:740: 2024-10-23 16:39:15.789711 +0530 IST m=+146.079936460 [debug] Add/Modify event for edbb-kong-consumers: ADDED
client.go:779: 2024-10-23 16:39:15.789803 +0530 IST m=+146.080028418 [debug] edbb-kong-consumers: Jobs active: 1, jobs failed: 0, jobs succeeded: 0
client.go:740: 2024-10-23 16:39:19.110749 +0530 IST m=+149.401099751 [debug] Add/Modify event for edbb-kong-consumers: MODIFIED
client.go:779: 2024-10-23 16:39:19.110864 +0530 IST m=+149.401214918 [debug] edbb-kong-consumers: Jobs active: 1, jobs failed: 0, jobs succeeded: 0
client.go:740: 2024-10-23 16:39:20.023353 +0530 IST m=+150.313738335 [debug] Add/Modify event for edbb-kong-consumers: MODIFIED
client.go:779: 2024-10-23 16:39:20.023482 +0530 IST m=+150.313867043 [debug] edbb-kong-consumers: Jobs active: 1, jobs failed: 0, jobs succeeded: 0
client.go:740: 2024-10-23 16:39:21.050694 +0530 IST m=+151.341118751 [debug] Add/Modify event for edbb-kong-consumers: MODIFIED
client.go:779: 2024-10-23 16:39:21.050819 +0530 IST m=+151.341242876 [debug] edbb-kong-consumers: Jobs active: 0, jobs failed: 0, jobs succeeded: 0
client.go:740: 2024-10-23 16:39:21.051129 +0530 IST m=+151.341553168 [debug] Add/Modify event for edbb-kong-consumers: MODIFIED

NAME: edbb
LAST DEPLOYED: Wed Oct 23 16:36:50 2024
NAMESPACE: sunbird
STATUS: deployed
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
bot:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 3
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  fullnameOverride: bot
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/bot
    tag: release-5.1.0_RC1_29_bot
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  initContainers: {}
  livenessProbe:
    httpGet:
      path: /
      port: 5005
    initialDelaySeconds: 5
    periodSeconds: 5
  nameOverride: bot
  nodeSelector: {}
  opa:
    enabled: false
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
  readinessProbe:
    httpGet:
      path: /
      port: 5005
    initialDelaySeconds: 5
    periodSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http-bot
      port: 5005
      targetPort: 5005
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sidecars: {}
  tolerations: []
cassandra:
  affinity: {}
  args: []
  cluster:
    clientEncryption: false
    datacenter: dc1
    enableUDF: false
    endpointSnitch: SimpleSnitch
    extraSeeds: []
    internodeEncryption: none
    name: cassandra
    numTokens: 256
    rack: rack1
    seedCount: 1
  clusterDomain: cluster.local
  command: []
  common:
    exampleValue: common-chart
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  commonLabels: {}
  containerPorts:
    cql: 9042
    intra: 7000
    jmx: 7199
    tls: 7001
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  dbUser:
    existingSecret: ""
    forcePassword: false
    password: ""
    user: cassandra
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingConfiguration: ""
  extraDeploy: []
  extraEnvVars:
  - name: CASSANDRA_AUTHENTICATOR
    value: AllowAllAuthenticator
  - name: CASSANDRA_AUTHORIZER
    value: AllowAllAuthorizer
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: cassandra
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    imagePullSecrets: []
    imageRegistry: ""
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    storageClass: ""
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  host: cassandra
  hostAliases: []
  hostNetwork: false
  hostPorts:
    cql: ""
    intra: ""
    jmx: ""
    tls: ""
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/cassandra
    tag: 3.11.13-debian-11-r3
  initContainers: []
  initDBConfigMap: ""
  initDBSecret: ""
  jvm:
    extraOpts: ""
    maxHeapSize: ""
    newHeapSize: ""
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 60
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 30
  metrics:
    configuration: |
      host: localhost:{{ .Values.containerPorts.jmx }}
      ssl: False
      user:
      password:
      listenPort: {{ .Values.metrics.containerPorts.http }}
      blacklist:
        # To profile the duration of jmx call you can start the program with the following options
        # > java -Dorg.slf4j.simpleLogger.defaultLogLevel=trace -jar cassandra_exporter.jar config.yml --oneshot
        #
        # To get intuition of what is done by cassandra when something is called you can look in cassandra
        # https://github.com/apache/cassandra/tree/trunk/src/java/org/apache/cassandra/metrics
        # Please avoid to scrape frequently those calls that are iterating over all sstables

        # Unaccessible metrics (not enough privilege)
        - java:lang:memorypool:.*usagethreshold.*

        # Leaf attributes not interesting for us but that are presents in many path
        - .*:999thpercentile
        - .*:95thpercentile
        - .*:fifteenminuterate
        - .*:fiveminuterate
        - .*:durationunit
        - .*:rateunit
        - .*:stddev
        - .*:meanrate
        - .*:mean
        - .*:min

        # Path present in many metrics but uninterresting
        - .*:viewlockacquiretime:.*
        - .*:viewreadtime:.*
        - .*:cas[a-z]+latency:.*
        - .*:colupdatetimedeltahistogram:.*

        # Mostly for RPC, do not scrap them
        - org:apache:cassandra:db:.*

        # columnfamily is an alias for Table metrics
        # https://github.com/apache/cassandra/blob/8b3a60b9a7dbefeecc06bace617279612ec7092d/src/java/org/apache/cassandra/metrics/TableMetrics.java#L162
        - org:apache:cassandra:metrics:columnfamily:.*

        # Should we export metrics for system keyspaces/tables ?
        - org:apache:cassandra:metrics:[^:]+:system[^:]*:.*

        # Don't scrap us
        - com:criteo:nosql:cassandra:exporter:.*

      maxScrapFrequencyInSec:
        50:
          - .*

        # Refresh those metrics only every hour as it is costly for cassandra to retrieve them
        3600:
          - .*:snapshotssize:.*
          - .*:estimated.*
          - .*:totaldiskspaceused:.*
    containerPorts:
      http: 8080
      jmx: 5555
    enabled: false
    extraVolumeMounts: []
    hostPorts:
      http: ""
      jmx: ""
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/cassandra-exporter
      tag: 2.3.8-debian-11-r95
    podAnnotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 20
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 45
    resources:
      limits: {}
      requests: {}
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: monitoring
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: cassandra
  networkPolicy:
    allowExternal: true
    enabled: false
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    commitLogMountPath: ""
    commitLogsize: 2Gi
    commitStorageClass: ""
    enabled: true
    mountPath: /bitnami/cassandra
    size: 25Gi
    storageClass: ""
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  port: 9042
  priorityClassName: ""
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      cql: ""
      metrics: ""
    ports:
      cql: 9042
      metrics: 8080
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 60
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  terminationGracePeriodSeconds: ""
  tls:
    autoGenerated: false
    certificatesSecret: ""
    clientEncryption: false
    existingSecret: ""
    internodeEncryption: none
    keystorePassword: ""
    passwordsSecret: ""
    resources:
      limits: {}
      requests: {}
    tlsEncryptionSecretName: ""
    truststorePassword: ""
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
  volumePermissions:
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r90
    resources:
      limits: {}
      requests: {}
    securityContext:
      runAsUser: 0
common:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    repository: nginx
    tag: ""
  imagePullSecrets: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
devops_release_branch: release-7.0.0
discussionmw:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  fullnameOverride: discussionmw
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullSecrets: []
    registry: docker.io
    repository: sunbirded.azurecr.io/discussion-middleware
    tag: release-5.0.0_RC2_1
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  initContainers: {}
  livenessProbe:
    failureThreshold: 2
    httpGet:
      path: /health
      port: 3002
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
  nameOverride: discussionmw
  nodeSelector: {}
  opa:
    enabled: false
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 0
    runAsNonRoot: false
    runAsUser: 0
  readinessProbe:
    failureThreshold: 2
    httpGet:
      path: /health
      port: 3002
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1G
    requests:
      cpu: 100m
      memory: 100M
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
  service:
    ports:
    - name: http-dmw
      port: 3002
      targetPort: 3002
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sidecars: {}
  tolerations: []
echo:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  fullnameOverride: echo
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/echo-server
    tag: master-RC1
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  initContainers: {}
  livenessProbe:
    failureThreshold: 2
    httpGet:
      path: /hello
      port: 9595
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
  nameOverride: echo
  nodeSelector: {}
  opa:
    enabled: false
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
  readinessProbe:
    failureThreshold: 2
    httpGet:
      path: /hello
      port: 9595
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http
      port: 3030
      targetPort: 3030
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sidecars: {}
  tolerations: []
fullname: edbb
global:
  cassandra:
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    extraEnvVars:
    - name: CASSANDRA_AUTHENTICATOR
      value: AllowAllAuthenticator
    - name: CASSANDRA_AUTHORIZER
      value: AllowAllAuthorizer
    fullnameOverride: cassandra
    host: cassandra
    image:
      tag: 3.11.13-debian-11-r3
    nameOverride: cassandra
    persistence:
      size: 25Gi
    port: 9042
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
  kafka:
    clientProtocol: PLAINTEXT
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    fullnameOverride: kafka
    host: kafka
    image:
      registry: docker.io
      repository: bitnami/kafka
      tag: 3.3.1-debian-11-r25
    livenessProbe:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 30
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 5
    nameOverride: kafka
    persistence:
      size: 25Gi
    port: 9092
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
      numPartitions: 1
      replicationFactor: 1
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 10
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  keycloak_key_configmap: keycloak-key
  keycloak_kid_keys_configmap: keycloak-kids-keys
  kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
  postgresql:
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    databases:
    - name: kong
    - name: druid_raw
    enabled: true
    fullnameOverride: postgresql
    host: postgresql
    image:
      repository: bitnami/postgresql
      tag: 11.14.0-debian-10-r49
    persistence:
      size: 25Gi
    port: 5432
    postgresqlPassword: postgres
    postgresqlUsername: postgres
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
  redis:
    auth:
      enabled: false
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    fullnameOverride: redis
    host: redis-master
    master:
      persistence:
        size: 25Gi
    nameOverride: redis
    port: 6379
    replica:
      replicaCount: 0
  zookeeper:
    fullnameOverride: zookeeper
    host: zookeeper
    nameOverride: zookeeper
    persistence:
      size: 2Gi
    port: 2181
kafka:
  advertisedListeners: []
  affinity: {}
  allowEveryoneIfNoAclFound: true
  allowPlaintextListener: true
  args: []
  auth:
    clientProtocol: plaintext
    controllerProtocol: plaintext
    externalClientProtocol: ""
    interBrokerProtocol: plaintext
    sasl:
      interBrokerMechanism: plain
      jaas:
        clientPasswords: []
        clientUsers:
        - user
        existingSecret: ""
        interBrokerPassword: ""
        interBrokerUser: admin
        zookeeperPassword: ""
        zookeeperUser: ""
      mechanisms: plain,scram-sha-256,scram-sha-512
    tls:
      autoGenerated: false
      endpointIdentificationAlgorithm: https
      existingSecret: ""
      existingSecrets: []
      jksKeystoreSAN: ""
      jksTruststore: ""
      jksTruststoreSecret: ""
      password: ""
      pemChainIncluded: false
      type: jks
    zookeeper:
      tls:
        enabled: false
        existingSecret: ""
        existingSecretKeystoreKey: zookeeper.keystore.jks
        existingSecretTruststoreKey: zookeeper.truststore.jks
        passwordsSecret: ""
        passwordsSecretKeystoreKey: keystore-password
        passwordsSecretTruststoreKey: truststore-password
        type: jks
        verifyHostname: true
  authorizerClassName: ""
  autoCreateTopicsEnable: true
  brokerRackAssignment: ""
  clientProtocol: PLAINTEXT
  clusterDomain: cluster.local
  command:
  - /scripts/setup.sh
  common:
    exampleValue: common-chart
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  commonLabels: {}
  config: ""
  containerPorts:
    client: 9092
    controller: 9095
    external: 9094
    internal: 9093
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  defaultReplicationFactor: 1
  deleteTopicEnable: false
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingConfigmap: ""
  existingLog4jConfigMap: ""
  externalAccess:
    autoDiscovery:
      enabled: false
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/kubectl
        tag: 1.25.6-debian-11-r14
      resources:
        limits: {}
        requests: {}
    enabled: false
    service:
      annotations: {}
      domain: ""
      extraPorts: []
      labels: {}
      loadBalancerAnnotations: []
      loadBalancerIPs: []
      loadBalancerNames: []
      loadBalancerSourceRanges: []
      nodePorts: []
      ports:
        external: 9094
      publishNotReadyAddresses: false
      type: LoadBalancer
      useHostIPs: false
      usePodIPs: false
  externalZookeeper:
    servers: []
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: kafka
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    imagePullSecrets: []
    imageRegistry: ""
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    storageClass: ""
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  heapOpts: -Xmx1024m -Xms1024m
  host: kafka
  hostAliases: []
  hostIPC: false
  hostNetwork: false
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/kafka
    tag: 3.3.1-debian-11-r25
  initContainers: []
  interBrokerListenerName: INTERNAL
  kraft:
    clusterId: kafka_cluster_id_test1
    controllerListenerNames: CONTROLLER
    controllerQuorumVoters: ""
    enabled: false
    processRoles: broker,controller
  kubeVersion: ""
  lifecycleHooks: {}
  listenerSecurityProtocolMap: ""
  listeners: []
  livenessProbe:
    enabled: true
    failureThreshold: 10
    initialDelaySeconds: 30
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5
  log4j: ""
  logFlushIntervalMessages: _10000
  logFlushIntervalMs: 1000
  logPersistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    existingClaim: ""
    mountPath: /opt/bitnami/kafka/logs
    selector: {}
    size: 8Gi
    storageClass: ""
  logRetentionBytes: _1073741824
  logRetentionCheckIntervalMs: 300000
  logRetentionHours: 168
  logSegmentBytes: _1073741824
  logsDirs: /bitnami/kafka/data
  maxMessageBytes: _1000012
  metrics:
    jmx:
      config: |-
        jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:5555/jmxrmi
        lowercaseOutputName: true
        lowercaseOutputLabelNames: true
        ssl: false
        {{- if .Values.metrics.jmx.whitelistObjectNames }}
        whitelistObjectNames: ["{{ join "\",\"" .Values.metrics.jmx.whitelistObjectNames }}"]
        {{- end }}
      containerPorts:
        metrics: 5556
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      enabled: false
      existingConfigmap: ""
      extraRules: ""
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/jmx-exporter
        tag: 0.17.2-debian-11-r53
      resources:
        limits: {}
        requests: {}
      service:
        annotations:
          prometheus.io/path: /
          prometheus.io/port: '{{ .Values.metrics.jmx.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        clusterIP: ""
        ports:
          metrics: 5556
        sessionAffinity: None
      whitelistObjectNames:
      - kafka.controller:*
      - kafka.server:*
      - java.lang:*
      - kafka.network:*
      - kafka.log:*
    kafka:
      affinity: {}
      args: []
      certificatesSecret: ""
      command: []
      containerPorts:
        metrics: 9308
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      enabled: false
      extraFlags: {}
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/kafka-exporter
        tag: 1.6.0-debian-11-r65
      initContainers: []
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      priorityClassName: ""
      resources:
        limits: {}
        requests: {}
      schedulerName: ""
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.kafka.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        clusterIP: ""
        ports:
          metrics: 9308
        sessionAffinity: None
      serviceAccount:
        automountServiceAccountToken: true
        create: true
        name: ""
      sidecars: []
      tlsCaCert: ca-file
      tlsCaSecret: ""
      tlsCert: cert-file
      tlsKey: key-file
      tolerations: []
      topologySpreadConstraints: []
    prometheusRule:
      enabled: false
      groups: []
      labels: {}
      namespace: ""
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  minBrokerId: 0
  nameOverride: kafka
  networkPolicy:
    allowExternal: true
    egressRules:
      customRules: []
    enabled: false
    explicitNamespacesSelector: {}
    externalAccess:
      from: []
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  numIoThreads: 8
  numNetworkThreads: 3
  numPartitions: 1
  numRecoveryThreadsPerDataDir: 1
  offsetsTopicReplicationFactor: 1
  pdb:
    create: false
    maxUnavailable: 1
    minAvailable: ""
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    labels: {}
    mountPath: /bitnami/kafka
    selector: {}
    size: 25Gi
    storageClass: ""
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: Parallel
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  port: 9092
  priorityClassName: ""
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
    args: []
    auth:
      tls:
        caCert: ca.crt
        cert: tls.crt
        certificatesSecret: ""
        key: tls.key
        keyPassword: ""
        keyPasswordSecretKey: key-password
        keystore: keystore.jks
        keystorePassword: ""
        keystorePasswordSecretKey: keystore-password
        passwordsSecret: ""
        truststore: truststore.jks
        truststorePassword: ""
        truststorePasswordSecretKey: truststore-password
        type: jks
    command: []
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    enabled: false
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraProvisioningCommands: []
    extraVolumeMounts: []
    extraVolumes: []
    initContainers: []
    nodeSelector: {}
    numPartitions: 1
    parallel: 1
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    postScript: ""
    preScript: ""
    replicationFactor: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    serviceAccount:
      automountServiceAccountToken: true
      create: false
      name: ""
    sidecars: []
    tolerations: []
    topics: []
    waitForKafka: true
  rbac:
    create: false
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 10
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
      labels: {}
      publishNotReadyAddresses: false
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      client: ""
      external: ""
    ports:
      client: 9092
      external: 9094
      internal: 9093
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  serviceBindings:
    enabled: false
  sidecars: []
  socketReceiveBufferBytes: 102400
  socketRequestMaxBytes: _104857600
  socketSendBufferBytes: 102400
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  superUsers: User:admin
  terminationGracePeriodSeconds: ""
  tolerations: []
  topologySpreadConstraints: []
  transactionStateLogMinIsr: 1
  transactionStateLogReplicationFactor: 1
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r90
    resources:
      limits: {}
      requests: {}
  zookeeper:
    affinity: {}
    args: []
    auth:
      client:
        clientPassword: ""
        clientUser: ""
        enabled: false
        existingSecret: ""
        serverPasswords: ""
        serverUsers: ""
      quorum:
        enabled: false
        existingSecret: ""
        learnerPassword: ""
        learnerUser: ""
        serverPasswords: ""
        serverUsers: ""
    autopurge:
      purgeInterval: 0
      snapRetainCount: 3
    clusterDomain: cluster.local
    command:
    - /scripts/setup.sh
    commonAnnotations: {}
    commonLabels: {}
    configuration: ""
    containerPorts:
      client: 2181
      election: 3888
      follower: 2888
      tls: 3181
    containerSecurityContext:
      allowPrivilegeEscalation: false
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    dataLogDir: ""
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    enabled: true
    existingConfigmap: ""
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fourlwCommandsWhitelist: srvr, mntr, ruok
    fullnameOverride: zookeeper
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    heapSize: 1024
    host: zookeeper
    hostAliases: []
    image:
      debug: false
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/zookeeper
      tag: 3.8.1-debian-11-r6
    initContainers: []
    initLimit: 10
    jvmFlags: ""
    kubeVersion: ""
    lifecycleHooks: {}
    listenOnAllIPs: false
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      probeCommandTimeout: 2
      successThreshold: 1
      timeoutSeconds: 5
    logLevel: ERROR
    maxClientCnxns: 60
    maxSessionTimeout: 40000
    metrics:
      containerPort: 9141
      enabled: false
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.service.port }}'
          prometheus.io/scrape: "true"
        port: 9141
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        honorLabels: false
        interval: ""
        jobLabel: ""
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
    minServerId: 1
    nameOverride: zookeeper
    namespaceOverride: ""
    networkPolicy:
      allowExternal: true
      enabled: false
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: 1
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataLogDir:
        existingClaim: ""
        selector: {}
        size: 8Gi
      enabled: true
      existingClaim: ""
      labels: {}
      selector: {}
      size: 2Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    port: 2181
    preAllocSize: 65536
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      probeCommandTimeout: 2
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      disableBaseClientPort: false
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
        publishNotReadyAddresses: true
        servicenameOverride: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        client: ""
        tls: ""
      ports:
        client: 2181
        election: 3888
        follower: 2888
        tls: 3181
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    sidecars: []
    snapCount: 100000
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    syncLimit: 5
    tickTime: 2000
    tls:
      client:
        auth: none
        autoGenerated: false
        enabled: false
        existingSecret: ""
        existingSecretKeystoreKey: ""
        existingSecretTruststoreKey: ""
        keystorePassword: ""
        keystorePath: /opt/bitnami/zookeeper/config/certs/client/zookeeper.keystore.jks
        passwordsSecretKeystoreKey: ""
        passwordsSecretName: ""
        passwordsSecretTruststoreKey: ""
        truststorePassword: ""
        truststorePath: /opt/bitnami/zookeeper/config/certs/client/zookeeper.truststore.jks
      quorum:
        auth: none
        autoGenerated: false
        enabled: false
        existingSecret: ""
        existingSecretKeystoreKey: ""
        existingSecretTruststoreKey: ""
        keystorePassword: ""
        keystorePath: /opt/bitnami/zookeeper/config/certs/quorum/zookeeper.keystore.jks
        passwordsSecretKeystoreKey: ""
        passwordsSecretName: ""
        passwordsSecretTruststoreKey: ""
        truststorePassword: ""
        truststorePath: /opt/bitnami/zookeeper/config/certs/quorum/zookeeper.truststore.jks
      resources:
        limits: {}
        requests: {}
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
    volumePermissions:
      containerSecurityContext:
        enabled: true
        runAsUser: 0
      enabled: false
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 11-debian-11-r86
      resources:
        limits: {}
        requests: {}
  zookeeperChrootPath: ""
  zookeeperConnectionTimeoutMs: 6000
knowledgemw:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  envoy_probes:
    failureThreshold: 2
    httpGet:
      path: /ready
      port: 10000
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  envoy_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  fullnameOverride: knowledge-mw
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/knowledge-mw-service
    tag: release-5.6.0_RC1_f24f1dd_10
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  init_container_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  initContainers: {}
  livenessProbe:
    failureThreshold: 2
    httpGet:
      path: /service/health
      port: 5000
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
  nameOverride: knowledge-mw
  nodeSelector: {}
  opa_enabled: true
  opa_probes:
    failureThreshold: 3
    httpGet:
      path: /health?plugins
      port: 8282
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  opa_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 2
    httpGet:
      path: /service/health
      port: 5000
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    ports:
    - name: http
      port: 5000
      targetPort: 5000
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: true
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels:
      release: monitoring
    scrapeTimeout: 10s
  sidecars: {}
  tolerations: []
kong:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      gcp_service_account_key_configmap: gcp-service-account-config
      gcp_service_account_key_file: key.json
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  fullnameOverride: kong
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    gcp_service_account_key_configmap: gcp-service-account-config
    gcp_service_account_key_file: key.json
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/kong
    tag: 0.14.1
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  initContainers: {}
  kong_admin_listen: 0.0.0.0:8001
  kong_database: postgres
  kong_log_level: info
  kong_lua_socket_pool_size: "30"
  kong_mem_cache_size: 128m
  kong_nginx_http_log_format: nginx_public_ingress_log_format '$remote_addr - $remote_user
    [$time_local] "$request" $status $request_length $body_bytes_sent $request_time
    $upstream_response_time $pipe "$http_referer" "$http_user_agent" "$http_x_request_id"
    "$http_x_device_id" "$http_x_channel_id" "$http_x_app_id" "$http_x_app_ver" "$http_x_session_id"'
  kong_nginx_worker_processes: "4"
  kong_pg_database: kong
  kong_pg_host: postgresql
  kong_pg_password: postgres
  kong_pg_port: "5432"
  kong_pg_ssl: "True"
  kong_pg_user: postgres
  kong_proxy_access_log: logs/access.log nginx_public_ingress_log_format
  kong_ratelimit_cache_size: 12m
  kong_trusted_ips: 0.0.0.0/0,::/0
  kong_upstream_keepalive: "200"
  livenessProbe:
    failureThreshold: 5
    httpGet:
      path: /status
      port: 8001
    initialDelaySeconds: 15
    periodSeconds: 15
  nameOverride: kong
  nodeSelector: {}
  opa:
    enabled: false
  podAnnotations: {}
  podSecurityContext: {}
  postgresql:
    enabled: true
    host: postgresql
    port: 5432
    postgresqlPassword: postgres
    postgresqlUsername: postgres
  provisioningAnnotations:
    helm.sh/hook-weight: "-4"
  readinessProbe:
    failureThreshold: 5
    httpGet:
      path: /status
      port: 8001
    initialDelaySeconds: 15
    periodSeconds: 15
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1G
    requests:
      cpu: 100m
      memory: 100M
  securityContext: {}
  service:
    ports:
    - name: http
      port: 8000
      targetPort: 8000
    - name: admin
      port: 8001
      targetPort: 8001
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: true
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels:
      release: monitoring
    scrapeTimeout: 10s
  sidecars: {}
  tolerations: []
kong-apis:
  am_util_url: http://adminutil:4000
  analytics_api_service_url: http://analytics-service:9000
  analytics_report_service_prefix: /report/jobs
  announcement_service_prefix: /announcement
  api_manager_perfix: /api-manager
  assessment_prefix: /assessment
  assessment_service_url: http://assessment-service:9000
  asset_prefix: /asset
  auth_service_prefix: /auth
  badge_service_prefix: /badging
  cert_registry_service_prefix: /certreg
  cert_registry_service_url: http://cert-registry-service:9000
  cert_service_prefix: /cert
  cert_service_url: http://cert-service:9000
  channel_service_prefix: /channel
  cloud_service_prefix: /cloud-services
  collection_prefix: /collection
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  composite_service_prefix: /composite
  config_service_prefix: /config
  config_service_url: http://config-service:8080
  configmap:
    enabled: true
    mountPath: /config
  content_prefix: /content
  content_service_url: http://content-service:9000
  course_service_prefix: /course
  data_service_prefix: /data
  dataset_service_prefix: /dataset
  desktop_app_prefix: /desktop
  device_prefix: /v3/device
  dial_service_url: http://dial-service:9000
  dialcode_service_prefix: /dialcode
  discussions_mw_service_url: http://discussionmw-service:3002/discussion
  discussions_prefix: /discussion
  echo_service_prefix: /echo
  echo_service_url: http://echo:9595
  entities_service_prefix: /entities
  framework_service_prefix: /framework
  freshDesk_url: http://dummy.freshDesk.url
  fullnameOverride: ""
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  group_service_prefix: /group
  group_service_url: http://groups-service:9000
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: keshavprasad/kong-scripts
    tag: 0.1.8
  integration_app_prefix: /app
  itemset_prefix: /itemset
  knowledge_mw_service_url: http://knowledge-mw-service:5000
  kong_admin_port: 8001
  kong_admin_url: kong
  large_rate_limit_per_hour: 10000
  large_request_size_limit: 100
  learner_private_route_prefix: /private
  learning_service_prefix: /learning
  learning_service_url: http://learning:8080/learning-service
  license_api_prefix: /license
  lms_service_url: http://lms-service:9000
  lock_service_prefix: /lock
  medium_rate_limit_per_hour: 5000
  medium_request_size_limit: 10
  meta_service_prefix: /meta
  ml_core_service_url: http://ml-core-service:3000
  ml_project_service_url: http://ml-projects-service:3000
  ml_reports_service_url: http://ml-reports-service:3000
  ml_survey_service_url: http://ml-survey-service:3000
  nameOverride: ""
  notes_service_prefix: /notes
  notification_service_prefix: /notification
  notification_service_url: http://notification-service:9000
  object_category_definition_prefix: /object/category/definition
  object_category_prefix: /object/category
  observationSubmissions_service_prefix: /observationSubmissions
  observations_service_prefix: /observations
  org_service_prefix: /org
  otp_service_prefix: /otp
  player_service_url: http://player:3000
  plugin_service_prefix: /plugins
  premium_consumer_large_rate_limit_per_hour: 100000
  premium_consumer_medium_rate_limit_per_hour: 10000
  premium_consumer_small_rate_limit_per_hour: 1000
  private_content_prefix: /private/content
  programs_service_prefix: /programs
  project_service_prefix: /project
  provisioningAnnotations:
    helm.sh/hook: post-install,post-upgrade
  question_prefix: /question
  questionset_prefix: /questionset
  registry_service_prefix: /rc
  registry_service_url: http://registry-service:8081
  report_service_prefix: /data/v1/report-service
  report_service_url: http://report-service:3030
  reports_service_prefix: /reports
  resource_prefix: /resource
  small_rate_limit_per_hour: 100
  small_request_size_limit: 1
  solutions_service_prefix: /solutions
  sso_service_prefix: /sso
  statsd_pulgin:
    config.host: statsd-service
    config.metrics:
    - name: request_count
      sample_rate: 1
      stat_type: counter
    - name: latency
      stat_type: timer
    - name: request_size
      stat_type: timer
    - name: status_count
      sample_rate: 1
      stat_type: counter
    - name: response_size
      stat_type: timer
    - consumer_identifier: username
      name: unique_users
      stat_type: set
    - consumer_identifier: username
      name: request_per_user
      sample_rate: 1
      stat_type: counter
    - name: upstream_latency
      stat_type: timer
    - name: kong_latency
      stat_type: timer
    - consumer_identifier: username
      name: status_count_per_user
      sample_rate: 1
      stat_type: counter
    config.port: "9125"
    name: statsd
  surveySubmissions_service_prefix: /surveySubmissions
  surveys_service_prefix: /surveys
  taxonomy_service_url: http://taxonomy-service:9000
  telemetry_service_url: http://telemetry-service:9001
  textbook_service_prefix: /textbook
  tickets_prefix: /tickets
  uci_admin_prefix: /uci
  uci_admin_service_url: http://uci-service:9999
  uci_gql_service_url: http://gql-service:8080
  uci_inbound_service_url: http://inbound-service:8085
  uci_registry_service_url: http://fusionauth-service:9011
  uci_transformer_service_url: http://trasnformer-service:9091
  user_extension_prefix: /user-extension
  user_service_prefix: /user
  userProjects_service_prefix: /userProjects
  userorg_service_url: http://userorg-service:9000
  users_service_prefix: /users
  x_large_rate_limit_per_hour: 30000
  x_medium_rate_limit_per_hour: 5000
  x2_large_rate_limit_per_hour: 15000
kong-consumers:
  anonymous_user_groups:
  - deviceCreate
  - locationAccess
  - telemetryCreate
  - anonymousCertificateAccess
  - anonymousContentAccess
  - anonymousCourseAccess
  - anonymousOrgAccess
  - anonymousUserAccess
  - anonymousAppAccess
  - anonymousUserCreate
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      random_string: randomstring123
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  configmap:
    enabled: true
    mountPath: /config
  desktop_device_groups:
  - appAccess
  - channelAccess
  - certificateAccess
  - courseAccess
  - contentAccess
  - pageAccess
  - dialcodeAccess
  - frameworkAccess
  - orgAccess
  - deviceCreate
  - groupCreate
  - groupAccess
  - groupUpdate
  - groupAdmin
  - locationAccess
  - userCreate
  - userUpdate
  - userAccess
  - refreshTokenCreate
  - ssoCreate
  - preferenceAccess
  - programAccess
  - telemetryCreate
  - anonymousCertificateAccess
  - anonymousContentAccess
  - anonymousCourseAccess
  - anonymousOrgAccess
  - anonymousUserAccess
  - anonymousAppAccess
  - anonymousUserCreate
  - readNotificationFeed
  - updateNotificationFeed
  - deleteNotificationFeed
  fullnameOverride: ""
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    random_string: randomstring123
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: keshavprasad/kong-scripts
    tag: 0.1.8
  kong_admin_groups:
  - anonymousAppAccess
  - anonymousCertificateAccess
  - anonymousContentAccess
  - anonymousCourseAccess
  - anonymousOrgAccess
  - anonymousUserAccess
  - anonymousUserCreate
  - appAccess
  - appAdmin
  - appCreate
  - appUpdate
  - assessmentAccess
  - badgeAccess
  - badgeAdmin
  - badgeCreate
  - badgeUpdate
  - certificateAccess
  - certificateCreate
  - certificateUpdate
  - channelAccess
  - channelAdmin
  - channelCreate
  - channelUpdate
  - cloudUrlsCreate
  - contentAccess
  - contentAdmin
  - contentCreate
  - contentSuperAdmin
  - contentUpdate
  - courseAccess
  - courseAdmin
  - courseCreate
  - courseSuperAdmin
  - courseUpdate
  - createNotificationTemplate
  - dataAccess
  - dataCreate
  - definitionsAdmin
  - deleteNotificationFeed
  - deleteNotificationTemplate
  - desktopAdmin
  - desktopSuperAdmin
  - deviceCreate
  - dialcodeAccess
  - dialcodeAdmin
  - dialcodeCreate
  - dialcodeUpdate
  - discussionAccess
  - discussionCreate
  - druidReportAdmin
  - druidReportCreate
  - experimentCreate
  - expirementAccess
  - externalmessagingAccess
  - formCreate
  - formUpdate
  - frameworkAccess
  - frameworkAdmin
  - frameworkCreate
  - frameworkUpdate
  - getNotificationTemplate
  - groupAccess
  - groupAdmin
  - groupCreate
  - groupUpdate
  - igotAdmin
  - igotApp
  - itemSetAdmin
  - kongConsumerAdmin
  - locationAccess
  - locationAdmin
  - locationCreate
  - locationSuperAdmin
  - locationUpdate
  - masterCategoriesAdmin
  - mobileAdmin
  - mobileOpenRAPAdmin
  - mobileOpenRAPSuperAdmin
  - mobileSuperAdmin
  - mobileTeacherAidAdmin
  - mobileTeacherAidSuperAdmin
  - noteAccess
  - noteAdmin
  - noteCreate
  - noteUpdate
  - observationAccess
  - observationCreate
  - observationUpdate
  - orgAccess
  - orgAdmin
  - orgCreate
  - orgSuperAdmin
  - orgUpdate
  - pageAccess
  - pageCreate
  - pageUpdate
  - pluginAccess
  - portalAnonymous
  - portalLoggedin
  - privateCourseAccess
  - programAccess
  - projectAccess
  - projectCreate
  - projectUpdate
  - readNotificationFeed
  - refreshTokenCreate
  - registryAccess
  - reportsAccess
  - reportsAdmin
  - reportsCreate
  - reportsUpdate
  - sendNotification
  - solutionAccess
  - ssoAdmin
  - ssoCreate
  - surveyAccess
  - surveyUpdate
  - telemetryCreate
  - updateNotificationFeed
  - updateNotificationTemplate
  - userAccess
  - userAdmin
  - userCreate
  - userSuperAccess
  - userSuperAdmin
  - userTempAdmin
  - userUpdate
  kong_admin_port: 8001
  kong_admin_url: kong
  kong_all_consumer_groups:
  - announcementAccess
  - appAccess
  - appAdmin
  - appUpdate
  - badgeAccess
  - badgeAdmin
  - badgeCreate
  - badgeUpdate
  - certificateAccess
  - certificateAdmin
  - certificateCreate
  - certificateUpdate
  - channelAccess
  - channelCreate
  - channelUpdate
  - contentAccess
  - contentAdmin
  - contentCreate
  - contentUpdate
  - courseAccess
  - courseAdmin
  - courseCreate
  - courseUpdate
  - deviceCreate
  - dialcodeAccess
  - dialcodeAdmin
  - dialcodeCreate
  - dialcodeUpdate
  - locationAccess
  - noteAccess
  - noteAdmin
  - noteCreate
  - noteUpdate
  - objectAccess
  - orgAccess
  - orgCreate
  - pageAccess
  - pluginAccess
  - reportsAccess
  - reportsAdmin
  - reportsCreate
  - reportsUpdate
  - ssoCreate
  - userAccess
  - userAdmin
  - userCreate
  - userTempAdmin
  - userUpdate
  - groupCreate
  - groupUpdate
  - groupAccess
  - groupAdmin
  - dataAccess
  - druidReportCreate
  - druidReportAdmin
  - dataCreate
  - frameworkAccess
  - programAccess
  - solutionAccess
  - registryAccess
  - projectAccess
  - projectUpdate
  - projectCreate
  - observationAccess
  - observationUpdate
  - observationCreate
  - surveyAccess
  - cloudUrlsCreate
  - surveyUpdate
  - refreshTokenCreate
  - telemetryCreate
  - anonymousCertificateAccess
  - anonymousContentAccess
  - anonymousCourseAccess
  - anonymousOrgAccess
  - anonymousUserAccess
  - anonymousAppAccess
  - anonymousUserCreate
  - readNotificationFeed
  - updateNotificationFeed
  - deleteNotificationFeed
  mobile_admin_groups:
  - mobileSuperAdmin
  mobile_app_groups:
  - mobileAdmin
  mobile_device_groups:
  - appAccess
  - certificateAccess
  - contentAccess
  - courseAccess
  - deviceCreate
  - dialcodeAccess
  - locationAccess
  - orgAccess
  - ssoCreate
  - telemetryCreate
  - userAccess
  - userUpdate
  - contentTempAccess
  - groupCreate
  - groupUpdate
  - groupAccess
  - groupAdmin
  - refreshTokenCreate
  - discussionAccess
  - anonymousCertificateAccess
  - anonymousContentAccess
  - anonymousCourseAccess
  - anonymousOrgAccess
  - anonymousUserAccess
  - anonymousAppAccess
  - anonymousUserCreate
  - readNotificationFeed
  - updateNotificationFeed
  - deleteNotificationFeed
  - cloudUrlsCreate
  - observationAccess
  - observationCreate
  - observationUpdate
  - programAccess
  - projectAccess
  - projectCreate
  - projectUpdate
  - registryAccess
  - solutionAccess
  - surveyAccess
  - surveyUpdate
  nameOverride: ""
  portal_anonymous_register:
  - portalAnonymous
  portal_loggedin_register:
  - portalLoggedin
  provisioningAnnotations:
    helm.sh/hook: post-install,post-upgrade
  userAccess:
  - userAccess
migration:
  postgresql:
    waitTime: 120
nginx-private-ingress:
  affinity: {}
  autoscaling: {}
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      private_ingressgateway_ip: 10.0.1.21
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /etc/nginx/nginx.conf
  fullnameOverride: nginx-private-ingress
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    private_ingressgateway_ip: 10.0.1.21
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  htpasswd:
    defaultMode: 420
    mountPath: /etc/nginx/.htpasswd
    name: htpasswd
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/proxy
    tag: release-7.0.0_8e6b2db_23
  ingress: {}
  initContainers: {}
  nameOverride: nginx-private-ingress
  nodeSelector: {}
  podAnnotations: {}
  replicaCount: 1
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 100Mi
  service:
    annotations:
      cloud.google.com/load-balancer-type: Internal
    ports:
    - name: http
      port: 80
      targetPort: 80
    type: LoadBalancer
  serviceAccount:
    create: true
    name: ""
  serviceMonitor: {}
  sidecars: {}
  tolerations: []
nginx-public-ingress:
  affinity: {}
  apple_universal_links: '{"applinks":{"apps":[],"details":[{"appID":"123456.dev.sunbird.app","paths":["/explore","/dial/*","/get/dial","/play/content","/play/collection","/learn/course","/explore-course/course","/explore-course","/search","/search/Library","/faq","/profile","/play/quiz","/explore","/learn","/resources"]}]}}'
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  cache_long_validity: 5m
  cache_medium_validity: 4m
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      domain: example.com
      gcp_bucket_name: ed-sunbird-public
      gcp_cloud_storage_base_url: cloudworklabs.in
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      local_development: false
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    cloud.google.com/load-balancer-type: External
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
  fullnameOverride: nginx-public-ingress
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    domain: example.com
    gcp_bucket_name: ed-sunbird-public
    gcp_cloud_storage_base_url: cloudworklabs.in
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    local_development: false
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/proxy
    tag: release-7.0.0_8e6b2db_23
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  initContainers:
  - args:
    - timeout 300 sh -c 'until nc -z keycloak 8080; do echo waiting for keycloak;
      sleep 10; done'
    command:
    - /bin/sh
    - -c
    image: busybox
    name: wait-for-keycloak
  - args:
    - timeout 300 sh -c 'until nc -z kong 8000; do echo waiting for kong; sleep 10;
      done'
    command:
    - /bin/sh
    - -c
    image: busybox
    name: wait-for-kong
  - args:
    - timeout 300 sh -c 'until nc -z player 3000; do echo waiting for player; sleep
      10; done'
    command:
    - /bin/sh
    - -c
    image: busybox
    name: wait-for-player
  large_cache_inactive: 10m
  large_cache_keys: 10m
  large_cache_size: 100m
  lets_encrypt_ssl: false
  livenessProbe: {}
  medium_cache_inactive: 10m
  medium_cache_keys: 5m
  medium_cache_size: 50m
  merge_domain: merge.example.com
  merge_domain_status: true
  nameOverride: nginx-public-ingress
  nginx_per_ip_connection_limit: 400
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  proxy_certificate: |
    -----BEGIN CERTIFICATE-----
    MIIDlzCCAn+gAwIBAgIUQCBDQj9V/xxpbVOPEuZSo92oZBYwDQYJKoZIhvcNAQEL
    BQAwWzELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM
    GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDEUMBIGA1UEAwwLZXhhbXBsZS5jb20w
    HhcNMjQwMTA2MTQ1NzI0WhcNMjUwMTA1MTQ1NzI0WjBbMQswCQYDVQQGEwJBVTET
    MBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQ
    dHkgTHRkMRQwEgYDVQQDDAtleGFtcGxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQAD
    ggEPADCCAQoCggEBAMj6//zfygSDURLdeJFso8zLOOvwg4Xmzz7QvNAuKjGwkijf
    YcgAZAh9bYL3wCtKP+vBv8/v6+0+81UNHO+HmoFnp3o1GhQdHta30tEZCay2SxQs
    RTMMaqmxhNdLFlJQeOz2ZnXCA/Bv7shTLj7dH+2gb2AA4T2bssWxQ2rVbf89quFZ
    9NomJdwppBoPKv4Pi/qj+QFgD0l9V34+B6zH7FIcY/uCR41qEZdSpTlzy4DxckQb
    gkQUEd4RU55TDZMpQLtoj4oZQblaYsINcDNpclAJ74KxMdu0B3XmeJeULfWkWItE
    SLyBLf0kZGUcx7uI2YvJc1qknPmhA/3+YQT0KDMCAwEAAaNTMFEwHQYDVR0OBBYE
    FGKMHMcHXqgQ+cS6uoaS6iZaooKHMB8GA1UdIwQYMBaAFGKMHMcHXqgQ+cS6uoaS
    6iZaooKHMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHGKDZ1t
    MmqbRUsP3KSlgqVYQF4Iu0A0HlPvwcWVhRNozlm/luQ4It5O0kYXjiIeetD3LqyQ
    QgVLPkS3im9jQuLRtHT0lJaB6cewDSdI6QbpGIU/PBYKblKLlTRKc69I7B2ezTLR
    XPv1VNUAe6HaxZBNVL8JGEIJunDdZeZLoBtLymmKqEE8B11/pP5jw+/4DkQmyOiX
    Q0SiDIO6iak05GhU3PhKPmOTBAYxvzpvEgV3+OAhcYcpnEb+2WuqQumvibdcjxYS
    Xt0PGTeyUkz7dtwiwjYWsG9yYu9m6o790NYWHbr7VqTB7X8jmqQ7FT+OFLUbzWlK
    mIyfDj9AwvHHxzA=
    -----END CERTIFICATE-----
  proxy_private_key: |
    -----BEGIN PRIVATE KEY-----
    MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDI+v/838oEg1ES
    3XiRbKPMyzjr8IOF5s8+0LzQLioxsJIo32HIAGQIfW2C98ArSj/rwb/P7+vtPvNV
    DRzvh5qBZ6d6NRoUHR7Wt9LRGQmstksULEUzDGqpsYTXSxZSUHjs9mZ1wgPwb+7I
    Uy4+3R/toG9gAOE9m7LFsUNq1W3/ParhWfTaJiXcKaQaDyr+D4v6o/kBYA9JfVd+
    Pgesx+xSHGP7gkeNahGXUqU5c8uA8XJEG4JEFBHeEVOeUw2TKUC7aI+KGUG5WmLC
    DXAzaXJQCe+CsTHbtAd15niXlC31pFiLREi8gS39JGRlHMe7iNmLyXNapJz5oQP9
    /mEE9CgzAgMBAAECggEAP0z7Cojrxm8bvm7d9iO7FZoeZAWdTzPKq5SwG3um036z
    EkeFMyqYVyo2L01cC+Z3aohcIyCEdPViS7P1HKZfrglZMP7/pz0ixOsh7bTOnMTP
    sdtdsj3jbG4aknq2XZe19qCG1ekVN4nxscutIaSg1UW2Po0YZEChVm3F96SgYAbb
    DR4MEhAxHAQoqtWun5a/x9uFn1REfsAVxq6isFUR3KNQVbdc2FHr2yRf2JoO/I4x
    tFZGGGry+ereofd5un2Pqog84ZBtgS5BmmZ03otyFZXw9qdb94lBqbazzVv5PVpF
    HT2npsDfyf8DDDB7sY5UK/c3ceayKHXXnLaZqBabOQKBgQD8y14m1hAJS6RiMv7I
    VgBNNTB9KNGr4CbwBJjP+LKfcLWEzLjHIjNFqZ+FTQUeXO0bUOlNQIGOZskoqXB8
    bYeZdw07PEvHJ6RiCHNXZvQh1w56Lg9lmBiQV7p8ZgUBwhNZHur7/gWZ4RSwABPy
    WuMPmrNjkkNqwbezPKmAaJpkWwKBgQDLh253ik5Q8udjNwkGcu+yFFTgGde+SdKR
    iK8kFWTTtvDT+IZpQvpe8xkW63wYK5YUtAgwdCpGPOmxhCqSXOLIFpmbp/5qwUnr
    m7sCS3vfnk5trWDPExGJuLYKPpjFTwmCpQLaAZplwgx0alk1GONhrDyb2gnldygJ
    5pdhLQGzCQKBgGrrfTQB4CB+XNWn6flD3rbJI2wcgqomkXF9EEEOWEZ1fmDf0dtv
    zK3PM4hG7j5MYYDnNPYWrXVUZgqLt+b40JyJLRB7zTU7wBwypM433lQdyKLGrn5y
    2Rjb8iVBZSa8NkDAgfT5GNdfyscyET21UUo9TVh0+YzCyHbH1o1YMMz3AoGBALPS
    OZCWevFcW4G2S1wOSqbs/bxuOMZgVRHOUOexmz7PIGI37xGrYqhnYmB0uFRmlhg+
    pAmjaQJbqSH1IuPj+15LUXZMbCWIFzZ6hjTV2mFNbf/LMoBiWZlzwCq2+aVCWqW6
    AxX4WqDTXMuydpTKI4PVeEs+zoWVzKNKv67U4+55AoGAFX6Rb1A/3I2em9NZonNK
    F0EkVK3mQ8ESys64zD1F6aIyqBGlCri4HHSxzTmq5Y/LalbiWGlKR/G7MFfkQUDi
    ZiFUt1PZJDRLQBcRDvWq5IWidr2FuqTseFE0b20LiMV6uw6FAUDnkL2P1/xzh5cG
    H/iXAWvLC4SMgpWpZhJPGSI=
    -----END PRIVATE KEY-----
  readinessProbe: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 443
    type: LoadBalancer
  serviceAccount:
    create: true
    name: ""
  serviceMetrics:
    ports:
    - name: http
      port: 9145
      targetPort: 9145
    type: ClusterIP
  serviceMonitor:
    enabled: true
    labels:
      release: monitoring
  sidecars: {}
  small_cache_inactive: 10m
  small_cache_keys: 2m
  small_cache_size: 20m
  tolerations: []
nodebb:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  fullnameOverride: nodebb
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullSecrets: []
    registry: docker.io
    repository: ssksanthosh/nodebb
    tag: release-5.0.0_RC1_1_v1.18.6
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  initContainers:
  - args:
    - timeout 300 sh -c 'until nc -z redis-master 6379; do echo waiting for redis;
      sleep 10; done'
    command:
    - /bin/sh
    - -c
    image: busybox
    name: wait-for-redis
  javaOptions: -Xmx600m
  livenessProbe:
    failureThreshold: 20
    httpGet:
      path: /discussions/api/category/2
      port: 4567
    initialDelaySeconds: 45
    periodSeconds: 15
    timeoutSeconds: 5
  nameOverride: nodebb
  nodeSelector: {}
  opa:
    enabled: false
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 0
    runAsNonRoot: false
    runAsUser: 0
  readinessProbe:
    failureThreshold: 20
    httpGet:
      path: /discussions/api/category/2
      port: 4567
    initialDelaySeconds: 45
    periodSeconds: 15
    timeoutSeconds: 5
  redis:
    host: redis-master
    port: 6379
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 2G
    requests:
      cpu: 100m
      memory: 100M
  securityContext: {}
  service:
    ports:
    - name: http-nodebb
      port: 4567
      targetPort: 4567
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sidecars: {}
  tolerations: []
player:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  cloud_storage_type: gcp
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      adminutil_learner_api_auth_key: ""
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      gcp_bucket_name: ed-sunbird-public
      gcp_private_container_name: ""
      gcp_service_account_key_configmap: gcp-service-account-config
      gcp_service_account_key_file: key.json
      gcp_storage_account_name: sunbird
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      random_string: superrandom
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      sunbird_admin_api_token: ""
      sunbird_anonymous_default_token: ""
      sunbird_anonymous_register_token: ""
      sunbird_logged_default_token: ""
      sunbird_loggedin_register_token: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: false
    mountPath: /config
  fullnameOverride: player
  global:
    adminutil_learner_api_auth_key: ""
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    gcp_bucket_name: ed-sunbird-public
    gcp_private_container_name: ""
    gcp_service_account_key_configmap: gcp-service-account-config
    gcp_service_account_key_file: key.json
    gcp_storage_account_name: sunbird
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    random_string: superrandom
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    sunbird_admin_api_token: ""
    sunbird_anonymous_default_token: ""
    sunbird_anonymous_register_token: ""
    sunbird_logged_default_token: ""
    sunbird_loggedin_register_token: ""
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/player
    tag: release-7.0.0_RC16_25baa89_2461
  ingress: {}
  initContainers: {}
  livenessProbe:
    failureThreshold: 2
    httpGet:
      path: /service/health
      port: 3000
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
  nameOverride: player
  nodeSelector: {}
  opa_enabled: false
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 2
    httpGet:
      path: /service/health
      port: 3000
    initialDelaySeconds: 15
    periodSeconds: 15
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1G
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http-player
      port: 3000
      targetPort: 3000
    type: ClusterIP
  serviceAccount:
    create: true
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sidecars: {}
  sunbird_default_device_token: ""
  sunbird_external_content_whitelisted_domains: ""
  tolerations: []
postgresql:
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ""
    logTimezone: ""
    pgAuditLog: ""
    pgAuditLogCatalog: "off"
  common:
    exampleValue: common-chart
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        existingSecret: ""
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlDatabase: ""
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        replicationPassword: ""
        servicePort: ""
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
  commonAnnotations:
    helm.sh/hook-weight: "-5"
    reloader.stakater.com/auto: "true"
  commonLabels: {}
  configurationConfigMap: ""
  containerPorts:
    postgresql: 5432
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  databases:
  - name: kong
  - name: druid_raw
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingSecret: ""
  extendedConfConfigMap: ""
  extraDeploy: []
  extraEnv: []
  extraEnvVarsCM: ""
  fullnameOverride: postgresql
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    imagePullSecrets: []
    imageRegistry: ""
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      existingSecret: ""
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlDatabase: ""
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      replicationPassword: ""
      servicePort: ""
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    storageClass: ""
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  host: postgresql
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgresql
    tag: 11.14.0-debian-10-r49
  initdbPassword: ""
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  initdbScriptsSecret: ""
  initdbUser: ""
  ldap:
    baseDN: ""
    bind_password: ""
    bindDN: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    search_attr: ""
    search_filter: ""
    server: ""
    suffix: ""
    tls: ""
    url: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    customMetrics: {}
    enabled: false
    extraEnvVars: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.10.1-debian-10-r14
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources: {}
    securityContext:
      enabled: false
      runAsUser: 1001
    service:
      annotations:
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
      loadBalancerIP: ""
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: ""
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    enabled: false
    explicitNamespacesSelector: {}
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    mountPath: /bitnami/postgresql
    selector: {}
    size: 25Gi
    snapshotName: ""
    storageClass: ""
    subPath: ""
  pgHbaConfiguration: ""
  port: 5432
  postgresqlConfiguration: {}
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlDatabase: ""
  postgresqlDbUserConnectionLimit: ""
  postgresqlExtendedConf: {}
  postgresqlInitdbArgs: ""
  postgresqlInitdbWalDir: ""
  postgresqlMaxConnections: ""
  postgresqlPassword: postgres
  postgresqlPghbaRemoveFilters: ""
  postgresqlPostgresConnectionLimit: ""
  postgresqlPostgresPassword: ""
  postgresqlSharedPreloadLibraries: pgaudit
  postgresqlStatementTimeout: ""
  postgresqlTcpKeepalivesCount: ""
  postgresqlTcpKeepalivesIdle: ""
  postgresqlTcpKeepalivesInterval: ""
  postgresqlUsername: postgres
  primary:
    affinity: {}
    annotations: {}
    extraInitContainers: []
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    priorityClassName: ""
    service:
      clusterIP: ""
      nodePort: ""
      type: ""
    sidecars: []
    tolerations: []
  primaryAsStandBy:
    enabled: false
    primaryHost: ""
    primaryPort: ""
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
  psp:
    create: false
  rbac:
    create: false
  readReplicas:
    affinity: {}
    annotations: {}
    extraInitContainers: []
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      enabled: true
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    priorityClassName: ""
    resources: {}
    service:
      clusterIP: ""
      nodePort: ""
      type: ""
    sidecars: []
    tolerations: []
    topologySpreadConstraints: []
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replication:
    applicationName: my_application
    enabled: false
    numSynchronousReplicas: 0
    password: repl_password
    readReplicas: 1
    singleService: true
    synchronousCommit: "off"
    uniqueServices: false
    user: repl_user
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
  schedulerName: ""
  securityContext:
    enabled: true
    fsGroup: 1001
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: ""
    port: 5432
    type: ClusterIP
  serviceAccount:
    autoMount: false
    enabled: false
    name: ""
  shmVolume:
    chmod:
      enabled: true
    enabled: true
    sizeLimit: ""
  startupProbe:
    enabled: false
    failureThreshold: 10
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
  terminationGracePeriodSeconds: ""
  tls:
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    crlFilename: ""
    enabled: false
    preferServerCiphers: true
  updateStrategy:
    type: RollingUpdate
  usePasswordFile: false
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r326
    securityContext:
      runAsUser: 0
provisioningAnnotations:
  helm.sh/hook-weight: "-4"
redis:
  architecture: replication
  auth:
    enabled: false
    existingSecret: ""
    existingSecretPasswordKey: ""
    password: ""
    sentinel: true
    usePasswordFiles: false
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        password: ""
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingConfigmap: ""
  extraDeploy: []
  fullnameOverride: redis
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    imagePullSecrets: []
    imageRegistry: ""
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      password: ""
      port: 6379
      replica:
        replicaCount: 0
    storageClass: ""
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  host: redis-master
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/redis
    tag: 7.0.9-debian-11-r1
  kubeVersion: ""
  master:
    affinity: {}
    args: []
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    count: 1
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    kind: StatefulSet
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    minReadySeconds: 0
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      medium: ""
      path: /data
      selector: {}
      size: 25Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
      subPathExpr: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  metrics:
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraArgs: {}
    extraEnvVars: []
    extraVolumeMounts: []
    extraVolumes: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.47.0-debian-11-r1
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    podLabels: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    redisTargetHost: localhost
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      port: 9121
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      podTargetLabels: []
      relabellings: []
      scrapeTimeout: ""
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
  nameOverride: redis
  networkPolicy:
    allowExternal: true
    enabled: false
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podSecurityPolicy:
    create: false
    enabled: false
  port: 6379
  rbac:
    create: false
    rules: []
  replica:
    affinity: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPU: ""
      targetMemory: ""
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    minReadySeconds: 0
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
      subPathExpr: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 0
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  secretAnnotations: {}
  sentinel:
    args: []
    automateClusterRecovery: false
    command: []
    configuration: ""
    containerPorts:
      sentinel: 26379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    downAfterMilliseconds: 60000
    enabled: false
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    failoverTimeout: 180000
    getMasterTimeout: 220
    image:
      debug: false
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 7.0.9-debian-11-r0
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: false
      labels: {}
      medium: ""
      selector: {}
      size: 100Mi
      sizeLimit: ""
      storageClass: ""
    preExecCmds: []
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    redisShutdownWaitFailover: true
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
        sentinel: ""
      ports:
        redis: 6379
        sentinel: 26379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  serviceBindings:
    enabled: false
  sysctl:
    command: []
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r92
    mountHostSys: false
    resources:
      limits: {}
      requests: {}
  tls:
    authClients: true
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    dhParamsFilename: ""
    enabled: false
    existingSecret: ""
  useExternalDNS:
    additionalAnnotations: {}
    annotationKey: external-dns.alpha.kubernetes.io/
    enabled: false
    suffix: ""
  useHostnames: true
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r92
    resources:
      limits: {}
      requests: {}
replicaCount: 1
report:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      domain: https://dummy.sunbird.com
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        db: postgres
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUser: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: false
    mountPath: /config
  envoy_probes:
    failureThreshold: 2
    httpGet:
      path: /ready
      port: 10000
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  envoy_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  fullnameOverride: report
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    domain: https://dummy.sunbird.com
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      db: postgres
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUser: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/report-service
    tag: release-4.10.0_RC6
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  init_container_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  initContainers: {}
  nameOverride: report
  nodeSelector: {}
  opa_enabled: true
  opa_probes:
    failureThreshold: 3
    httpGet:
      path: /health?plugins
      port: 8282
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  opa_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  podAnnotations: {}
  podSecurityContext: {}
  postgresql:
    db: postgres
    host: postgresql
    port: 5432
    postgresqlPassword: postgres
    postgresqlUser: postgres
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    ports:
    - name: http-report
      port: 3030
      targetPort: 3030
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: true
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels:
      release: monitoring
    scrapeTimeout: 10s
  sidecars: {}
  tolerations: []
router:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 3
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      domain: test
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        livenessProbe:
          enabled: true
          failureThreshold: 10
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        nameOverride: kafka
        persistence:
          size: 25Gi
        port: 9092
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
          numPartitions: 1
          replicationFactor: 1
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      postgresql:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        databases:
        - name: kong
        - name: druid_raw
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        image:
          repository: bitnami/postgresql
          tag: 11.14.0-debian-10-r49
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        nameOverride: redis
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  fullnameOverride: router
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    domain: test
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 10
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      nameOverride: kafka
      persistence:
        size: 25Gi
      port: 9092
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
        numPartitions: 1
        replicationFactor: 1
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    postgresql:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      databases:
      - name: kong
      - name: druid_raw
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      image:
        repository: bitnami/postgresql
        tag: 11.14.0-debian-10-r49
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      nameOverride: redis
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/router
    tag: release-3.9.0_RC1_01339f9_07941f0_1_router
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  initContainers: {}
  livenessProbe:
    httpGet:
      path: /healthz
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
  nameOverride: router
  nodeSelector: {}
  opa:
    enabled: false
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
  replicaCount: 0
  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http
      port: 80
      targetPort: 80
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sidecars: {}
  tolerations: []
zookeeper:
  fullnameOverride: zookeeper
  host: zookeeper
  nameOverride: zookeeper
  persistence:
    size: 2Gi
  port: 2181

HOOKS:
---
# Source: edbb/templates/provision/job-cleaner.yaml
# This chart is required because helm does not support deleting jobs if not having hooks.
# We can add pre-install, hook as some services may require schemas in db, and it'll cause catch22.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: edbb-job-deleter
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-5"
---
# Source: edbb/templates/provision/job-cleaner.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: edbb-job-deleter-role
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-5"
rules:
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["delete", "get", "list"]
---
# Source: edbb/templates/provision/job-cleaner.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: edbb-job-deleter-rolebinding
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-5"
subjects:
- kind: ServiceAccount
  name: edbb-job-deleter
roleRef:
  kind: Role
  name: edbb-job-deleter-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: edbb/charts/kong-apis/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: edbb-kong-apis
  annotations:
    helm.sh/hook: post-install,post-upgrade
spec:
  template:
    spec:
      initContainers:
      - name: wait-for-kong
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - "timeout 300 sh -c 'until nc -z kong 8000; do echo waiting for kong; sleep 10; done'"
      containers:
        - name: kong-apis
          image: "keshavprasad/kong-scripts:0.1.8"
          imagePullPolicy: IfNotPresent
          command:
          - /bin/sh
          - -c
          args:
            - python /kong_yaml_to_json.py && python /kong_apis.py /tmp/kong-apis.json --kong-admin-api-url=http://kong:8001
          volumeMounts:
          - name: config
            mountPath: /config
      volumes:
      - name: config
        configMap:
          name: edbb-kong-apis
      restartPolicy: Never
  backoffLimit: 30
---
# Source: edbb/charts/kong-consumers/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: edbb-kong-consumers
  annotations:
    helm.sh/hook: post-install,post-upgrade
spec:
  template:
    spec:
      initContainers:
      - name: wait-for-kong
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - "timeout 300 sh -c 'until nc -z kong 8000; do echo waiting for kong; sleep 10; done'"
      containers:
        - name: kong-consumers
          image: "keshavprasad/kong-scripts:0.1.8"
          imagePullPolicy: IfNotPresent
          command:
          - /bin/sh
          - -c
          args:
            - python /kong_yaml_to_json.py && python /kong_consumers.py /tmp/kong-consumers.json --kong-admin-api-url=http://kong:8001
          volumeMounts:
          - name: config
            mountPath: /config
      volumes:
      - name: config
        configMap:
          name: edbb-kong-consumers
      restartPolicy: Never
  backoffLimit: 30
---
# Source: edbb/templates/provision/job-cleaner.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: edbb-job-deleter
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-3"
spec:
  template:
    spec:
      serviceAccountName: edbb-job-deleter
      containers:
      - name: kubectl-container
        image: bitnami/kubectl
        imagePullPolicy: IfNotPresent
        command: ["bash", "-c"]
        args:
          - |
            chart_name="edbb"
            for job in $(kubectl get jobs -l scope=provisioning -o name | grep $chart_name); do
              if ! kubectl delete $job; then
                echo "Couldn't delete job $job"
                continue
              fi
              echo "deleted $job"
            done
      restartPolicy: Never
MANIFEST:
---
# Source: edbb/charts/bot/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bot
---
# Source: edbb/charts/cassandra/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cassandra
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
  annotations:
    helm.sh/hook-weight: "-5"
automountServiceAccountToken: true
---
# Source: edbb/charts/discussionmw/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: discussionmw
---
# Source: edbb/charts/echo/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: echo
---
# Source: edbb/charts/kafka/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-21.3.1
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.4.0"
    app.kubernetes.io/component: kafka
  annotations:
    helm.sh/hook-weight: "-5"
automountServiceAccountToken: true
---
# Source: edbb/charts/knowledgemw/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: knowledge-mw
---
# Source: edbb/charts/kong/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong
---
# Source: edbb/charts/nginx-private-ingress/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-private-ingress
---
# Source: edbb/charts/nginx-public-ingress/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-public-ingress
---
# Source: edbb/charts/nodebb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nodebb
---
# Source: edbb/charts/player/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: player
---
# Source: edbb/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: redis
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.9"
  annotations:
    helm.sh/hook-weight: "-5"
---
# Source: edbb/charts/report/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: report
---
# Source: edbb/charts/router/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: router
---
# Source: edbb/charts/cassandra/templates/cassandra-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cassandra
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
  annotations:
    helm.sh/hook-weight: "-5"
type: Opaque
data:
  cassandra-password: "a1VQcHpvRUl3RQ=="
---
# Source: edbb/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
  annotations:
    helm.sh/hook-weight: "-5"
    reloader.stakater.com/auto: "true"
  namespace: sunbird
type: Opaque
data:
  postgresql-password: "cG9zdGdyZXM="
---
# Source: edbb/charts/bot/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: bot
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bot
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: bot-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  dummy.conf: |-
      name=sunbird
      config={
          name=dummy
        }
       # Take only root level files (configs/*) for configmaps
---
# Source: edbb/charts/bot/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: bot-env
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bot
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: bot-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  # for example,
  
  # ENV: dev
  DUMMY_ENV: "dummy"
---
# Source: edbb/charts/cassandra/templates/metrics-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cassandra-metrics-conf
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
    app.kubernetes.io/part-of: cassandra
    app.kubernetes.io/component: cassandra-exporter
  annotations:
    helm.sh/hook-weight: "-5"
data:
  config.yml: |-
    host: localhost:7199
    ssl: False
    user:
    password:
    listenPort: 8080
    blacklist:
      # To profile the duration of jmx call you can start the program with the following options
      # > java -Dorg.slf4j.simpleLogger.defaultLogLevel=trace -jar cassandra_exporter.jar config.yml --oneshot
      #
      # To get intuition of what is done by cassandra when something is called you can look in cassandra
      # https://github.com/apache/cassandra/tree/trunk/src/java/org/apache/cassandra/metrics
      # Please avoid to scrape frequently those calls that are iterating over all sstables
    
      # Unaccessible metrics (not enough privilege)
      - java:lang:memorypool:.*usagethreshold.*
    
      # Leaf attributes not interesting for us but that are presents in many path
      - .*:999thpercentile
      - .*:95thpercentile
      - .*:fifteenminuterate
      - .*:fiveminuterate
      - .*:durationunit
      - .*:rateunit
      - .*:stddev
      - .*:meanrate
      - .*:mean
      - .*:min
    
      # Path present in many metrics but uninterresting
      - .*:viewlockacquiretime:.*
      - .*:viewreadtime:.*
      - .*:cas[a-z]+latency:.*
      - .*:colupdatetimedeltahistogram:.*
    
      # Mostly for RPC, do not scrap them
      - org:apache:cassandra:db:.*
    
      # columnfamily is an alias for Table metrics
      # https://github.com/apache/cassandra/blob/8b3a60b9a7dbefeecc06bace617279612ec7092d/src/java/org/apache/cassandra/metrics/TableMetrics.java#L162
      - org:apache:cassandra:metrics:columnfamily:.*
    
      # Should we export metrics for system keyspaces/tables ?
      - org:apache:cassandra:metrics:[^:]+:system[^:]*:.*
    
      # Don't scrap us
      - com:criteo:nosql:cassandra:exporter:.*
    
    maxScrapFrequencyInSec:
      50:
        - .*
    
      # Refresh those metrics only every hour as it is costly for cassandra to retrieve them
      3600:
        - .*:snapshotssize:.*
        - .*:estimated.*
        - .*:totaldiskspaceused:.*
---
# Source: edbb/charts/discussionmw/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: discussionmw
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: discussionmw
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: discussionmw-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  dummy.conf: |-
      name=sunbird
      config={
          name=dummy
        }
       # Take only root level files (configs/*) for configmaps
---
# Source: edbb/charts/discussionmw/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: discussionmw-env
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: discussionmw
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: discussionmw-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  # for example,
  
  # ENV: dev
  API_AUTH_TOKEN: ""
  authorization_token: ""
  TELEMETRY_EVENTS_BATCH_SIZE: "1"
  TELEMETRY_SERVICE_API_SLUG: "/v1/telemetry"
  TELEMETRY_SERVICE_URL: "http://telemetry-service:9001"
  enable_audit_event: 'True'
  moderation_flag: 'False'
  nodebb_api_slug: "/discussions/api"
  nodebb_service_url: "http://nodebb:4567"
---
# Source: edbb/charts/echo/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: echo
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: echo-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  dummy.conf: |-
      name=sunbird
      config={
          name=dummy
        }
       # Take only root level files (configs/*) for configmaps
---
# Source: edbb/charts/echo/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-env
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: echo
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: echo-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  # for example,
  
  # ENV: dev
  DUMMY_ENV: "dummy"
---
# Source: edbb/charts/kafka/charts/zookeeper/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-scripts
  namespace: sunbird
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.1.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.8.1"
    app.kubernetes.io/component: zookeeper
data:
  init-certs.sh: |-
    #!/bin/bash
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
    # check ZOO_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
        export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID="$((ORD + 1 ))"
        else
            echo "Failed to get index from hostname $HOST"
            exit 1
        fi
    fi
    exec /entrypoint.sh /run.sh
---
# Source: edbb/charts/kafka/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-scripts
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-21.3.1
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.4.0"
  annotations:
    helm.sh/hook-weight: "-5"
data:
  setup.sh: |-
    #!/bin/bash

    ID="${MY_POD_NAME#"kafka-"}"
    # If process.roles is not set at all, it is assumed to be in ZooKeeper mode.
    # https://kafka.apache.org/documentation/#kraft_role
    
    if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
        if [[ $KAFKA_CFG_PROCESS_ROLES == "" ]]; then
            export KAFKA_CFG_BROKER_ID="$(grep "broker.id" "/bitnami/kafka/data/meta.properties" | awk -F '=' '{print $2}')"
        else
            export KAFKA_CFG_BROKER_ID="$(grep "node.id" "/bitnami/kafka/data/meta.properties" | awk -F '=' '{print $2}')"
        fi
    else
        export KAFKA_CFG_BROKER_ID="$((ID + 0))"
    fi

    if [[ $KAFKA_CFG_PROCESS_ROLES == *"controller"* ]]; then
        node_id=0
        pod_id=0
        while :
        do 
            VOTERS="${VOTERS}$node_id@kafka-$pod_id.kafka-headless.sunbird.svc.cluster.local:9095"
            node_id=$(( $node_id + 1 ))
            pod_id=$(( $pod_id + 1 ))
            if [[ $pod_id -ge 1 ]]; then
                break
            else
                VOTERS="$VOTERS,"
            fi
        done
        export KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=$VOTERS
    fi

    # Configure zookeeper client

    exec /entrypoint.sh /run.sh
---
# Source: edbb/charts/knowledgemw/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: knowledge-mw
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: knowledge-mw
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: knowledgemw-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps
---
# Source: edbb/charts/knowledgemw/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: knowledge-mw-env
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: knowledge-mw
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: knowledgemw-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  sunbird_environment: dev
  sunbird_portal_base_url: "https://"
  sunbird_content_plugin_base_url: "https://"
  sunbird_keycloak_auth_server_url: "https:///auth"
  sunbird_data_service_api_base_url: "https:///api"
  sunbird_dial_code_registry_url: "https:///dail/"
  sunbird_language_service_api_base_url: "https:///api/language"
  sunbird_cache_store: memory
  sunbird_cache_ttl: "1800"
  sunbird_cassandra_consistency_level: ""
  sunbird_cassandra_replication_strategy: '{"class":"SimpleStrategy","replication_factor":"1"}'
  sunbird_cassandra_urls: "cassandra:9042"
  sunbird_content_repo_api_base_url: "http://learning:8080/learning-service"
  sunbird_content_service_blacklisted_channels: "ALL"
  sunbird_content_service_blacklisted_contenttype: ""
  sunbird_content_service_blacklisted_framework: ""
  sunbird_content_service_blacklisted_mimetype: ""
  sunbird_content_service_blacklisted_resourcetype: ""
  sunbird_content_service_channel_refresh_cron: ""
  sunbird_content_service_enable_logging: "true"
  sunbird_content_service_log_level: info
  sunbird_content_service_whitelisted_channels: ""
  sunbird_content_service_whitelisted_framework: ""
  sunbird_content_service_whitelisted_mimetype: ""
  sunbird_content_service_whitelisted_resourcetype: ""
  sunbird_default_channel: sunbird
  sunbird_dial_repo_api_base_url: "http://dial-service:9000"
  sunbird_health_check_enable: "true"
  sunbird_instance: sunbird
  sunbird_kafka_host: "kafka:9092"
  sunbird_keycloak_client_id: portal
  sunbird_keycloak_public: "True"
  sunbird_keycloak_realm: sunbird
  sunbird_learner_service_base_url: http://kong:8000/
  sunbird_lock_expiry_time: "120"
  sunbird_plugin_repo_api_base_url: "http://search-service:9000"
  sunbird_qrimage_topic: .knowlg.qrimage.request
  sunbird_search_service_api_base_url: "http://search-service:9000"
  sunbird_telemetry_sync_batch_size: "200"
  sunbird_content_repo_api_key: ""
  sunbird_language_service_api_key: ""
  sunbird_learner_service_api_key: ""
  sunbird_dial_repo_api_key: ""
  sunbird_search_service_api_key: ""
  sunbird_plugin_repo_api_key: ""
  sunbird_data_service_api_key: ""
  sunbird_learner_service_local_base_url: "http://userorg-service:9000"
  # spell check - https://github.com/Sunbird-Knowlg/knowledge-mw-service/blob/07c2cb26cc200df4c644d482a01eff299a37ad39/src/app.js#L33
  sunbird_contnet_service_base_url: "http://content-service:9000"
  # release-7.0.0
  sunbird_taxonomy_service_api_base_url: http://taxonomy-service:9000
---
# Source: edbb/charts/knowledgemw/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: knowledge-mw-opa
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: knowledge-mw
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: knowledgemw-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
    
  common.rego: |-
      package common
      
      import input.attributes.request.http as http_request
      import future.keywords.in
      
      ROLES := {
         "BOOK_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "CONTENT_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "FLAG_REVIEWER": ["publishContent", "rejectContent", "rejectContentV2"],
      
         "BOOK_CREATOR": ["copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent"],
      
         "CONTENT_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock",  "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_MENTOR": ["updateBatch", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "PROGRAM_MANAGER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "PROGRAM_DESIGNER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "ORG_ADMIN": ["acceptTnc", "assignRole", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "getUserProfileV5", "updateUserV2", "readUserConsent", "createTenantPreferences", "updateTenantPreferences", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "REPORT_VIEWER": ["acceptTnc", "getReportSummary", "listReportSummary"],
      
         "REPORT_ADMIN": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "acceptTnc", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "PUBLIC": ["PUBLIC"]
      }
      
      x_authenticated_user_token := http_request.headers["x-authenticated-user-token"]
      x_authenticated_for := http_request.headers["x-authenticated-for"]
      private_ingressgateway_ip := ""
      
      jwt_public_keys := {
      "KEYCLOAK_KID": "KEYCLOAK_PUBLIC_KEY"
      }
      
      user_token := {"header": header, "payload": payload} {
        encoded := x_authenticated_user_token
        [header, payload, _] := io.jwt.decode(encoded)
      }
      
      for_token := {"payload": payload} {
        encoded := x_authenticated_for
        [_, payload, _] := io.jwt.decode(encoded)
      }
      
      iss := "https:///auth/realms/sunbird"
      token_kid := user_token.header.kid
      token_iss := user_token.payload.iss
      token_exp := user_token.payload.exp
      current_time := time.now_ns()
      
      token_sub := split(user_token.payload.sub, ":")
      # Check for both cases - With and without federation_id in sub field as below
      # sub := f:federation_id:user_id OR sub := user_id
      token_userid = token_sub[2] {
          count(token_sub) == 3
      } else = token_sub[0] {
          count(token_sub) == 1
      }
      for_token_userid := for_token.payload.sub
      for_token_parentid := for_token.payload.parentId
      
      # Desktop app is still using keycloak tokens which will not have roles
      # This is a temporary fix where we will append the roles as PUBLIC in OPA
      
      default_role := [{"role": "PUBLIC", "scope": []}]
      
      token_roles = user_token.payload.roles {
          user_token.payload.roles
      } else = default_role {
          not user_token.payload.roles
      }
      
      for_token_exists {
        x_authenticated_for
        count(x_authenticated_for) > 0
      }
      
      userid = token_userid {
          not x_authenticated_for
      } else = token_userid {
          count(x_authenticated_for) == 0 # This is a temporary fix as the mobile app is sending empty headers as x-authenticated-for: ""
      } else = for_token_userid {
          for_token_exists
      }
      
      validate_token {
        io.jwt.verify_rs256(x_authenticated_user_token, jwt_public_keys[token_kid])
        token_exp * 1000000000 > current_time
        token_iss == iss
      }
      
      is_an_internal_request {
        http_request.host == private_ingressgateway_ip
      }
      
      acls_check(acls) = indicies {
        validate_token
        indicies := [idx | some i; ROLES[token_roles[i].role][_] == acls[_]; idx := i]
        count(indicies) > 0
      }
      
      role_check(roles) = indicies {
        indicies := [idx | some i; token_roles[i].role in roles; idx := i]
        count(indicies) > 0
      }
      
      org_check(roles) = token_organisationids {
        indicies :=  role_check(roles)
        count(indicies) > 0
        token_organisationids := [ids | ids := token_roles[indicies[_]].scope[_].organisationId]
        count(token_organisationids) > 0
      }
      
      parent_id_check {
          x_authenticated_for
          count(x_authenticated_for) > 0
          token_userid == for_token_parentid
      }
      
      parent_id_check {
          count(x_authenticated_for) == 0
      }
      
      parent_id_check {
          not x_authenticated_for
      }
      
      public_role_check {
        acls := ["PUBLIC"]
        roles := ["PUBLIC"]
        acls_check(acls)
        role_check(roles)
        userid
        parent_id_check
      }
    
  main.rego: |-
      package main
      
      import input.attributes.request.http as http_request
      import data.policies as policy
      import future.keywords.in
      
      default allow = {
        "allowed": false,
        "headers": {"x-request-allowed": "no"},
        "body": "You do not have permission to perform this operation",
        "http_status": 403
      }
      
      urls[keys] { policy.urls_to_action_mapping[keys]}
      
      regex_urls := [url | url := regex.find_n(urls[_], http_request.path, 1)[0]]
      matching_urls := [url | some i; startswith(http_request.path, regex_urls[i]); url := regex_urls[i]]
      identified_url := max(matching_urls)
      identified_action := policy.urls_to_action_mapping[identified_url]
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      skipped_consumers := ["portal", "desktop"]
      x_consumer_username := http_request.headers["x-consumer-username"]
      check_if_consumer_is_skipped {
         x_consumer_username in skipped_consumers
      }
      
      allow = status {
         not check_if_consumer_is_skipped
         policy[identified_action]
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Passed",
            "http_status": 200
         }
      }
      
      allow = status {
         not identified_action
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      allow = status {
         check_if_consumer_is_skipped
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
    
  policies.rego: |-
      package policies
      
      import data.common as super
      import future.keywords.in
      import input.attributes.request.http as http_request
      
      x_channel_id := http_request.headers["x-channel-id"]
      
      urls_to_action_mapping := {
        "/v1/content/copy": "copyContent",
        "/v1/content/create": "createContent",
        "/v1/lock/create": "createLock",
        "/v1/content/publish": "publishContent",
        "/v1/content/collaborator/update": "updateCollaborators",
        "/v1/lock/list": "listLock",
        "/v1/lock/retire": "retireLock",
        "/v1/lock/refresh": "refreshLock",
        "/v1/content/reject": "rejectContent",
        "/v1/content/update": "updateContent",
        "/v1/content/upload": "uploadContent",
        "/v1/content/review": "submitContentForReviewV1"
      }
      
      copyContent {
        acls := ["copyContent"]
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "COURSE_CREATOR"]
        super.acls_check(acls)
        # Org check will do an implicit role check so there is no need to invoke super.role_check(roles)
        token_organisationids := super.org_check(roles)
        input.parsed_body.request.content.createdFor[_] in token_organisationids
        input.parsed_body.request.content.createdBy == super.userid
      }
      
      createContent {
        acls := ["createContent"]
        # Due to portal legacy code, we need to add REVIEWER roles also for this API, this has to be fixed
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "COURSE_CREATOR", "BOOK_REVIEWER", "CONTENT_REVIEWER"]
        super.acls_check(acls)
        # Org check will do an implicit role check so there is no need to invoke super.role_check(roles)
        token_organisationids := super.org_check(roles)
        x_channel_id in token_organisationids
        x_channel_id in input.parsed_body.request.content.createdFor
        # The below payload is being invoked when creating contents
        input.parsed_body.request.content.createdFor[_] in token_organisationids
        input.parsed_body.request.content.createdBy == super.userid
      }
      
      createContent {
        acls := ["createContent"]
        # Due to portal legacy code, we need to add REVIEWER roles also for this API, this has to be fixed
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "COURSE_CREATOR", "BOOK_REVIEWER", "CONTENT_REVIEWER"]
        super.acls_check(acls)
        # Org check will do an implicit role check so there is no need to invoke super.role_check(roles)
        token_organisationids := super.org_check(roles)
        x_channel_id in token_organisationids
        # The below payload is being invoked when creating certificate templates
        input.parsed_body.request.content.channel in token_organisationids
        input.parsed_body.request.content.channel == x_channel_id
        input.parsed_body.request.content.createdBy == super.userid
      }
      
      createLock {
        acls := ["createLock"]
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "BOOK_REVIEWER", "CONTENT_REVIEWER"]
        super.acls_check(acls)
        super.role_check(roles)
        input.parsed_body.request.createdBy == super.userid
      }
      
      publishContent {
        acls := ["publishContent"]
        roles := ["BOOK_REVIEWER", "CONTENT_REVIEWER", "FLAG_REVIEWER"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      updateCollaborators {
        acls := ["updateCollaborators"]
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "COURSE_CREATOR"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      listLock {
        acls := ["listLock"]
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "BOOK_REVIEWER", "CONTENT_REVIEWER"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      retireLock {
        acls := ["retireLock"]
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "BOOK_REVIEWER", "CONTENT_REVIEWER"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      refreshLock {
        acls := ["refreshLock"]
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "BOOK_REVIEWER", "CONTENT_REVIEWER"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      rejectContent {
        acls := ["rejectContent"]
        roles := ["BOOK_REVIEWER", "CONTENT_REVIEWER", "FLAG_REVIEWER"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      updateContent {
        acls := ["updateContent"]
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "COURSE_CREATOR"]
        super.acls_check(acls)
        # Org check will do an implicit role check so there is no need to invoke super.role_check(roles)
        token_organisationids := super.org_check(roles)
        x_channel_id in token_organisationids
      }
      
      uploadContent {
        acls := ["uploadContent"]
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "COURSE_CREATOR"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      submitContentForReviewV1 {
        acls := ["submitContentForReviewV1"]
        roles := ["BOOK_CREATOR", "CONTENT_CREATOR", "COURSE_CREATOR"]
        super.acls_check(acls)
        super.role_check(roles)
      }
---
# Source: edbb/charts/knowledgemw/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: knowledge-mw-envoy
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: knowledge-mw
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: knowledgemw-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
    
  config.yaml: |-
      static_resources:
        listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9999
          per_connection_buffer_limit_bytes: 62914560
          filter_chains:
          - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                access_log:
                - name: envoy.access_loggers.stdout
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                    log_format:
                      text_format: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS_WITHOUT_PORT% - - [%START_TIME(%d/%b/%Y:%H:%M:%S %z)%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(X-DEVICE-ID)%\" \"%REQ(X-CHANNEL-ID)%\" \"%REQ(X-APP-ID)%\" \"%REQ(X-APP-VER)%\" \"%REQ(X-SESSION-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: backend
                    domains:
                    - "*"
                    routes:
                    - match:
                        prefix: "/opa/metrics"
                      route:
                        prefix_rewrite: "/metrics"
                        cluster: opa
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/service/health"
                      route:
                        cluster: service
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/service/health"
                      route:
                        cluster: service
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/"
                      route:
                        cluster: service
                        timeout: 60s
                http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    transport_api_version: V3
                    with_request_body:
                      max_request_bytes: 62914560
                      allow_partial_message: true
                    failure_mode_allow: true
                    grpc_service:
                      google_grpc:
                        target_uri: 127.0.0.1:9191
                        stat_prefix: ext_authz
                      timeout: 5s
                - name: envoy.filters.http.router
        clusters:
        - name: service
          connect_timeout: 5s
          per_connection_buffer_limit_bytes: 62914560
          type: static
          load_assignment:
            cluster_name: service
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 5000
        - name: opa
          connect_timeout: 5s
          type: static
          load_assignment:
            cluster_name: opa
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8181
      admin:
        access_log_path: "/dev/stdout"
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
---
# Source: edbb/charts/knowledgemw/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: knowledge-mw-access-keys
data:
---
# Source: edbb/charts/kong-apis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edbb-kong-apis
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong-apis
    app.kubernetes.io/version: 0.14.1
    helm.sh/chart: kong-apis-0.1.0
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  kong-apis.yaml: |-
      ---
      kong_apis:
      - name: acceptContentFlag
        uris: "/content/v1/flag/accept"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/flag/accept"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: acceptTermsAndCondition
        uris: "/user/v1/tnc/accept"
        upstream_url: "http://userorg-service:9000/v1/user/tnc/accept"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - appAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: addBadgeToUser
        uris: "/user/v1/badges/add"
        upstream_url: "http://userorg-service:9000/v1/user/badges/add"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - badgeCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: addSystemSettings
        uris: "/data/v1/system/settings/set"
        upstream_url: "http://userorg-service:9000/v1/system/settings/set"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - appCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: assemblePage
        uris: "/data/v1/page/assemble"
        upstream_url: "http://lms-service:9000/v1/page/assemble"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: assignRole
        uris: "/user/v1/role/assign"
        upstream_url: "http://userorg-service:9000/v1/user/assign/role"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: assignRoleV2
        uris: "/user/v2/role/assign"
        upstream_url: "http://userorg-service:9000/v2/user/assign/role"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: batchBulkEnrolment
        uris: "/course/v1/batch/bulk/enrollment"
        upstream_url: "http://lms-service:9000/v1/batch/bulk/enrollment"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: batchBulkUnEnrolment
        uris: "/course/v1/batch/bulk/unenrollment"
        upstream_url: "http://lms-service:9000/v1/batch/bulk/unenrollment"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: blockUser
        uris: "/user/v1/block"
        upstream_url: "http://userorg-service:9000/v1/user/block"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: checkUploadJobStatus
        uris: "/data/v1/upload/status"
        upstream_url: "http://userorg-service:9000/v1/upload/status"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - orgSuperAdmin
          - userSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: compositeSearch
        uris: "/composite/v1/search"
        upstream_url: "http://knowledge-mw-service:5000/v1/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
          - contentTempAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: compositePrivateSearch
        uris: "/composite/v1/private/search"
        upstream_url: "http://knowledge-mw-service:5000/v3/private/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: contentBadgeLink
        uris: "/badging/v1/content/link"
        upstream_url: "http://lms-service:9000/v1/content/link"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - badgeUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: contentBadgeUnLink
        uris: "/badging/v1/content/unlink"
        upstream_url: "http://lms-service:9000/v1/content/unlink"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - badgeAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: copyContent
        uris: "/content/v1/copy"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/copy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: copyFramework
        uris: "/framework/v1/copy"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/copy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: courseBatchAddCertificateTemplate
        uris: "/course/batch/cert/v1/template/add"
        upstream_url: "http://lms-service:9000/v1/course/batch/cert/template/add"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: courseBatchRemoveCertificateTemplate
        uris: "/course/batch/cert/v1/template/remove"
        upstream_url: "http://lms-service:9000/v1/course/batch/cert/template/remove"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: courseEnrollment
        uris: "/course/v1/enrol"
        upstream_url: "http://lms-service:9000/v1/course/enroll"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: courseIssueCertificate
        uris: "/course/batch/cert/v1/issue"
        upstream_url: "http://lms-service:9000/v1/course/batch/cert/issue"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: courseUnEnrollment
        uris: "/course/v1/unenrol"
        upstream_url: "http://lms-service:9000/v1/course/unenroll"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createBatch
        uris: "/course/v1/batch/create"
        upstream_url: "http://lms-service:9000/v1/course/batch/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createCertTemplate
        uris: "/cert/v1/template/create"
        upstream_url: "http://cert-service:9000/cert/v1/template/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: createChannel
        uris: "/channel/v1/create"
        upstream_url: "http://knowledge-mw-service:5000/v1/channel/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - channelCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createContent
        uris: "/content/v1/create"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createCourse
        uris: "/course/v1/create"
        upstream_url: "http://lms-service:9000/v1/course/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createForm
        uris: "/data/v1/form/create"
        upstream_url: "http://player:3000/plugin/v1/form/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - formCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: createFramework
        uris: "/framework/v1/create"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createFrameworkCategory
        uris: "/framework/v1/category/create"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/category/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createFrameworkTerm
        uris: "/framework/v1/term/create"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/term/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createLock
        uris: "/lock/v1/create"
        upstream_url: "http://knowledge-mw-service:5000/v1/lock/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createNote
        uris: "/notes/v1/create"
        upstream_url: "http://userorg-service:9000/v1/note/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - noteCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createOrg
        uris: "/org/v1/create"
        upstream_url: "http://userorg-service:9000/v1/org/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - orgCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createPage
        uris: "/data/v1/page/create"
        upstream_url: "http://lms-service:9000/v1/page/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - pageCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createPageSection
        uris: "/data/v1/page/section/create"
        upstream_url: "http://lms-service:9000/v1/page/section/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - pageCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createPublisher
        uris: "/dialcode/v1/publisher/create"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/publisher/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createSession
        uris: "/sso/v1/create/session"
        upstream_url: "http://player:3000/v1/sso/create/session"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - ssoAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createUser
        uris: "/user/v1/create"
        upstream_url: "http://userorg-service:9000/v1/user/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createUserLearnerV3
        uris: "/user/v1/signup"
        upstream_url: "http://userorg-service:9000/v1/user/signup"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createUserVersion2
        uris: "/user/v2/create"
        upstream_url: "http://userorg-service:9000/v2/user/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createUserVersion3
        uris: "/user/v3/create"
        upstream_url: "http://userorg-service:9000/v3/user/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createUserVersion4
        uris: "/user/v4/create"
        upstream_url: "http://userorg-service:9000/v4/user/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deleteNote
        uris: "/notes/v1/delete"
        upstream_url: "http://userorg-service:9000/v1/note/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - noteAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deviceProfile
        uris: "/v3/device/profile"
        upstream_url: "http://analytics-service:9000/v1/device/profile"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - deviceCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deviceRegister
        uris: "/v3/device/register"
        upstream_url: "http://analytics-service:9000/v1/device/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - deviceCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: dialAssemble
        uris: "/data/v1/dial/assemble"
        upstream_url: "http://lms-service:9000/v1/dial/assemble"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: downloadCertificate
        uris: "/user/v1/certs/download"
        upstream_url: "http://cert-registry-service:9000/certs/v1/registry/download"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: downloadRegCertificate
        uris: "/certreg/v1/certs/download"
        upstream_url: "http://cert-registry-service:9000/certs/v1/registry/download"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: downloadTOC
        uris: "/textbook/v1/toc/download"
        upstream_url: "http://lms-service:9000/v1/textbook/toc/download"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousContentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: echo
        uris: "/echo"
        upstream_url: "http://echo:9595"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - ssoCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: experimentcreate
        uris: "/data/v1/experiement/create"
        upstream_url: "http://analytics-service:9000/experiment/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - experimentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: experimentread
        uris: "/data/v1/experiement/get"
        upstream_url: "http://analytics-service:9000/experiment/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - expirementAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: fetchURLMetaInformation
        uris: "/content/v1/fetchmeta"
        upstream_url: "http://knowledge-mw-service:5000/v1/url/fetchmeta"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - appAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: flagContent
        uris: "/content/v1/flag"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/flag"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: freshDesk
        uris: "/tickets/v1/create"
        upstream_url: "http://dummy.freshDesk.url/api/v2/tickets"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - appAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: generateDialcodes
        uris: "/dialcode/v1/generate"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/generate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: generateOtp
        uris: "/otp/v1/generate"
        upstream_url: "http://userorg-service:9000/v1/otp/generate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: generateOtpV2
        uris: "/otp/v2/generate"
        upstream_url: "http://userorg-service:9000/v2/otp/generate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getBatch
        uris: "/course/v1/batch/read"
        upstream_url: "http://lms-service:9000/v1/course/batch/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: collectionSummaryAgg
        uris: "/v1/collection/summary"
        upstream_url: "http://lms-service:9000/v1/collection/summary"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getContentUploadUrl
        uris: "/content/v1/upload/url/read"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/upload/url"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getCourseHierarchy
        uris: "/course/v1/hierarchy"
        upstream_url: "http://knowledge-mw-service:5000/v1/course/hierarchy"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getPageSettings
        uris: "/data/v1/page/read"
        upstream_url: "http://lms-service:9000/v1/page/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - pageAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getParticipants
        uris: "/course/v1/batch/participants/list"
        upstream_url: "http://lms-service:9000/v1/batch/participants/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getSystemSettings
        uris: "/data/v1/system/settings/get"
        upstream_url: "http://userorg-service:9000/v1/system/settings/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousAppAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getTenantInfo
        uris: "/org/v1/tenant/info"
        upstream_url: "http://player:3000/v1/tenant/info"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousOrgAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getUserByKey
        uris: "/user/v1/get"
        upstream_url: "http://userorg-service:9000/v1/user/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getUserByKeyV2
        uris: "/user/v2/get"
        upstream_url: "http://userorg-service:9000/v2/user/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getUserProfile
        uris: "/user/v1/read"
        upstream_url: "http://userorg-service:9000/v1/user/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getUserProfileV2
        uris: "/user/v2/read"
        upstream_url: "http://userorg-service:9000/v2/user/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: indexSync
        uris: "/data/v1/index/sync"
        upstream_url: "http://userorg-service:9000/v1/data/sync"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
          - orgAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: ItemSetAPIs
        uris: "/itemset/v1"
        upstream_url: "http://knowledge-mw-service:5000/itemset/v1"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - itemSetAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: KongConsumerApi
        uris: "/api-manager/v1/consumer"
        upstream_url: "http://adminutil:4000/v1/consumer"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - kongConsumerAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: LicenseAPI
        uris: "/license/v3"
        upstream_url: "http://content-service:9000/license/v3"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - appAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: linkDialcodeContent
        uris: "/dialcode/v1/content/link"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/content/link"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listAllBadges
        uris: "/org/v1/badges/list"
        upstream_url: "http://userorg-service:9000/v1/badges/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - badgeAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: listChannel
        uris: "/channel/v1/list"
        upstream_url: "http://knowledge-mw-service:5000/v1/channel/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - channelAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchCourseBatches
        uris: "/course/v1/batch/list"
        upstream_url: "http://lms-service:9000/v1/course/batch/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousCourseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listCourseEnrollments
        uris: "/course/v1/user/enrollment/list"
        upstream_url: "http://lms-service:9000/v1/user/courses/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousCourseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: privateListCourseEnrollments
        uris: "/course/private/v1/user/enrollment/list"
        upstream_url: "http://lms-service:9000/private/v1/user/courses/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listUserCourseEnrollments
        uris: "/course/v2/user/enrollment/list"
        upstream_url: "http://lms-service:9000/v2/user/courses/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousCourseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: privateListUserCourseEnrollments
        uris: "/course/private/v2/user/enrollment/list"
        upstream_url: "http://lms-service:9000/private/v2/user/courses/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - privateCourseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listDialcodes
        uris: "/dialcode/v1/list"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listFramework
        uris: "/framework/v1/list"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listLock
        uris: "/lock/v1/list"
        upstream_url: "http://knowledge-mw-service:5000/v1/lock/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listOrdinals
        uris: "/meta/v1/ordinals/list"
        upstream_url: "http://knowledge-mw-service:5000/v1/ordinals/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - appAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listPageSections
        uris: "/data/v1/page/section/list"
        upstream_url: "http://lms-service:9000/v1/page/section/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - pageAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listResourceBundles
        uris: "/meta/v1/resourcebundles/list"
        upstream_url: "http://knowledge-mw-service:5000/v1/resourcebundles/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousAppAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listSystemSettings
        uris: "/data/v1/system/settings/list"
        upstream_url: "http://userorg-service:9000/v1/system/settings/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - appAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listTerms
        uris: "/meta/v1/terms/list"
        upstream_url: "http://knowledge-mw-service:5000/v1/terms/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: masterLocationCreate
        uris: "/data/v1/location/create"
        upstream_url: "http://userorg-service:9000/v1/location/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - locationCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: masterLocationDelete
        uris: "/data/v1/location/delete"
        upstream_url: "http://userorg-service:9000/v1/location/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - locationAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: masterLocationSearch
        uris: "/data/v1/location/search"
        upstream_url: "http://userorg-service:9000/v1/location/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - locationAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: masterLocationUpdate
        uris: "/data/v1/location/update"
        upstream_url: "http://userorg-service:9000/v1/location/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - locationUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: masterLocationUpload
        uris: "/data/v1/bulk/location/upload"
        upstream_url: "http://userorg-service:9000/v1/bulk/location/upload"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - locationSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: mergeUserAccounts
        uris: "/user/v1/account/merge"
        upstream_url: "http://userorg-service:9000/private/user/v1/account/merge"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: orgAssignKeys
        uris: "/org/v1/assign/key"
        upstream_url: "http://userorg-service:9000/v1/org/assign/key"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - orgAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: orgBulkUpload
        uris: "/org/v1/upload"
        upstream_url: "http://userorg-service:9000/v1/org/upload"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - orgSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: pluginSearch
        uris: "/plugins/v1/search"
        upstream_url: "http://knowledge-mw-service:5000/v1/plugins/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - pluginAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: PrivateContentCreateAPIs
        uris: "/private/content/v3/create"
        upstream_url: "http://content-service:9000/content/v3/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: PrivateContentReadAPIs
        uris: "/private/content/v3/read"
        upstream_url: "http://content-service:9000/content/v3/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: PrivateContentUpdateAPIs
        uris: "/private/content/v3/update"
        upstream_url: "http://content-service:9000/content/v3/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: PrivateContentRetireAPI
        uris: "/private/content/v3/retire"
        upstream_url: "http://learning:8080/learning-service/content/v3/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: PrivateContentUploadAPI
        uris: "/private/content/v3/upload"
        upstream_url: "http://content-service:9000/content/v3/upload"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: PrivateContentReviewAPI
        uris: "/private/content/v3/review"
        upstream_url: "http://learning:8080/learning-service/content/v3/review"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: PrivateContentPublishAPI
        uris: "/private/content/v3/publish"
        upstream_url: "http://learning:8080/learning-service/content/v3/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: PrivateContentRejectAPI
        uris: "/private/content/v3/reject"
        upstream_url: "http://learning:8080/learning-service/content/v3/reject"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: PrivateContentHierarchyAPI
        uris: "/private/content/v3/hierarchy"
        upstream_url: "http://content-service:9000/content/v3/hierarchy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: privateUserAssignRole
        uris: "/user/private/v1/assign/role"
        upstream_url: "http://userorg-service:9000/private/user/v1/assign/role"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: privateUserRead
        uris: "/user/private/v1/read"
        upstream_url: "http://userorg-service:9000/private/user/v1/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userSuperAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: publishContent
        uris: "/content/v1/publish"
        upstream_url: "http://content-service:9000/content/v3/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: publishCourse
        uris: "/course/v1/publish"
        upstream_url: "http://knowledge-mw-service:5000/v1/course/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: publishDialcode
        uris: "/dialcode/v1/publish"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: publishFramework
        uris: "/framework/v1/publish"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: qrCodeBatchProcessRetry
        uris: "/dialcode/v1/process/retry"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/process/retry"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: qrCodeBatchProcessStatus
        uris: "/dialcode/v1/process/status"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/process/status"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: qrCodeDownload
        uris: "/course/v1/qrcode/download"
        upstream_url: "http://lms-service:9000/v1/course/qrcode/download"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readCertTemplate
        uris: "/cert/v1/template/read"
        upstream_url: "http://cert-service:9000/cert/v1/template/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: readChannel
        uris: "/channel/v1/read"
        upstream_url: "http://knowledge-mw-service:5000/v1/channel/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "30000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readContent
        uris: "/content/v1/read"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: contentPrivateRead
        uris: "/content/v1/private/read"
        upstream_url: "http://content-service:9000/content/v4/private/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readContentState
        uris: "/course/v1/content/state/read"
        upstream_url: "http://lms-service:9000/v1/content/state/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: privateReadContentState
        uris: "/course/private/v1/content/state/read"
        upstream_url: "http://lms-service:9000/private/v1/content/state/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - privateCourseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readCourse
        uris: "/course/v1/read"
        upstream_url: "http://knowledge-mw-service:5000/v1/course/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readCourseEnrollment
        uris: "/course/v1/user/enrollment/read"
        upstream_url: "http://lms-service:9000/v1/user/courses/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readDialcode
        uris: "/dialcode/v1/read"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readDialcodeV2
        uris: "/dialcode/v2/read"
        upstream_url: "http://knowledge-mw-service:5000/v2/dialcode/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readForm
        uris: "/data/v1/form/read"
        upstream_url: "http://player:3000/plugin/v1/form/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: readFramework
        uris: "/framework/v1/read"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "100000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readFrameworkCategory
        uris: "/framework/v1/category/read"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/category/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readFrameworkTerm
        uris: "/framework/v1/term/read"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/term/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "30000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readNote
        uris: "/notes/v1/read"
        upstream_url: "http://userorg-service:9000/v1/note/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - noteAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readOrg
        uris: "/org/v1/read"
        upstream_url: "http://userorg-service:9000/v1/org/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousOrgAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readPageSection
        uris: "/data/v1/page/section/read"
        upstream_url: "http://lms-service:9000/v1/page/section/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - pageAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readPublisher
        uris: "/dialcode/v1/publisher/read"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/publisher/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readRoleMapping
        uris: "/data/v1/role/read"
        upstream_url: "http://userorg-service:9000/v1/role/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readUserSpecificRole
        uris: "/user/v1/role/read"
        upstream_url: "http://userorg-service:9000/v1/user/role/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readUserProfile
        uris: "/user/v1/profile/read"
        upstream_url: "http://userorg-service:9000/v1/user/getuser"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerDesktopApp
        uris: "/api-manager/v1/consumer/desktop_app/credential/register"
        upstream_url: "http://adminutil:4000/v1/consumer/desktop_app/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - desktopSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerDesktopDevice
        uris: "/api-manager/v1/consumer/desktop_device/credential/register"
        upstream_url: "http://adminutil:4000/v1/consumer/desktop_device/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - desktopAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerDesktopDevicev2
        uris: "/api-manager/v2/consumer/desktop_device/credential/register"
        upstream_url: "http://adminutil:4000/v2/consumer/desktop_device/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - desktopAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: refreshLock
        uris: "/lock/v1/refresh"
        upstream_url: "http://knowledge-mw-service:5000/v1/lock/refresh"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: refreshToken
        uris: "/auth/v1/refresh/token"
        upstream_url: "http://adminutil:4000/v1/auth/refresh/token"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - refreshTokenCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerMobileApp
        uris: "/api-manager/v1/consumer/mobile_app/credential/register"
        upstream_url: "http://adminutil:4000/v1/consumer/mobile_app/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - mobileSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerMobileAppOpenRAP
        uris: "/api-manager/v1/consumer/mobile_app_openrap/credential/register"
        upstream_url: "http://adminutil:4000/v1/consumer/mobile_app_openrap/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - mobileOpenRAPSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerMobileAppTeacherAid
        uris: "/api-manager/v1/consumer/mobile_app_teacheraid/credential/register"
        upstream_url: "http://adminutil:4000/v1/consumer/mobile_app_teacheraid/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - mobileTeacherAidSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerMobileDevice
        uris: "/api-manager/v1/consumer/mobile_device/credential/register"
        upstream_url: "http://adminutil:4000/v1/consumer/mobile_device/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - mobileAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerMobileDevicev2
        uris: "/api-manager/v2/consumer/mobile_device/credential/register"
        upstream_url: "http://adminutil:4000/v2/consumer/mobile_device/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - mobileAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerPortalAnonymous
        uris: "/api-manager/v2/consumer/portal_anonymous/credential/register"
        upstream_url: "http://adminutil:4000/v2/consumer/portal_anonymous/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - portalAnonymous
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerPortalLoggedin
        uris: "/api-manager/v2/consumer/portal_loggedin/credential/register"
        upstream_url: "http://adminutil:4000/v2/consumer/portal_loggedin/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - portalLoggedin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerMobileDeviceOpenRAP
        uris: "/api-manager/v1/consumer/mobile_device_openrap/credential/register"
        upstream_url: "http://adminutil:4000/v1/consumer/mobile_device_openrap/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - mobileOpenRAPAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerMobileDeviceTeacherAid
        uris: "/api-manager/v1/consumer/mobile_device_teacheraid/credential/register"
        upstream_url: "http://adminutil:4000/v1/consumer/mobile_device_teacheraid/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - mobileTeacherAidAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: rejectContent
        uris: "/content/v1/reject"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/reject"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: rejectContentFlag
        uris: "/content/v1/flag/reject"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/flag/reject"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: releaseDialcode
        uris: "/dialcode/v1/release"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/release"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: reserveDialcode
        uris: "/dialcode/v1/reserve"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/reserve"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: retireContent
        uris: "/content/v1/retire"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: retireCourse
        uris: "/course/v1/retire"
        upstream_url: "http://knowledge-mw-service:5000/v1/course/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: retireLock
        uris: "/lock/v1/retire"
        upstream_url: "http://knowledge-mw-service:5000/v1/lock/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchChannel
        uris: "/channel/v1/search"
        upstream_url: "http://knowledge-mw-service:5000/v1/channel/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - channelAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchContent
        uris: "/content/v1/search"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/search"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchCourse
        uris: "/course/v1/search"
        upstream_url: "http://knowledge-mw-service:5000/v1/course/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchDialcodes
        uris: "/dialcode/v1/search"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchFrameworkCategory
        uris: "/framework/v1/category/search"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/category/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchFrameworkTerm
        uris: "/framework/v1/term/search"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/term/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchNotes
        uris: "/notes/v1/search"
        upstream_url: "http://userorg-service:9000/v1/note/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - noteAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchOrgExtended
        uris: "/org/v1/ext/search"
        upstream_url: "http://userorg-service:9000/v1/org/search"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchOrg
        uris: "/org/v1/search"
        upstream_url: "http://userorg-service:9000/v1/org/search"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchUser
        uris: "/user/v1/search"
        upstream_url: "http://userorg-service:9000/v1/user/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userTempAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: sendEmailNotification
        uris: "/user/v1/notification/email"
        upstream_url: "http://userorg-service:9000/v1/notification/email"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - appUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: submitContentForReview
        uris: "/content/v1/review"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/review"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: submitCourseForReview
        uris: "/course/v1/review"
        upstream_url: "http://knowledge-mw-service:5000/v1/course/review"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: telemetry
        uris: "/data/v1/telemetry"
        upstream_url: "http://telemetry-service:9001/v1/telemetry"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - telemetryCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "100000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: telemetryErrorLogging
        uris: "/data/v1/client/logs"
        upstream_url: "http://analytics-service:9000/data/v1/client/logs"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - telemetryCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: unblockUser
        uris: "/user/v1/unblock"
        upstream_url: "http://userorg-service:9000/v1/user/unblock"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateBatch
        uris: "/course/v1/batch/update"
        upstream_url: "http://lms-service:9000/v1/course/batch/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateCertTemplate
        uris: "/cert/v1/template/update"
        upstream_url: "http://cert-service:9000/cert/v1/template/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: updateChannel
        uris: "/channel/v1/update"
        upstream_url: "http://knowledge-mw-service:5000/v1/channel/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - channelUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateCollaborators
        uris: "/content/v1/collaborator/update"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/collaborator/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateContent
        uris: "/content/v1/update"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateContentState
        uris: "/course/v1/content/state/update"
        upstream_url: "http://lms-service:9000/v1/content/state/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateCourse
        uris: "/course/v1/update"
        upstream_url: "http://knowledge-mw-service:5000/v1/course/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: linkDialcodeContentV1
        uris: "/content/v1/dialcode/link"
        upstream_url: "http://content-service:9000/content/v3/dialcode/link"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: reserveDialcodeContent
        uris: "/content/v1/dialcode/reserve"
        upstream_url: "http://content-service:9000/content/v3/dialcode/reserve"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateCourseHierarchy
        uris: "/course/v1/hierarchy/update"
        upstream_url: "http://knowledge-mw-service:5000/v1/course/hierarchy/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateDesktopApp
        uris: "/desktop/v1/update"
        upstream_url: "http://player:3000/v1/desktop/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousAppAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateDialcode
        uris: "/dialcode/v1/update"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateDialcodeV2
        uris: "/dialcode/v2/update"
        upstream_url: "http://knowledge-mw-service:5000/v2/dialcode/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateForm
        uris: "/data/v1/form/update"
        upstream_url: "http://player:3000/plugin/v1/form/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - formUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: updateFramework
        uris: "/framework/v1/update"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateFrameworkCategory
        uris: "/framework/v1/category/update"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/category/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateFrameworkTerm
        uris: "/framework/v1/term/update"
        upstream_url: "http://knowledge-mw-service:5000/v1/framework/term/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateNote
        uris: "/notes/v1/update"
        upstream_url: "http://userorg-service:9000/v1/note/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - noteUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateOrg
        uris: "/org/v1/update"
        upstream_url: "http://userorg-service:9000/v1/org/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - orgUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateOrgStatus
        uris: "/org/v1/status/update"
        upstream_url: "http://userorg-service:9000/v1/org/status/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - orgUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updatePage
        uris: "/data/v1/page/update"
        upstream_url: "http://lms-service:9000/v1/page/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - pageUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updatePageSection
        uris: "/data/v1/page/section/update"
        upstream_url: "http://lms-service:9000/v1/page/section/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - pageUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updatePublisher
        uris: "/dialcode/v1/publisher/update"
        upstream_url: "http://knowledge-mw-service:5000/v1/dialcode/publisher/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dialcodeUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateUser
        uris: "/user/v1/update"
        upstream_url: "http://userorg-service:9000/v1/user/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: uploadContent
        uris: "/content/v1/upload"
        upstream_url: "http://knowledge-mw-service:5000/v1/content/upload"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "100"
      
      - name: uploadCrashLogs
        uris: "/desktop/v1/upload-crash-logs"
        upstream_url: "http://player:3000/v1/desktop/upload-crash-logs"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - telemetryCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: uploadTOC
        uris: "/textbook/v1/toc/upload"
        upstream_url: "http://lms-service:9000/v1/textbook/toc/upload"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: userBulkUpload
        uris: "/user/v1/upload"
        upstream_url: "http://userorg-service:9000/v1/user/upload"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: userExistenceApi
        uris: "/user/v1/exists"
        upstream_url: "http://userorg-service:9000/v1/user/exists"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: userExistenceApiV2
        uris: "/user/v2/exists"
        upstream_url: "http://userorg-service:9000/v2/user/exists"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: userFeed
        uris: "/user/v1/feed"
        upstream_url: "http://userorg-service:9000/v1/user/feed"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: userFeedCreate
        uris: "/user/feed/v1/create"
        upstream_url: "http://userorg-service:9000/v1/user/feed/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: userFeedDelete
        uris: "/user/feed/v1/delete"
        upstream_url: "http://userorg-service:9000/v1/user/feed/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: userFeedUpdate
        uris: "/user/feed/v1/update"
        upstream_url: "http://userorg-service:9000/v1/user/feed/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: userMigrate
        uris: "/user/v1/migrate"
        upstream_url: "http://userorg-service:9000/v1/user/migrate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: validateRegCertificate
        uris: "/certreg/v1/certs/validate"
        upstream_url: "http://cert-registry-service:9000/certs/v1/registry/validate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousCertificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: verifyOtp
        uris: "/otp/v1/verify"
        upstream_url: "http://userorg-service:9000/v1/otp/verify"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: verifyOtpV2
        uris: "/otp/v2/verify"
        upstream_url: "http://userorg-service:9000/v2/otp/verify"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: verifyRegCertificate
        uris: "/certreg/v1/certs/verify"
        upstream_url: "http://cert-registry-service:9000/certs/v1/registry/verify"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerIgotApp
        uris: "/api-manager/v1/consumer/igot_app/credential/register"
        upstream_url: "http://adminutil:4000/v1/consumer/igot_app/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - igotAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: registerIgotDevice
        uris: "/api-manager/v1/consumer/igot_device/credential/register"
        upstream_url: "http://adminutil:4000/v1/consumer/igot_device/credential/register"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - igotApp
        - name: rate-limiting
          config.policy: local
          config.hour: "10000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listReports
        uris: "/data/v1/report-service/report/list"
        upstream_url: "http://report-service:3030/report/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getReport
        uris: "/data/v1/report-service/report/get"
        upstream_url: "http://report-service:3030/report/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateReport
        uris: "/data/v1/report-service/report/update"
        upstream_url: "http://report-service:3030/report/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deleteReport
        uris: "/data/v1/report-service/report/delete"
        upstream_url: "http://report-service:3030/report/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createReport
        uris: "/data/v1/report-service/report/create"
        upstream_url: "http://report-service:3030/report/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createReportSummary
        uris: "/data/v1/report-service/report/summary/create"
        upstream_url: "http://report-service:3030/report/summary/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getReportSummary
        uris: "/data/v1/report-service/report/summary"
        upstream_url: "http://report-service:3030/report/summary"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listReportSummary
        uris: "/data/v1/report-service/report/summary/list"
        upstream_url: "http://report-service:3030/report/summary/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchRegCertificate
        uris: "/certreg/v1/certs/search"
        upstream_url: "http://cert-registry-service:9000/certs/v1/registry/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchRegCertificateV2
        uris: "/certreg/v2/certs/search"
        upstream_url: "http://cert-registry-service:9000/certs/v2/registry/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readRegCertificate
        uris: "/certreg/v1/certs/read"
        upstream_url: "http://cert-registry-service:9000/certs/v1/registry/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: forgotPassword
        uris: "/private/user/v1/password/reset"
        upstream_url: "http://userorg-service:9000/private/user/v1/password/reset"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: publishReport
        uris: "/data/v1/report-service/report/publish"
        upstream_url: "http://report-service:3030/report/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: retireReport
        uris: "/data/v1/report-service/report/retire"
        upstream_url: "http://report-service:3030/report/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchManagedUser
        uris: "/user/v1/managed"
        upstream_url: "http://userorg-service:9000/v1/user/managed"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createGroup
        uris: "/group/v1/create"
        upstream_url: "http://groups-service:9000/v1/group/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - groupCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateGroup
        uris: "/group/v1/update"
        upstream_url: "http://groups-service:9000/v1/group/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - groupUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listGroup
        uris: "/group/v1/list"
        upstream_url: "http://groups-service:9000/v1/group/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - groupAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readGroup
        uris: "/group/v1/read"
        upstream_url: "http://groups-service:9000/v1/group/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - groupAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deleteGroup
        uris: "/group/v1/delete"
        upstream_url: "http://groups-service:9000/v1/group/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - groupAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateGroupMembership
        uris: "/group/membership/v1/update"
        upstream_url: "http://groups-service:9000/v1/group/membership/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - groupUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: groupActivityAgg
        uris: "/data/v1/group/activity/agg"
        upstream_url: "http://lms-service:9000/v1/group/activity/agg"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - groupAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listForm
        uris: "/data/v1/form/list"
        upstream_url: "http://player:3000/plugin/v1/form/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - appAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getUserProfileV3
        uris: "/user/v3/read"
        upstream_url: "http://userorg-service:9000/v3/user/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateUserDeclarations
        uris: "/user/v1/declarations"
        upstream_url: "http://userorg-service:9000/v1/user/declarations"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: updateUserConsent
        uris: "/user/v1/consent/update"
        upstream_url: "http://userorg-service:9000/v1/user/consent/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: readUserConsent
        uris: "/user/v1/consent/read"
        upstream_url: "http://userorg-service:9000/v1/user/consent/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: readUserConsentV2
        uris: "/user/v2/consent/read"
        upstream_url: "http://userorg-service:9000/v2/user/consent/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: channelSpecificTelemetryExhaust
        uris: "/data/v3/dataset/get"
        upstream_url: "http://analytics-service:9000/dataset/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dataAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: publicDataExhaust
        uris: "/dataset/get"
        upstream_url: "http://analytics-service:9000/public/dataset/get"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: submitDataExhaustRequest
        uris: "/dataset/v1/request/submit"
        upstream_url: "http://analytics-service:9000/request/submit"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dataCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getDataExhaustRequest
        uris: "/dataset/v1/request/read"
        upstream_url: "http://analytics-service:9000/request/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dataAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listDataExhaustRequest
        uris: "/dataset/v1/request/list"
        upstream_url: "http://analytics-service:9000/request/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dataAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: addDataset
        uris: "/dataset/v1/add"
        upstream_url: "http://analytics-service:9000/dataset/add"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dataCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listDataset
        uris: "/dataset/v1/list"
        upstream_url: "http://analytics-service:9000/dataset/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - dataAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createTenantPreferences
        uris: "/org/v2/preferences/create"
        upstream_url: "http://userorg-service:9000/v2/org/preferences/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - orgUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateTenantPreferences
        uris: "/org/v2/preferences/update"
        upstream_url: "http://userorg-service:9000/v2/org/preferences/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - orgUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readTenantPreferencess
        uris: "/org/v2/preferences/read"
        upstream_url: "http://userorg-service:9000/v2/org/preferences/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - orgAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: generateCertificateV2
        uris: "/cert/v2/certs/generate"
        upstream_url: "http://cert-service:9000/v2/certs/generate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: addRegCertificateV2
        uris: "/certreg/v2/certs/add"
        upstream_url: "http://cert-registry-service:9000/certs/v2/registry/add"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: downloadRegCertificateV2
        uris: "/certreg/v2/certs/download"
        upstream_url: "http://cert-registry-service:9000/certs/v2/registry/download"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: contentImportAPI
        uris: "/content/v1/import"
        upstream_url: "http://content-service:9000/content/v3/import"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: druidGetUpdateListReport
        uris: "/data/v1/report/jobs"
        upstream_url: "http://analytics-service:9000/report/jobs"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - druidReportAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: druidDeactivateReport
        uris: "/data/v1/report/jobs/deactivate"
        upstream_url: "http://analytics-service:9000/report/jobs/deactivate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - druidReportAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: druidCreateReport
        uris: "/data/v1/report/jobs/submit"
        upstream_url: "http://analytics-service:9000/report/jobs/submit"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - druidReportCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: addRegCertificate
        uris: "/certreg/v1/certs/add"
        upstream_url: "http://cert-registry-service:9000/certs/v1/registry/add"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: generateCertificate
        uris: "/cert/v1/certs/generate"
        upstream_url: "http://cert-service:9000/v1/certs/generate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: createObjectCategory
        uris: "/object/category/v1/create"
        upstream_url: "http://taxonomy-service:9000/object/category/v4/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readObjectCategory
        uris: "/object/category/v1/read"
        upstream_url: "http://taxonomy-service:9000/object/category/v4/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateObjectCategory
        uris: "/object/category/v1/update"
        upstream_url: "http://taxonomy-service:9000/object/category/v4/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createObjectCategoryDefinition
        uris: "/object/category/definition/v1/create"
        upstream_url: "http://taxonomy-service:9000/object/category/definition/v4/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readObjectCategoryDefinition
        uris: "/object/category/definition/v1/read"
        upstream_url: "http://taxonomy-service:9000/object/category/definition/v4/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateObjectCategoryDefinition
        uris: "/object/category/definition/v1/update"
        upstream_url: "http://taxonomy-service:9000/object/category/definition/v4/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - frameworkUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createAsset
        uris: "/asset/v1/create"
        upstream_url: "http://content-service:9000/asset/v4/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: updateAsset
        uris: "/asset/v1/update"
        upstream_url: "http://content-service:9000/asset/v4/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: readAsset
        uris: "/asset/v1/read"
        upstream_url: "http://content-service:9000/asset/v4/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousContentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: uploadAsset
        uris: "/asset/v1/upload"
        upstream_url: "http://content-service:9000/asset/v4/upload"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: uploadUrlAsset
        uris: "/asset/v1/upload/url"
        upstream_url: "http://content-service:9000/asset/v4/upload/url"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: copyAsset
        uris: "/asset/v1/copy"
        upstream_url: "http://content-service:9000/asset/v4/copy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionCreate
        uris: "/collection/v1/create"
        upstream_url: "http://content-service:9000/collection/v4/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionRead
        uris: "/collection/v1/read"
        upstream_url: "http://content-service:9000/collection/v4/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousContentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionPrivateRead
        uris: "/collection/v1/private/read"
        upstream_url: "http://content-service:9000/collection/v4/private/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: assessmentItemRead
        uris: "/assessment/v1/items/read"
        upstream_url: "http://learning:8080/learning-service/assessment/v3/items/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - assessmentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionUpdate
        uris: "/collection/v1/update"
        upstream_url: "http://content-service:9000/collection/v4/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionFlag
        uris: "/collection/v1/flag"
        upstream_url: "http://content-service:9000/collection/v4/flag"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionDiscard
        uris: "/collection/v1/discard"
        upstream_url: "http://content-service:9000/collection/v4/discard"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionRetire
        uris: "/collection/v1/retire"
        upstream_url: "http://content-service:9000/collection/v4/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: linkDialcodeCollection
        uris: "/collection/v1/dialcode/link"
        upstream_url: "http://content-service:9000/collection/v4/dialcode/link"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: collectionHierarchyAdd
        uris: "/collection/v1/hierarchy/add"
        upstream_url: "http://content-service:9000/collection/v4/hierarchy/add"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionHierarchyRemove
        uris: "/collection/v1/hierarchy/remove"
        upstream_url: "http://content-service:9000/collection/v4/hierarchy/remove"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionHierarchyUpdate
        uris: "/collection/v1/hierarchy/update"
        upstream_url: "http://content-service:9000/collection/v4/hierarchy/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionHierarchyRead
        uris: "/collection/v1/hierarchy"
        upstream_url: "http://content-service:9000/collection/v4/hierarchy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousContentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionCopy
        uris: "/collection/v1/copy"
        upstream_url: "http://content-service:9000/collection/v4/copy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionImport
        uris: "/collection/v1/import"
        upstream_url: "http://content-service:9000/collection/v4/import"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: collectionExport
        uris: "/collection/v1/export"
        upstream_url: "http://content-service:9000/collection/v4/export"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getDiscussionTagsList
        uris: "/discussion/tags"
        upstream_url: "http://discussionmw-service:3002/discussion/tags"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getDiscussionCategories
        uris: "/discussion/categories"
        upstream_url: "http://discussionmw-service:3002/discussion/categories"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getDiscussionNotificationsList
        uris: "/discussion/notifications"
        upstream_url: "http://discussionmw-service:3002/discussion/notifications"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getUserDetailsOfDiscussion
        uris: "/discussion/user"
        upstream_url: "http://discussionmw-service:3002/discussion/user"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getCategoryDetailsOfDiscussion
        uris: "/discussion/category"
        upstream_url: "http://discussionmw-service:3002/discussion/category"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getUnreadTopicsOfDiscussion
        uris: "/discussion/unread"
        upstream_url: "http://discussionmw-service:3002/discussion/unread"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getRecentTopicsOfDiscussion
        uris: "/discussion/recent"
        upstream_url: "http://discussionmw-service:3002/discussion/recent"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getPopularTopicsOfDiscussion
        uris: "/discussion/popular"
        upstream_url: "http://discussionmw-service:3002/discussion/popular"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getTopTopicsOfDiscussion
        uris: "/discussion/top"
        upstream_url: "http://discussionmw-service:3002/discussion/top"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getTopicsOfDiscussionById
        uris: "/discussion/topic"
        upstream_url: "http://discussionmw-service:3002/discussion/topic"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getTotalUnreadTopicsOfDiscussion
        uris: "/discussion/unread/total"
        upstream_url: "http://discussionmw-service:3002/discussion/unread/total"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getTopicsOfDiscussionByTeaserId
        uris: "/discussion/topic/teaser"
        upstream_url: "http://discussionmw-service:3002/discussion/topic/teaser"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getTopicsPaginationByIdOfDiscussion
        uris: "/discussion/topic/pagination"
        upstream_url: "http://discussionmw-service:3002/discussion/topic/pagination"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getGroupsListOfDiscussion
        uris: "/discussion/groups"
        upstream_url: "http://discussionmw-service:3002/discussion/groups"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getRecentPostsByDateOfDiscussions
        uris: "/discussion/recent/posts"
        upstream_url: "http://discussionmw-service:3002/discussion/recent/posts"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: createTopicOfDiscussions
        uris: "/discussion/v2/topics"
        upstream_url: "http://discussionmw-service:3002/discussion/v2/topics"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: createCategoryOfDiscussion
        uris: "/discussion/v2/categories"
        upstream_url: "http://discussionmw-service:3002/discussion/v2/categories"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: createGroupsOfDiscussion
        uris: "/discussion/v2/groups"
        upstream_url: "http://discussionmw-service:3002/discussion/v2/groups"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: createNewPostOfDiscussion
        uris: "/discussion/v2/posts"
        upstream_url: "http://discussionmw-service:3002/discussion/v2/posts"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: createNewUserOfDiscussion
        uris: "/discussion/v2/users"
        upstream_url: "http://discussionmw-service:3002/discussion/v2/users"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getUserDetailsByUsername
        uris: "/discussion/user/username"
        upstream_url: "http://discussionmw-service:3002/discussion/user/username"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getForumIdOfDiscussion
        uris: "/discussion/forumId"
        upstream_url: "http://discussionmw-service:3002/discussion/forumId"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: addForumOfDiscussion
        uris: "/discussion/forum"
        upstream_url: "http://discussionmw-service:3002/discussion/forum"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: copyPrivilegesFromParentCategory
        uris: "/discussion/privileges/v2/copy"
        upstream_url: "http://discussionmw-service:3002/discussion/privileges/v2/copy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - discussionCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionCreate
        uris: "/question/v1/create"
        upstream_url: "http://assessment-service:9000/question/v4/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionRead
        uris: "/question/v1/read"
        upstream_url: "http://assessment-service:9000/question/v4/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionPrivateRead
        uris: "/question/v1/private/read"
        upstream_url: "http://assessment-service:9000/question/v4/private/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionUpdate
        uris: "/question/v1/update"
        upstream_url: "http://assessment-service:9000/question/v4/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionRetire
        uris: "/question/v1/retire"
        upstream_url: "http://assessment-service:9000/question/v4/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionReview
        uris: "/question/v1/review"
        upstream_url: "http://assessment-service:9000/question/v4/review"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionPublish
        uris: "/question/v1/publish"
        upstream_url: "http://assessment-service:9000/question/v4/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionList
        uris: "/question/v1/list"
        upstream_url: "http://assessment-service:9000/question/v4/list"
        strip_uri: true
        plugins:
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionReject
        uris: "/question/v1/reject"
        upstream_url: "http://assessment-service:9000/question/v4/reject"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetCreate
        uris: "/questionset/v1/create"
        upstream_url: "http://assessment-service:9000/questionset/v4/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetRead
        uris: "/questionset/v1/read"
        upstream_url: "http://assessment-service:9000/questionset/v4/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetPrivateRead
        uris: "/questionset/v1/private/read"
        upstream_url: "http://assessment-service:9000/questionset/v4/private/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetUpdate
        uris: "/questionset/v1/update"
        upstream_url: "http://assessment-service:9000/questionset/v4/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetAddQuestion
        uris: "/questionset/v1/add"
        upstream_url: "http://assessment-service:9000/questionset/v4/add"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - 'contentUpdate'
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetRemoveQuestion
        uris: "/questionset/v1/remove"
        upstream_url: "http://assessment-service:9000/questionset/v4/remove"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - 'contentUpdate'
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetRetire
        uris: "/questionset/v1/retire"
        upstream_url: "http://assessment-service:9000/questionset/v4/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetReview
        uris: "/questionset/v1/review"
        upstream_url: "http://assessment-service:9000/questionset/v4/review"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetPublish
        uris: "/questionset/v1/publish"
        upstream_url: "http://assessment-service:9000/questionset/v4/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetUpdateHierarchy
        uris: "/questionset/v1/hierarchy/update"
        upstream_url: "http://assessment-service:9000/questionset/v4/hierarchy/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetReadHierarchy
        uris: "/questionset/v1/hierarchy"
        upstream_url: "http://assessment-service:9000/questionset/v4/hierarchy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousContentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetReject
        uris: "/questionset/v1/reject"
        upstream_url: "http://assessment-service:9000/questionset/v4/reject"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: updateUserV2
        uris: "/user/v2/update"
        upstream_url: "http://userorg-service:9000/v2/user/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionImportAPI
        uris: "/question/v1/import"
        upstream_url: "http://assessment-service:9000/question/v4/import"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: managedUserV1Create
        uris: "/user/v1/managed/create"
        upstream_url: "http://userorg-service:9000/v1/manageduser/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: managedUserV2Create
        uris: "/user/v2/managed/create"
        upstream_url: "http://userorg-service:9000/v2/manageduser/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: ssoUserV1Create
        uris: "/user/v1/sso/create"
        upstream_url: "http://userorg-service:9000/v1/ssouser/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: ssoUserV2Create
        uris: "/user/v2/signup"
        upstream_url: "http://userorg-service:9000/v2/user/signup"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousUserCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getUserProfileV4
        uris: "/user/v4/read"
        upstream_url: "http://userorg-service:9000/v4/user/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getUserProfileV5
        uris: "/user/v5/read"
        upstream_url: "http://userorg-service:9000/v5/user/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchUserV2
        uris: "/user/v2/search"
        upstream_url: "http://userorg-service:9000/v2/user/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userTempAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchUserV3
        uris: "/user/v3/search"
        upstream_url: "http://userorg-service:9000/v3/user/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userTempAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchOrgV2
        uris: "/org/v2/search"
        upstream_url: "http://userorg-service:9000/v2/org/search"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: integrationAppRead
        uris: "/app/v1/read"
        upstream_url: "http://content-service:9000/app/v4/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "1"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: questionsetImportAPI
        uris: "/questionset/v1/import"
        upstream_url: "http://assessment-service:9000/questionset/v4/import"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: getUsersPrograms
        uris: "/users/mlcore/v1/programs"
        upstream_url: "http://ml-core-service:3000/v1/users/programs"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - programAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getUsersSolutions
        uris: "/users/mlcore/v1/solutions"
        upstream_url: "http://ml-core-service:3000/v1/users/solutions"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - solutionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getTargetedSolutions
        uris: "/solutions/mlcore/v1/targetedSolutions"
        upstream_url: "http://ml-core-service:3000/v1/solutions/targetedSolutions"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - solutionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getSolutionReportInformation
        uris: "/resource/mlreports/v1/filtervalues"
        upstream_url: "http://ml-reports-service:3000/v1/resource/filtervalues"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - solutionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: userLocationScope
        uris: "/entities/mlcore/v1/subEntityListBasedOnRoleAndLocation"
        upstream_url: "http://ml-core-service:3000/v1/entities/subEntityListBasedOnRoleAndLocation"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - registryAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: mandatoryUserProfileFields
        uris: "/entities/mlcore/v1/entityTypesByLocationAndRole"
        upstream_url: "http://ml-core-service:3000/v1/users/entityTypesByLocationAndRole"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - registryAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: observationListEvidences
        uris: "/observations/mlreports/v1/listAllEvidences"
        upstream_url: "http://ml-reports-service:3000/v1/observations/listAllEvidences"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - observationAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: locationListing
        uris: "/entities/mlcore/v1/subEntityList"
        upstream_url: "http://ml-core-service:3000/v1/entities/subEntityList"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - locationAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getTargetedEntity
        uris: "/users/mlcore/v1/targetedEntity"
        upstream_url: "http://ml-core-service:3000/v1/users/targetedEntity"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - registryAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getProjectDetails
        uris: "/userProjects/mlprojects/v1/details"
        upstream_url: "http://ml-projects-service:3000/v1/userProjects/details"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getProjectEntities
        uris: "/reports/mlprojects/v1/entity"
        upstream_url: "http://ml-projects-service:3000/v1/reports/entity"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getProjectDetailReport
        uris: "/reports/mlprojects/v1/detailView"
        upstream_url: "http://ml-projects-service:3000/v1/reports/detailView"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getProjectPrograms
        uris: "/reports/mlprojects/v1/getProgramsByEntity"
        upstream_url: "http://ml-projects-service:3000/v1/reports/getProgramsByEntity"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateProject
        uris: "/userProjects/mlprojects/v1/sync"
        upstream_url: "http://ml-projects-service:3000/v1/userProjects/sync"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createProject
        uris: "/userProjects/mlprojects/v1/add"
        upstream_url: "http://ml-projects-service:3000/v1/userProjects/add"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getProjectSolutionDetails
        uris: "/userProjects/mlprojects/v1/solutionDetails"
        upstream_url: "http://ml-projects-service:3000/v1/userProjects/solutionDetails"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getProjectStatus
        uris: "/userProjects/mlprojects/v1/tasksStatus"
        upstream_url: "http://ml-projects-service:3000/v1/userProjects/tasksStatus"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: shareProject
        uris: "/userProjects/mlprojects/v1/share"
        upstream_url: "http://ml-projects-service:3000/v1/userProjects/share"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getProjectTemplatesDetails
        uris: "/project/mlprojects/v1/templates/details"
        upstream_url: "http://ml-projects-service:3000/v1/project/templates/details"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - solutionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listObservationEntities
        uris: "/observations/mlsurvey/v1/entities"
        upstream_url: "http://ml-survey-service:3000/v1/observations/entities"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - observationAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: observationSubmissionsList
        uris: "/observationSubmissions/mlsurvey/v1/list"
        upstream_url: "http://ml-survey-service:3000/v1/observationSubmissions/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - observationAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: observationQuestionList
        uris: "/observations/mlsurvey/v1/assessment"
        upstream_url: "http://ml-survey-service:3000/v1/observations/assessment"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - observationAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateObservationSubmission
        uris: "/observationSubmissions/mlsurvey/v1/update"
        upstream_url: "http://ml-survey-service:3000/v1/observationSubmissions/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - observationUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createObservationSubmission
        uris: "/observationSubmissions/mlsurvey/v1/create"
        upstream_url: "http://ml-survey-service:3000/v1/observationSubmissions/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - observationCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchLocationEntities
        uris: "/observations/mlsurvey/v1/searchEntities"
        upstream_url: "http://ml-survey-service:3000/v1/observations/searchEntities"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - registryAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: addObservationEntity
        uris: "/observations/mlsurvey/v1/updateEntities"
        upstream_url: "http://ml-survey-service:3000/v1/observations/updateEntities"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - observationCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: observationSolutionList
        uris: "/observationSubmissions/mlsurvey/v1/solutionList"
        upstream_url: "http://ml-survey-service:3000/v1/observationSubmissions/solutionList"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - observationAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: surveyQuestionList
        uris: "/surveys/mlsurvey/v1/details"
        upstream_url: "http://ml-survey-service:3000/v1/surveys/details"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - surveyAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: solutionsVerifyLink
        uris: "/solutions/mlsurvey/v1/verifyLink"
        upstream_url: "http://ml-survey-service:3000/v1/solutions/verifyLink"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - solutionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateSurveySubmission
        uris: "/surveySubmissions/mlsurvey/v1/update"
        upstream_url: "http://ml-survey-service:3000/v1/surveySubmissions/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - surveyUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: observationReports
        uris: "/reports/mlreports/v1/fetch"
        upstream_url: "http://ml-reports-service:3000/v1/reports/fetch"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - observationAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: surveyListEvidences
        uris: "/surveys/mlreports/v1/listAllEvidences"
        upstream_url: "http://ml-reports-service:3000/v1/surveys/listAllEvidences"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - surveyAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: surveyReport
        uris: "/surveys/mlreports/v1/getAllResponsesOfQuestion"
        upstream_url: "http://ml-reports-service:3000/v1/surveys/getAllResponsesOfQuestion"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - surveyAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: observationSubmissionCount
        uris: "/observations/mlreports/v1/submissionsCount"
        upstream_url: "http://ml-reports-service:3000/v1/observations/submissionsCount"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - observationAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getFileUploadUrls
        uris: "/cloud-services/mlcore/v1/files/preSignedUrls"
        upstream_url: "http://ml-core-service:3000/v1/cloud-services/files/preSignedUrls"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - cloudUrlsCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listPlatformPrograms
        uris: "/user-extension/mlcore/v1/programsByPlatformRoles"
        upstream_url: "http://ml-core-service:3000/v1/user-extension/programsByPlatformRoles"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - programAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listPlatformSolutions
        uris: "/user-extension/mlcore/v1/solutions"
        upstream_url: "http://ml-core-service:3000/v1/user-extension/solutions"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - solutionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getUserSegmentsUCI
        uris: "/uci/admin/v1/userSegment/get"
        upstream_url: "http://uci-service:9999/admin/v1/userSegment/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createUserSegmentsUCI
        uris: "/uci/admin/v1/userSegment/create"
        upstream_url: "http://uci-service:9999/admin/v1/userSegment/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateUserSegmentsUCI
        uris: "/uci/admin/v1/userSegment/update"
        upstream_url: "http://uci-service:9999/admin/v1/userSegment/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deleteUserSegmentsUCI
        uris: "/uci/admin/v1/userSegment/delete"
        upstream_url: "http://uci-service:9999/admin/v1/userSegment/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: userSegmentsQueryBuilderUCI
        uris: "/uci/admin/v1/userSegment/queryBuilder"
        upstream_url: "http://uci-service:9999/admin/v1/userSegment/queryBuilder"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchUserSegmentsUCI
        uris: "/uci/admin/v1/userSegment/search"
        upstream_url: "http://uci-service:9999/admin/v1/userSegment/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createAdapterUCI
        uris: "/uci/admin/v1/adapter/create"
        upstream_url: "http://uci-service:9999/admin/v1/adapter/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getAllAdapterUCI
        uris: "/uci/admin/v1/adapter/all"
        upstream_url: "http://uci-service:9999/admin/v1/adapter/all"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getAdapterUCI
        uris: "/uci/admin/v1/adapter/get"
        upstream_url: "http://uci-service:9999/admin/v1/adapter/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deleteAdapterUCI
        uris: "/uci/admin/v1/adapter/delete"
        upstream_url: "http://uci-service:9999/admin/v1/adapter/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateAdapterUCI
        uris: "/uci/admin/v1/adapter/update"
        upstream_url: "http://uci-service:9999/admin/v1/adapter/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getAllTransformerUCI
        uris: "/uci/admin/v1/transformer/all"
        upstream_url: "http://uci-service:9999/admin/v1/transformer/all"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createTransformerUCI
        uris: "/uci/admin/v1/transformer/create"
        upstream_url: "http://uci-service:9999/admin/v1/transformer/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getTransformerUCI
        uris: "/uci/admin/v1/transformer/get"
        upstream_url: "http://uci-service:9999/admin/v1/transformer/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateTransformerUCI
        uris: "/uci/admin/v1/transformer/update"
        upstream_url: "http://uci-service:9999/admin/v1/transformer/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getFormsTransformerUCI
        uris: "/uci/admin/v1/transformer/getForms"
        upstream_url: "http://uci-service:9999/admin/v1/transformer/getForms"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: uploadFormsTransformerUCI
        uris: "/uci/admin/v1/forms/upload"
        upstream_url: "http://uci-service:9999/admin/v1/forms/upload"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "100"
      
      - name: createConversationLogicUCI
        uris: "/uci/admin/v1/conversationLogic/create"
        upstream_url: "http://uci-service:9999/admin/v1/conversationLogic/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getAllConversationLogicUCI
        uris: "/uci/admin/v1/conversationLogic/all"
        upstream_url: "http://uci-service:9999/admin/v1/conversationLogic/all"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getConversationLogicUCI
        uris: "/uci/admin/v1/conversationLogic/get"
        upstream_url: "http://uci-service:9999/admin/v1/conversationLogic/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deleteConversationLogicUCI
        uris: "/uci/admin/v1/conversationLogic/delete"
        upstream_url: "http://uci-service:9999/admin/v1/conversationLogic/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateConversationLogicUCI
        uris: "/uci/admin/v1/conversationLogic/update"
        upstream_url: "http://uci-service:9999/admin/v1/conversationLogic/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createBotUCI
        uris: "/uci/admin/v1/bot/create"
        upstream_url: "http://uci-service:9999/admin/v1/bot/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getAllBotUCI
        uris: "/uci/admin/v1/bot/all"
        upstream_url: "http://uci-service:9999/admin/v1/bot/all"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getBotUCI
        uris: "/uci/admin/v1/bot/get"
        upstream_url: "http://uci-service:9999/admin/v1/bot/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: startBotUCI
        uris: "/uci/admin/v1/bot/start"
        upstream_url: "http://uci-service:9999/admin/v1/bot/start"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: pauseBotUCI
        uris: "/uci/admin/v1/bot/pause"
        upstream_url: "http://uci-service:9999/admin/v1/bot/pause"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchBotUCI
        uris: "/uci/admin/v1/bot/search"
        upstream_url: "http://uci-service:9999/admin/v1/bot/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deleteBotUCI
        uris: "/uci/admin/v1/bot/delete"
        upstream_url: "http://uci-service:9999/admin/v1/bot/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateBotUCI
        uris: "/uci/admin/v1/bot/update"
        upstream_url: "http://uci-service:9999/admin/v1/bot/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getAllUserForBotUCI
        uris: "/uci/admin/v1/bot/getAllUsers"
        upstream_url: "http://uci-service:9999/admin/v1/bot/getAllUsers"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: searchBotByStartingMessage
        uris: "/uci/admin/v1/bot/getByParam"
        upstream_url: "http://uci-service:9999/admin/v1/bot/getByParam"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: gqlUCI
        uris: "/uci/uci-api/gql"
        upstream_url: "http://uci-service:9999/v1/graphql"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: sendNotification
        uris: "/notification/v2/send"
        upstream_url: "http://notification-service:9000/v2/notification/send"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - sendNotification
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readNotificationFeed
        uris: "/notification/v1/feed/read"
        upstream_url: "http://notification-service:9000/v1/notification/feed/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - readNotificationFeed
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateNotificationFeed
        uris: "/notification/v1/feed/update"
        upstream_url: "http://notification-service:9000/v1/notification/feed/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - updateNotificationFeed
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deleteNotificationFeed
        uris: "/notification/v1/feed/delete"
        upstream_url: "http://notification-service:9000/v1/notification/feed/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - deleteNotificationFeed
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: netcoreWhatsappInbound
        uris: "/uci/inbound/netcore/whatsApp"
        upstream_url: "http://inbound-service:8085/netcore/whatsApp"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - externalmessagingAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: VerifyLink
        uris: "/solutions/mlcore/v1/verifyLink"
        upstream_url: "http://ml-core-service:3000/v1/solutions/verifyLink"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - solutionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: GetTemplateOrQuestions
        uris: "/solutions/mlcore/v1/details"
        upstream_url: "http://ml-core-service:3000/v1/solutions/details"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - solutionAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: CreateProjectFromTemplate
        uris: "/userProjects/mlprojects/v1/importFromLibrary"
        upstream_url: "http://ml-projects-service:3000/v1/userProjects/importFromLibrary"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateUserV3
        uris: "/user/v3/update"
        upstream_url: "http://userorg-service:9000/v3/user/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: createContentV2
        uris: "/content/v2/create"
        upstream_url: "http://content-service:9000/content/v4/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: updateContentV2
        uris: "/content/v2/update"
        upstream_url: "http://content-service:9000/content/v4/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readContentV2
        uris: "/content/v2/read"
        upstream_url: "http://content-service:9000/content/v4/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: uploadUrlContentV2
        uris: "/content/v2/upload/url"
        upstream_url: "http://content-service:9000/content/v4/upload/url"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: uploadContentV2
        uris: "/content/v2/upload"
        upstream_url: "http://content-service:9000/content/v4/upload"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: copyContentV2
        uris: "/content/v2/copy"
        upstream_url: "http://content-service:9000/content/v4/copy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: importContentV2
        uris: "/content/v2/import"
        upstream_url: "http://content-service:9000/content/v4/import"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: flagContentV2
        uris: "/content/v2/flag"
        upstream_url: "http://content-service:9000/content/v4/flag"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: acceptFlagContentV2
        uris: "/content/v2/flag/accept"
        upstream_url: "http://content-service:9000/content/v4/flag/accept"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: discardContentV2
        uris: "/content/v2/discard"
        upstream_url: "http://content-service:9000/content/v4/discard"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: retireContentV2
        uris: "/content/v2/retire"
        upstream_url: "http://content-service:9000/content/v4/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: reviewContentV2
        uris: "/content/v2/review"
        upstream_url: "http://content-service:9000/content/v4/review"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: rejectContentV2
        uris: "/content/v2/reject"
        upstream_url: "http://content-service:9000/content/v4/reject"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: linkDialcodeContentV2
        uris: "/content/v2/dialcode/link"
        upstream_url: "http://content-service:9000/content/v4/dialcode/link"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: reserveDialcodeContentV2
        uris: "/content/v2/dialcode/reserve"
        upstream_url: "http://content-service:9000/content/v4/dialcode/reserve"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: collectionReview
        uris: "/collection/v1/review"
        upstream_url: "http://content-service:9000/collection/v4/review"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: collectionReject
        uris: "/collection/v1/reject"
        upstream_url: "http://content-service:9000/collection/v4/reject"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: acceptCollectionFlag
        uris: "/collection/v1/flag/accept"
        upstream_url: "http://content-service:9000/collection/v4/flag/accept"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: reserveDialcodeCollection
        uris: "/collection/v1/dialcode/reserve"
        upstream_url: "http://content-service:9000/collection/v4/dialcode/reserve"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: listNotificationTemplate
        uris: "/notification/v1/template/list"
        upstream_url: "http://notification-service:9000/v1/notification/template/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - getNotificationTemplate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createNotificationTemplate
        uris: "/notification/v1/template/create"
        upstream_url: "http://notification-service:9000/v1/notification/template/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - createNotificationTemplate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: deleteNotificationTemplate
        uris: "/notification/v1/template/delete"
        upstream_url: "http://notification-service:9000/v1/notification/template/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - deleteNotificationTemplate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateNotificationTemplate
        uris: "/notification/v1/template/update"
        upstream_url: "http://notification-service:9000/v1/notification/template/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - updateNotificationTemplate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: updateActionNotificationTemplate
        uris: "/notification/v1/template/action/update"
        upstream_url: "http://notification-service:9000/v1/notification/template/action/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - updateNotificationTemplate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: getActionNotificationTemplate
        uris: "/notification/v1/template"
        upstream_url: "http://notification-service:9000/v1/notification/template"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - getNotificationTemplate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createRCCertificate
        uris: "/rc/certificate/v1/create"
        upstream_url: "http://registry-service:8081/api/v1/TrainingCertificate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
        - name: request-transformer
          config.remove.headers: Authorization
      
      - name: searchRCCertificate
        uris: "/rc/certificate/v1/search"
        upstream_url: "http://registry-service:8081/api/v1/TrainingCertificate/search"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
        - name: request-transformer
          config.remove.headers: Authorization
      
      - name: getRCCertificate
        uris: "/rc/certificate/v1/download"
        upstream_url: "http://registry-service:8081/api/v1/TrainingCertificate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousCertificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
        - name: request-transformer
          config.remove.headers: Authorization
      
      - name: getRCPublicKey
        uris: "/rc/certificate/v1/key"
        upstream_url: "http://registry-service:8081/api/v1/PublicKey"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousCertificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
        - name: request-transformer
          config.remove.headers: Authorization
      
      - name: getReportDatasets
        uris: "/data/v1/report-service/report/datasets/get"
        upstream_url: "http://report-service:3030/report/datasets/get"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - reportsAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: projectCertificateList
        uris: "/userProjects/mlprojects/v1/certificates"
        upstream_url: "http://ml-projects-service:3000/v1/userProjects/certificates"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - projectAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: createRCProjectCertificate
        uris: "/rc/certificate/v1/create"
        upstream_url: "http://registry-service:8081/api/v1/ProjectCertificate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - certificateCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
        - name: request-transformer
          config.remove.headers: Authorization
      
      - name: getProjectRCCertificate
        uris: "/rc/projectCertificate/v1/download"
        upstream_url: "http://registry-service:8081/api/v1/ProjectCertificate"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousCertificateAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
        - name: request-transformer
          config.remove.headers: Authorization
      
      - name: fetchAllForm
        uris: "/data/v1/form/fetchAll"
        upstream_url: "http://player:3000/plugin/v1/form/fetchAll"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - formUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: releaseDialcodeContentV2
        uris: "/content/v2/dialcode/release"
        upstream_url: "http://content-service:9000/content/v4/dialcode/release"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: releaseDialcodeCollection
        uris: "/collection/v1/dialcode/release"
        upstream_url: "http://content-service:9000/collection/v4/dialcode/release"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: publishContentV2
        uris: "/content/v2/publish"
        upstream_url: "http://content-service:9000/content/v4/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: unlistedPublishContent
        uris: "/content/v1/unlisted/publish"
        upstream_url: "http://content-service:9000/content/v3/unlisted/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: unlistedPublishContentV2
        uris: "/content/v2/unlisted/publish"
        upstream_url: "http://content-service:9000/content/v4/unlisted/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: publishCollection
        uris: "/collection/v1/publish"
        upstream_url: "http://content-service:9000/collection/v4/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: unlistedPublishCollection
        uris: "/collection/v1/unlisted/publish"
        upstream_url: "http://content-service:9000/collection/v4/unlisted/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: readDIALCodesBatchInfo
        uris: "/dialcode/v2/read/batch"
        upstream_url: "http://dial-service:9000/dialcode/v4/batch/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: joinProgramByUser
        uris: "/programs/mlcore/v1/join"
        upstream_url: "http://ml-core-service:3000/v1/programs/join"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - programAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: questionsetCopy
        uris: "/questionset/v1/copy"
        upstream_url: "http://assessment-service:9000/questionset/v4/copy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - 'contentCreate'
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionCopy
        uris: "/question/v1/copy"
        upstream_url: "http://assessment-service:9000/question/v4/copy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - 'contentCreate'
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: exhaustSubmitProxyAPI
        uris: "/course/v1/jobrequest/submit"
        upstream_url: "http://lms-service:9000/v1/jobrequest/submit"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: exhaustListProxyAPI
        uris: "/course/v1/jobrequest/list"
        upstream_url: "http://lms-service:9000/v1/jobrequest/list"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - courseAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: orgAddEncryptionKey
        uris: "/org/v1/update/encryptionkey"
        upstream_url: "http://userorg-service:9000/v1/org/update/encryptionkey"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - orgSuperAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      # New API for connecting to learning service in order to automate post install scripts
      - name: domainDefinitions
        uris: "/learning/taxonomy/domain/definition"
        upstream_url: "http://learning:8080/learning-service/taxonomy/domain/definition"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - definitionsAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      - name: masterCategories
        uris: "/learning/framework/v3/category/master/create"
        upstream_url: "http://learning:8080/learning-service/framework/v3/category/master/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - masterCategoriesAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "100"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "1"
      
      #release-7.0.0
      
      - name: deleteUser
        uris: "/user/v1/delete"
        upstream_url: "http://userorg-service:9000/v1/user/delete"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - userUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionCreateV2
        uris: "/question/v2/create"
        upstream_url: "http://assessment-service:9000/question/v5/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionReadV2
        uris: "/question/v2/read"
        upstream_url: "http://assessment-service:9000/question/v5/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionPrivateReadV2
        uris: "/question/v2/private/read"
        upstream_url: "http://assessment-service:9000/question/v5/private/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionUpdateV2
        uris: "/question/v2/update"
        upstream_url: "http://assessment-service:9000/question/v5/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionRetireV2
        uris: "/question/v2/retire"
        upstream_url: "http://assessment-service:9000/question/v5/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionReviewV2
        uris: "/question/v2/review"
        upstream_url: "http://assessment-service:9000/question/v5/review"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionPublishV2
        uris: "/question/v2/publish"
        upstream_url: "http://assessment-service:9000/question/v5/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionListV2
        uris: "/question/v2/list"
        upstream_url: "http://assessment-service:9000/question/v5/list"
        strip_uri: true
        plugins:
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionRejectV2
        uris: "/question/v2/reject"
        upstream_url: "http://assessment-service:9000/question/v5/reject"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: copyQuestionV2
        uris: "/question/v2/copy"
        upstream_url: "http://assessment-service:9000/question/v5/copy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetCreateV2
        uris: "/questionset/v2/create"
        upstream_url: "http://assessment-service:9000/questionset/v5/create"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetReadV2
        uris: "/questionset/v2/read"
        upstream_url: "http://assessment-service:9000/questionset/v5/read"
        strip_uri: true
        plugins:
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: ip
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetPrivateReadV2
        uris: "/questionset/v2/private/read"
        upstream_url: "http://assessment-service:9000/questionset/v5/private/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetUpdateV2
        uris: "/questionset/v2/update"
        upstream_url: "http://assessment-service:9000/questionset/v5/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetAddQuestionV2
        uris: "/questionset/v2/add"
        upstream_url: "http://assessment-service:9000/questionset/v5/add"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - 'contentUpdate'
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetRemoveQuestionV2
        uris: "/questionset/v2/remove"
        upstream_url: "http://assessment-service:9000/questionset/v5/remove"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - 'contentUpdate'
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetRetireV2
        uris: "/questionset/v2/retire"
        upstream_url: "http://assessment-service:9000/questionset/v5/retire"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetReviewV2
        uris: "/questionset/v2/review"
        upstream_url: "http://assessment-service:9000/questionset/v5/review"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetPublishV2
        uris: "/questionset/v2/publish"
        upstream_url: "http://assessment-service:9000/questionset/v5/publish"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetUpdateHierarchyV2
        uris: "/questionset/v2/hierarchy/update"
        upstream_url: "http://assessment-service:9000/questionset/v5/hierarchy/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentUpdate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetReadHierarchyV2
        uris: "/questionset/v2/hierarchy"
        upstream_url: "http://assessment-service:9000/questionset/v5/hierarchy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - anonymousContentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetRejectV2
        uris: "/questionset/v2/reject"
        upstream_url: "http://assessment-service:9000/questionset/v5/reject"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionImportAPIV2
        uris: "/question/v2/import"
        upstream_url: "http://assessment-service:9000/question/v5/import"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionsetImportAPIV2
        uris: "/questionset/v2/import"
        upstream_url: "http://assessment-service:9000/questionset/v5/import"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: copyQuestionSetV2
        uris: "/questionset/v2/copy"
        upstream_url: "http://assessment-service:9000/questionset/v5/copy"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentCreate
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetUpdateComment
        uris: "/questionset/v1/comment/update"
        upstream_url: "http://assessment-service:9000/questionset/v4/comment/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetUpdateCommentV2
        uris: "/questionset/v2/comment/update"
        upstream_url: "http://assessment-service:9000/questionset/v5/comment/update"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAdmin
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetReadComment
        uris: "/questionset/v1/comment/read"
        upstream_url: "http://assessment-service:9000/questionset/v4/comment/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
      
      - name: questionSetReadCommentV2
        uris: "/questionset/v2/comment/read"
        upstream_url: "http://assessment-service:9000/questionset/v5/comment/read"
        strip_uri: true
        plugins:
        - name: jwt
        - name: cors
        - config.host: statsd-service
          config.metrics:
          - name: request_count
            sample_rate: 1
            stat_type: counter
          - name: latency
            stat_type: timer
          - name: request_size
            stat_type: timer
          - name: status_count
            sample_rate: 1
            stat_type: counter
          - name: response_size
            stat_type: timer
          - consumer_identifier: username
            name: unique_users
            stat_type: set
          - consumer_identifier: username
            name: request_per_user
            sample_rate: 1
            stat_type: counter
          - name: upstream_latency
            stat_type: timer
          - name: kong_latency
            stat_type: timer
          - consumer_identifier: username
            name: status_count_per_user
            sample_rate: 1
            stat_type: counter
          config.port: "9125"
          name: statsd
        - name: acl
          config.whitelist:
          - contentAccess
        - name: rate-limiting
          config.policy: local
          config.hour: "5000"
          config.limit_by: credential
        - name: request-size-limiting
          config.allowed_payload_size: "10"
---
# Source: edbb/charts/kong-consumers/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edbb-kong-consumers
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong-consumers
    app.kubernetes.io/version: 0.14.1
    helm.sh/chart: kong-consumers-0.1.0
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  kong-consumers.yaml: |-
      kong_consumers:
        - username: api_admin
          groups: 
          - anonymousAppAccess
          - anonymousCertificateAccess
          - anonymousContentAccess
          - anonymousCourseAccess
          - anonymousOrgAccess
          - anonymousUserAccess
          - anonymousUserCreate
          - appAccess
          - appAdmin
          - appCreate
          - appUpdate
          - assessmentAccess
          - badgeAccess
          - badgeAdmin
          - badgeCreate
          - badgeUpdate
          - certificateAccess
          - certificateCreate
          - certificateUpdate
          - channelAccess
          - channelAdmin
          - channelCreate
          - channelUpdate
          - cloudUrlsCreate
          - contentAccess
          - contentAdmin
          - contentCreate
          - contentSuperAdmin
          - contentUpdate
          - courseAccess
          - courseAdmin
          - courseCreate
          - courseSuperAdmin
          - courseUpdate
          - createNotificationTemplate
          - dataAccess
          - dataCreate
          - definitionsAdmin
          - deleteNotificationFeed
          - deleteNotificationTemplate
          - desktopAdmin
          - desktopSuperAdmin
          - deviceCreate
          - dialcodeAccess
          - dialcodeAdmin
          - dialcodeCreate
          - dialcodeUpdate
          - discussionAccess
          - discussionCreate
          - druidReportAdmin
          - druidReportCreate
          - experimentCreate
          - expirementAccess
          - externalmessagingAccess
          - formCreate
          - formUpdate
          - frameworkAccess
          - frameworkAdmin
          - frameworkCreate
          - frameworkUpdate
          - getNotificationTemplate
          - groupAccess
          - groupAdmin
          - groupCreate
          - groupUpdate
          - igotAdmin
          - igotApp
          - itemSetAdmin
          - kongConsumerAdmin
          - locationAccess
          - locationAdmin
          - locationCreate
          - locationSuperAdmin
          - locationUpdate
          - masterCategoriesAdmin
          - mobileAdmin
          - mobileOpenRAPAdmin
          - mobileOpenRAPSuperAdmin
          - mobileSuperAdmin
          - mobileTeacherAidAdmin
          - mobileTeacherAidSuperAdmin
          - noteAccess
          - noteAdmin
          - noteCreate
          - noteUpdate
          - observationAccess
          - observationCreate
          - observationUpdate
          - orgAccess
          - orgAdmin
          - orgCreate
          - orgSuperAdmin
          - orgUpdate
          - pageAccess
          - pageCreate
          - pageUpdate
          - pluginAccess
          - portalAnonymous
          - portalLoggedin
          - privateCourseAccess
          - programAccess
          - projectAccess
          - projectCreate
          - projectUpdate
          - readNotificationFeed
          - refreshTokenCreate
          - registryAccess
          - reportsAccess
          - reportsAdmin
          - reportsCreate
          - reportsUpdate
          - sendNotification
          - solutionAccess
          - ssoAdmin
          - ssoCreate
          - surveyAccess
          - surveyUpdate
          - telemetryCreate
          - updateNotificationFeed
          - updateNotificationTemplate
          - userAccess
          - userAdmin
          - userCreate
          - userSuperAccess
          - userSuperAdmin
          - userTempAdmin
          - userUpdate
          state: present
          key: api_admin
          secret: api_adminrandomstring123
          algorithm: HS256
          print_credentials: true
        - username: mobile_admin
          groups: 
          - mobileSuperAdmin
          state: present
          key: mobile_admin
          secret: mobile_adminrandomstring123
          algorithm: HS256
          print_credentials: true
        - username: mobile_app
          groups: 
          - mobileAdmin
          state: present
          key: mobile_app
          secret: mobile_apprandomstring123
          algorithm: HS256
          print_credentials: true
        - username: mobile_device
          groups: 
          - appAccess
          - certificateAccess
          - contentAccess
          - courseAccess
          - deviceCreate
          - dialcodeAccess
          - locationAccess
          - orgAccess
          - ssoCreate
          - telemetryCreate
          - userAccess
          - userUpdate
          - contentTempAccess
          - groupCreate
          - groupUpdate
          - groupAccess
          - groupAdmin
          - refreshTokenCreate
          - discussionAccess
          - anonymousCertificateAccess
          - anonymousContentAccess
          - anonymousCourseAccess
          - anonymousOrgAccess
          - anonymousUserAccess
          - anonymousAppAccess
          - anonymousUserCreate
          - readNotificationFeed
          - updateNotificationFeed
          - deleteNotificationFeed
          - cloudUrlsCreate
          - observationAccess
          - observationCreate
          - observationUpdate
          - programAccess
          - projectAccess
          - projectCreate
          - projectUpdate
          - registryAccess
          - solutionAccess
          - surveyAccess
          - surveyUpdate
          state: present
          key: mobile_device
          secret: mobile_devicerandomstring123
          algorithm: HS256
          print_credentials: true
        - username: mobile_devicev2
          groups: 
          - appAccess
          - certificateAccess
          - contentAccess
          - courseAccess
          - deviceCreate
          - dialcodeAccess
          - locationAccess
          - orgAccess
          - ssoCreate
          - telemetryCreate
          - userAccess
          - userUpdate
          - contentTempAccess
          - groupCreate
          - groupUpdate
          - groupAccess
          - groupAdmin
          - refreshTokenCreate
          - discussionAccess
          - anonymousCertificateAccess
          - anonymousContentAccess
          - anonymousCourseAccess
          - anonymousOrgAccess
          - anonymousUserAccess
          - anonymousAppAccess
          - anonymousUserCreate
          - readNotificationFeed
          - updateNotificationFeed
          - deleteNotificationFeed
          - cloudUrlsCreate
          - observationAccess
          - observationCreate
          - observationUpdate
          - programAccess
          - projectAccess
          - projectCreate
          - projectUpdate
          - registryAccess
          - solutionAccess
          - surveyAccess
          - surveyUpdate
          state: present
          key: mobile_devicev2
          secret: mobile_devicev2randomstring123
          algorithm: HS256
          print_credentials: true
        - username: desktop_device
          groups: 
          - appAccess
          - channelAccess
          - certificateAccess
          - courseAccess
          - contentAccess
          - pageAccess
          - dialcodeAccess
          - frameworkAccess
          - orgAccess
          - deviceCreate
          - groupCreate
          - groupAccess
          - groupUpdate
          - groupAdmin
          - locationAccess
          - userCreate
          - userUpdate
          - userAccess
          - refreshTokenCreate
          - ssoCreate
          - preferenceAccess
          - programAccess
          - telemetryCreate
          - anonymousCertificateAccess
          - anonymousContentAccess
          - anonymousCourseAccess
          - anonymousOrgAccess
          - anonymousUserAccess
          - anonymousAppAccess
          - anonymousUserCreate
          - readNotificationFeed
          - updateNotificationFeed
          - deleteNotificationFeed
          state: present
          key: desktop_device
          secret: desktop_devicerandomstring123
          algorithm: HS256
          print_credentials: true
        - username: desktop_devicev2
          groups: 
          - appAccess
          - channelAccess
          - certificateAccess
          - courseAccess
          - contentAccess
          - pageAccess
          - dialcodeAccess
          - frameworkAccess
          - orgAccess
          - deviceCreate
          - groupCreate
          - groupAccess
          - groupUpdate
          - groupAdmin
          - locationAccess
          - userCreate
          - userUpdate
          - userAccess
          - refreshTokenCreate
          - ssoCreate
          - preferenceAccess
          - programAccess
          - telemetryCreate
          - anonymousCertificateAccess
          - anonymousContentAccess
          - anonymousCourseAccess
          - anonymousOrgAccess
          - anonymousUserAccess
          - anonymousAppAccess
          - anonymousUserCreate
          - readNotificationFeed
          - updateNotificationFeed
          - deleteNotificationFeed
          state: present
          key: desktop_devicev2
          secret: desktop_devicev2randomstring123
          algorithm: HS256
          print_credentials: true
        - username: portal_anonymous_register
          groups: 
          - portalAnonymous
          state: present
          key: portal_anonymous_register
          secret: portal_anonymous_registerrandomstring123
          algorithm: HS256
          print_credentials: true
        - username: portal_loggedin_register
          groups: 
          - portalLoggedin
          state: present
          key: portal_loggedin_register
          secret: portal_loggedin_registerrandomstring123
          algorithm: HS256
          print_credentials: true
        - username: portal_anonymous
          groups: 
          - deviceCreate
          - locationAccess
          - telemetryCreate
          - anonymousCertificateAccess
          - anonymousContentAccess
          - anonymousCourseAccess
          - anonymousOrgAccess
          - anonymousUserAccess
          - anonymousAppAccess
          - anonymousUserCreate
          state: present
          key: portal_anonymous
          secret: portal_anonymousrandomstring123
          algorithm: HS256
          print_credentials: true
        - username: portal_loggedin
          groups: 
          - announcementAccess
          - appAccess
          - appAdmin
          - appUpdate
          - badgeAccess
          - badgeAdmin
          - badgeCreate
          - badgeUpdate
          - certificateAccess
          - certificateAdmin
          - certificateCreate
          - certificateUpdate
          - channelAccess
          - channelCreate
          - channelUpdate
          - contentAccess
          - contentAdmin
          - contentCreate
          - contentUpdate
          - courseAccess
          - courseAdmin
          - courseCreate
          - courseUpdate
          - deviceCreate
          - dialcodeAccess
          - dialcodeAdmin
          - dialcodeCreate
          - dialcodeUpdate
          - locationAccess
          - noteAccess
          - noteAdmin
          - noteCreate
          - noteUpdate
          - objectAccess
          - orgAccess
          - orgCreate
          - pageAccess
          - pluginAccess
          - reportsAccess
          - reportsAdmin
          - reportsCreate
          - reportsUpdate
          - ssoCreate
          - userAccess
          - userAdmin
          - userCreate
          - userTempAdmin
          - userUpdate
          - groupCreate
          - groupUpdate
          - groupAccess
          - groupAdmin
          - dataAccess
          - druidReportCreate
          - druidReportAdmin
          - dataCreate
          - frameworkAccess
          - programAccess
          - solutionAccess
          - registryAccess
          - projectAccess
          - projectUpdate
          - projectCreate
          - observationAccess
          - observationUpdate
          - observationCreate
          - surveyAccess
          - cloudUrlsCreate
          - surveyUpdate
          - refreshTokenCreate
          - telemetryCreate
          - anonymousCertificateAccess
          - anonymousContentAccess
          - anonymousCourseAccess
          - anonymousOrgAccess
          - anonymousUserAccess
          - anonymousAppAccess
          - anonymousUserCreate
          - readNotificationFeed
          - updateNotificationFeed
          - deleteNotificationFeed
          state: present
          key: portal_loggedin
          secret: portal_loggedinrandomstring123
          algorithm: HS256
          print_credentials: true
        - username: portal_anonymous_fallback_token
          groups: 
          - deviceCreate
          - locationAccess
          - telemetryCreate
          - anonymousCertificateAccess
          - anonymousContentAccess
          - anonymousCourseAccess
          - anonymousOrgAccess
          - anonymousUserAccess
          - anonymousAppAccess
          - anonymousUserCreate
          state: present
          key: portal_anonymous_fallback_token
          secret: portal_anonymous_fallback_tokenrandomstring123
          algorithm: HS256
          print_credentials: true
        - username: portal_loggedin_fallback_token
          groups: 
          - announcementAccess
          - appAccess
          - appAdmin
          - appUpdate
          - badgeAccess
          - badgeAdmin
          - badgeCreate
          - badgeUpdate
          - certificateAccess
          - certificateAdmin
          - certificateCreate
          - certificateUpdate
          - channelAccess
          - channelCreate
          - channelUpdate
          - contentAccess
          - contentAdmin
          - contentCreate
          - contentUpdate
          - courseAccess
          - courseAdmin
          - courseCreate
          - courseUpdate
          - deviceCreate
          - dialcodeAccess
          - dialcodeAdmin
          - dialcodeCreate
          - dialcodeUpdate
          - locationAccess
          - noteAccess
          - noteAdmin
          - noteCreate
          - noteUpdate
          - objectAccess
          - orgAccess
          - orgCreate
          - pageAccess
          - pluginAccess
          - reportsAccess
          - reportsAdmin
          - reportsCreate
          - reportsUpdate
          - ssoCreate
          - userAccess
          - userAdmin
          - userCreate
          - userTempAdmin
          - userUpdate
          - groupCreate
          - groupUpdate
          - groupAccess
          - groupAdmin
          - dataAccess
          - druidReportCreate
          - druidReportAdmin
          - dataCreate
          - frameworkAccess
          - programAccess
          - solutionAccess
          - registryAccess
          - projectAccess
          - projectUpdate
          - projectCreate
          - observationAccess
          - observationUpdate
          - observationCreate
          - surveyAccess
          - cloudUrlsCreate
          - surveyUpdate
          - refreshTokenCreate
          - telemetryCreate
          - anonymousCertificateAccess
          - anonymousContentAccess
          - anonymousCourseAccess
          - anonymousOrgAccess
          - anonymousUserAccess
          - anonymousAppAccess
          - anonymousUserCreate
          - readNotificationFeed
          - updateNotificationFeed
          - deleteNotificationFeed
          state: present
          key: portal_loggedin_fallback_token
          secret: portal_loggedin_fallback_tokenrandomstring123
          algorithm: HS256
          print_credentials: true
        - username: adminutil_learner_api_token
          groups: 
          - userAccess
          state: present
          key: adminutil_learner_api_token
          secret: adminutil_learner_api_tokenrandomstring123
          algorithm: HS256
          print_credentials: true
---
# Source: edbb/charts/kong/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong
    app.kubernetes.io/version: 0.14.1
    helm.sh/chart: kong-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps
---
# Source: edbb/charts/kong/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-env
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong
    app.kubernetes.io/version: 0.14.1
    helm.sh/chart: kong-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  # for example,
  
  # ENV: dev
  KONG_ADMIN_LISTEN: "0.0.0.0:8001"
  KONG_DATABASE: "postgres"
  KONG_LOG_LEVEL: "info"
  KONG_LUA_SOCKET_POOL_SIZE: "30"
  KONG_MEM_CACHE_SIZE: "128m"
  KONG_NGINX_HTTP_LOG_FORMAT: nginx_public_ingress_log_format '$remote_addr - $remote_user [$time_local] "$request" $status $request_length $body_bytes_sent $request_time $upstream_response_time $pipe "$http_referer" "$http_user_agent" "$http_x_request_id" "$http_x_device_id" "$http_x_channel_id" "$http_x_app_id" "$http_x_app_ver" "$http_x_session_id"'
  KONG_NGINX_WORKER_PROCESSES: "4"
  KONG_PG_SSL: "True"
  KONG_PROXY_ACCESS_LOG: "logs/access.log nginx_public_ingress_log_format"
  KONG_RATELIMIT_CACHE_SIZE: "12m"
  KONG_TRUSTED_IPS: "0.0.0.0/0,::/0"
  KONG_UPSTREAM_KEEPALIVE: "200"
  KONG_PG_DATABASE: "kong"
  KONG_PG_HOST: "postgresql"
  KONG_PG_USER: "postgres"
  KONG_PG_PASSWORD: "postgres"
  KONG_PG_PORT: "5432"
---
# Source: edbb/charts/nginx-private-ingress/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-private-ingress
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-private-ingress
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nginx-private-ingress-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  nginx.conf: |-
      user  nginx;
      worker_processes auto;
      
      error_log  /var/log/nginx/error.log warn;
      pid        /var/run/nginx.pid;
      
      events {
          worker_connections  10000;
      }
      
      http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        lua_load_resty_core off;
        lua_package_path "/etc/nginx/lua_modules/?.lua";
        log_format  main  '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $request_length $body_bytes_sent'
                          ' $request_time $upstream_response_time $pipe'
                          ' "$http_referer" "$http_user_agent" "$sb_request_id"'
                          ' "$http_x_device_id" "$http_x_channel_id" "$http_x_app_id"'
                          ' "$http_x_app_ver" "$http_x_session_id"';
      
        # If the client send request_id it should be preffered over the default one
        map $http_x_request_id $sb_request_id {
          default  $http_x_request_id;
          ''  $request_id;
        }
      
        access_log  /var/log/nginx/access.log  main;
        include /etc/nginx/conf.d/*.conf;
        sendfile        on;
        client_max_body_size 60M;
        keepalive_timeout  65s;
        keepalive_requests 200;
      
        server {
          listen 80;
          listen [::]:80;
          server_name _;
          resolver 34.118.224.10 valid=30s;
          location /userorg/ {
            set $target http://userorg-service:9000;
            rewrite ^/userorg/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /api/ {
            set $target http://kong:8000;
            rewrite ^/api/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /grafana/ {
            set $target http://prometheus-operator-grafana;
            rewrite ^/grafana/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /admin-api/ {
            set $target http://kong:8001;
            rewrite ^/admin-api/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /player/ {
            set $target http://player:3000;
            rewrite ^/player/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /knowledgemw/ {
            set $target http://knowledge-mw-service:5000;
            rewrite ^/knowledgemw/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /content/ {
            set $target http://content-service:9000;
            rewrite ^/content/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /cert/ {
            set $target http://cert-service:9000;
            rewrite ^/cert/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /certreg/ {
            set $target http://cert-registry-service:9000;
            rewrite ^/certreg/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /print/ {
            set $target http://print-service:5000;
            rewrite ^/print/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /assessment/ {
            set $target http://assessment-service:9000;
            rewrite ^/assessment/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /notification/ {
            set $target http://notification-service:9000;
            rewrite ^/notification/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /report/ {
            set $target http://report-service:3030;
            rewrite ^/report/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_set_header Host $server_name;
            proxy_pass $target;
          }
          location /search/ {
            set $target http://search-service:9000;
            rewrite ^/search/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /lms/ {
            set $target http://lms-service:9000;
            rewrite ^/lms/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
      
          location /taxonomy/ {
            set $target http://taxonomy-service:9000;
            rewrite ^/taxonomy/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /analytics/ {
            set $target http://analytics-service:9000;
            rewrite ^/analytics/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /enc/ {
            set $target http://enc-service:8013;
            rewrite ^/enc/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /prometheus/ {
            set $target http://sunbird-monitoring-prometheus:9090;
            rewrite ^/prometheus/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /nodebb/ {
            set $target http://nodebb:4567;
            rewrite ^/enc/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /dial/ {
            set $target http://dial-service:9000;
            rewrite ^/dial/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /inbound-service/ {
            set $target http://inbound-service:8085;
            rewrite ^/inbound-service/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /outbound-service/ {
            set $target http://outbound-service:9090;
            rewrite ^/outbound-service/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /orchestrator-service/ {
            set $target http://orchestrator-service:8686;
            rewrite ^/orchestrator-service/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /transformer-service/ {
            set $target http://transformer-service:9091;
            rewrite ^/transformer-service/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /federation-service/ {
            set $target http://federation-service:9999;
            rewrite ^/federation-service/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /gql-service/ {
            set $target http://gql-service:8080;
            rewrite ^/gql-service/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /uci-service/ {
            set $target http://uci-service:9999;
            rewrite ^/uci-service/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /uci-transport-socket/ {
            set $target http://uci-transport-socket-service:3000;
            rewrite ^/uci-transport-socket/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_pass $target;
          }
          location /ml-survey/ {
            set $target http://ml-survey-service:3000;
            rewrite ^/ml-survey/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /ml-core/ {
            set $target http://ml-core-service:3000;
            rewrite ^/ml-core/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /registry-service/ {
            set $target http://registry-service:8081;
            rewrite ^/registry-service/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_set_header Host $server_name;
            proxy_pass $target;
          }
          location /ml-projects/ {
            set $target http://ml-projects-service:3000;
            rewrite ^/ml-projects/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
          location /ml-reports/ {
            set $target http://ml-reports-service:3000;
            rewrite ^/ml-reports/(.*) /$1 break;
            proxy_http_version 1.1;
            proxy_pass $target;
          }
        }
      }
---
# Source: edbb/charts/nginx-public-ingress/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-public-ingress
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-public-ingress
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nginx-public-ingress-0.1.0
  annotations:

    cloud.google.com/load-balancer-type: External
    reloader.stakater.com/auto: "true"
data:
    
  apple-app-site-association.json: |-
      
      {"applinks":{"apps":[],"details":[{"appID":"123456.dev.sunbird.app","paths":["/explore","/dial/*","/get/dial","/play/content","/play/collection","/learn/course","/explore-course/course","/explore-course","/search","/search/Library","/faq","/profile","/play/quiz","/explore","/learn","/resources"]}]}}
      
    
  compression.conf: |-
      # Compression
      gzip on;
      gzip_comp_level    5;
      gzip_min_length    256; # 256Bytes
      gzip_proxied       any;
      gzip_vary          on;
      # Content types for compression
      gzip_types
      application/atom+xml
      application/javascript
      application/json
      application/ld+json
      application/manifest+json
      application/rss+xml
      application/vnd.geo+json
      application/vnd.ms-fontobject
      application/x-font-ttf
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/opentype
      image/bmp
      image/svg+xml
      image/x-icon
      text/cache-manifest
      text/css
      text/plain;
    
  keycloak.conf: |-
      
      
    
  nginx.conf: |-
      user  nginx;
      worker_processes  auto;
      error_log  /var/log/nginx/error.log warn;
      pid        /var/run/nginx.pid;
      events {
          worker_connections  10000;
      }
      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;
          resolver 34.118.224.10 valid=30s;
          lua_load_resty_core off;
          log_format  main  '$remote_addr - $remote_user [$time_local] '
                            '"$request" $status $request_length $body_bytes_sent'
                            ' $request_time $upstream_response_time $pipe'
                            ' "$http_referer" "$http_user_agent" "$sb_request_id"'
                            ' "$http_x_device_id" "$http_x_channel_id" "$http_x_app_id"'
                            ' "$http_x_app_ver" "$http_x_session_id" ';
          access_log  /var/log/nginx/access.log  main;
          # Shared dictionary to store metrics
          lua_shared_dict prometheus_metrics 100M;
          lua_package_path "/etc/nginx/lua_modules/?.lua";
          # Defining request_id
          # If the client send request_id it should be preffered over the default one
          map $http_x_request_id $sb_request_id {
            default  $http_x_request_id;
            ''  $request_id;
          }
          # Defining upstream cache status for nginx metrics
          map $upstream_cache_status $cache_status {
            default  $upstream_cache_status;
            ''       "NONE";
          }
          map $http_accept $dial_upstream_host {
            default                player;
            application/ld+json    kong;
          }
          # Defining metrics
          init_worker_by_lua_block {
            prometheus = require("prometheus").init("prometheus_metrics")
            metric_requests = prometheus:counter(
              "nginx_http_requests_total", "Number of HTTP requests", {"host", "status", "request_method", "cache_status"})
            metric_latency = prometheus:histogram(
              "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
            metric_connections = prometheus:gauge(
              "nginx_http_connections", "Number of HTTP connections", {"state"})
          }
          log_by_lua_block {
            metric_requests:inc(1, {ngx.var.server_name, ngx.var.status, ngx.var.request_method, ngx.var.cache_status })
            metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
          }
          header_filter_by_lua_block {
           ngx.header["server"] = nil
          }
          sendfile        on;
          #tcp_nopush     on;
          client_max_body_size 60M;
          keepalive_timeout  65s;
          keepalive_requests 200;
          # Nginx connection limit per ip
          limit_conn_zone $binary_remote_addr zone=limitbyaddr:10m;
          limit_conn_status 429;
          upstream kong {
              server kong:8000;
              keepalive 1000;
          }
          upstream keycloak {
              server keycloak:8080;
              keepalive 1000;
          }
          upstream player {
              server player:3000;
              keepalive 1000;
          }
          include /etc/nginx/defaults.d/*.conf;
          include /etc/nginx/conf.d/*.conf;
          #################
          # Caching Block #
          #################
          #
          # Keywords
          #
          # proxy_cache_path: path to store the cache content
          # level: how many directories we need, 1:2 means 1 parent directory, and another child directory before the cache content.
          # keys_zone: name of the cache and size of the keys store in RAM; 1‑MB zone can store data for about 8,000 keys
          # max_size: size of the cache content in disk
          # inactive: specifies how long an item can remain in the cache without being accessed. This doesn't value expiry time of cache. So keep it more than the expiry.
          # use_temp_path: do we have to write the cache to a temp path first? This will reduce the performance.
          #
          # caching for images and files
          proxy_cache_path /tmp/large_cache levels=1:2 keys_zone=large_cache:10m max_size=100m inactive=10m use_temp_path=off;
          proxy_cache_path /tmp/medium_cache levels=1:2 keys_zone=medium_cache:5m max_size=50m inactive=10m use_temp_path=off;
          proxy_cache_path /tmp/small_cache levels=1:2 keys_zone=small_cache:2m max_size=10m inactive=10m use_temp_path=off;
      
         server {
           listen 9145;
           location /metrics {
             content_by_lua_block {
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
              }
           }
         }
      }
      
    
  proxy-default.conf: |-
      server {
        listen 80;
        listen [::]:80;
        server_name example.com;
        # Limitting open connection per ip
        limit_conn limitbyaddr 400;
        return 301 https://example.com$request_uri;
      }
      server {
        listen                443 ssl;
        ssl_certificate       /etc/secrets/tls.crt;
        ssl_certificate_key   /etc/secrets/tls.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA HIGH !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
        server_name *.example.com example.com;
        # Limitting open connection per ip
        limit_conn limitbyaddr 400;
        proxy_set_header    Host              $host;
        proxy_set_header    X-Real-IP         $remote_addr;
        proxy_set_header    X-Forwarded-SSL   on;
        proxy_set_header    X-Forwarded-Proto $scheme;
        ignore_invalid_headers off;  #pass through headers from Jenkins which are considered invalid by Nginx server.
        resolver 34.118.224.10 valid=30s;
        # Mobile Devices Refresh token Endpoints
        location ~* ^/auth/v1/refresh/token  {
          rewrite ^/auth/(.*) /auth/$1 break;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header X-Forwarded-For   $remote_addr;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://kong;
        }
        # Admin API Endpoints for sunbird realm fpr forgot password flow
        location ~ /auth/admin/realms/sunbird/users/ {
          rewrite ^/auth/(.*) /auth/$1 break;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header X-Forwarded-For   $remote_addr;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Connection "";
          proxy_http_version 1.1;
          proxy_pass http://keycloak;
        }
        # Sunbird realm player API endpoints
        location ~ /auth/realms/sunbird/(get-required-action-link|login-actions/(action-token|authenticate|required-action)|protocol/openid-connect/(auth|certs|logout|token|userinfo)|.well-known/openid-configuration) {
          rewrite ^/auth/(.*) /auth/$1 break;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header X-Forwarded-For   $remote_addr;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Connection "";
          proxy_http_version 1.1;
          proxy_pass http://keycloak;
        }
        # Static Assets for player endpoints with caching
        location ~ /auth/(resources/(.+\.(png|svg|ico|js|eot|ttf|woff|woff2|css))|welcome-content/(.+\.(png|svg|ico|js|eot|ttf|woff|woff2|css))) {
          # Enabling caching
          proxy_cache_key $proxy_host$request_uri;
          proxy_cache small_cache;
          add_header X-Proxy-Cache $upstream_cache_status;
          add_header X-Proxy-Cache-Date $upstream_http_date;
          proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
          proxy_cache_revalidate on;
          proxy_cache_background_update on;
          proxy_cache_lock on;
          proxy_cache_valid 200 5m;
          rewrite ^/auth/(.*) /auth/$1 break;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header X-Forwarded-For   $remote_addr;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
          proxy_pass http://keycloak;
        }
        # This is Caching mechanism for POST requests location search
        location ~ /userorg/data/v1/location/search {
          # Enabling compression
          include /etc/nginx/defaults.d/compression.conf;
          # Enabling caching
          # caching include Accept-Encoding header also, to provide gziped or plain content as per request
          proxy_cache_key "$http_accept_encoding|$request_uri|$request_body";
          proxy_cache medium_cache;
          add_header X-Proxy-Cache $upstream_cache_status;
          add_header X-Proxy-Cache-Date $upstream_http_date;
          proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
          proxy_cache_methods GET HEAD POST;
          proxy_cache_revalidate on;
          proxy_cache_background_update on;
          proxy_cache_lock on;
          proxy_cache_valid 200 5m;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://player;
        }
        # Caching for content consumption
        location ~ /api/(content/v1/read|course/v1/hierarchy|course/v1/batch/read) {
          # Enabling compression
          include /etc/nginx/defaults.d/compression.conf;
          # Enabling caching
          # caching include Accept-Encoding header also, to provide gziped or plain content as per request
          proxy_cache_key "$http_accept_encoding|$request_uri|$request_body";
          proxy_cache large_cache;
          add_header X-Proxy-Cache $upstream_cache_status;
          add_header X-Proxy-Cache-Date $upstream_http_date;
          proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
          proxy_cache_methods GET HEAD POST;
          proxy_cache_revalidate on;
          proxy_cache_background_update on;
          proxy_cache_lock on;
          proxy_cache_valid 200 4m;
          # Increasing the proxy buffer size
          proxy_buffer_size 16k;
          proxy_busy_buffers_size 16k;
          rewrite ^/api/(.*) /$1 break;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
          proxy_pass http://kong;
        }
        # This is Caching mechanism for Content search
        location ~ /api/content/v1/search {
          # Enabling compression
          include /etc/nginx/defaults.d/compression.conf;
          # Enabling caching
          # caching include Accept-Encoding header also, to provide gziped or plain content as per request
          proxy_cache_key "$http_accept_encoding|$request_uri|$request_body";
          proxy_cache large_cache;
          add_header X-Proxy-Cache $upstream_cache_status;
          add_header X-Proxy-Cache-Date $upstream_http_date;
          proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
          proxy_cache_methods GET HEAD POST;
          proxy_cache_revalidate on;
          proxy_cache_background_update on;
          proxy_cache_lock on;
          proxy_cache_valid 200 4m;
          # Increasing the proxy buffer size
          proxy_buffer_size 16k;
          proxy_busy_buffers_size 16k;
          rewrite ^/api/(.*) /$1 break;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
          proxy_pass http://kong;
        }
        # This is Caching mechanism for POST requests
        location ~ /api/data/v1/form/read {
          # Enabling compression
          include /etc/nginx/defaults.d/compression.conf;
          # Enabling caching
          # caching include Accept-Encoding header also, to provide gziped or plain content as per request
          proxy_cache_key "$http_accept_encoding|$request_uri|$request_body";
          proxy_cache small_cache;
          add_header X-Proxy-Cache $upstream_cache_status;
          add_header X-Proxy-Cache-Date $upstream_http_date;
          proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
          proxy_cache_methods GET HEAD POST;
          proxy_cache_revalidate on;
          proxy_cache_background_update on;
          proxy_cache_lock on;
          proxy_cache_valid 200 5m;
          rewrite ^/api/(.*) /$1 break;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://kong;
        }
        location ~ /api/(framework/v1/read|data/v1/system/settings/get|org/v1/search|org/v2/search|data/v1/location/search) {
          # Enabling compression
          include /etc/nginx/defaults.d/compression.conf;
          # Enabling caching
          # caching include Accept-Encoding header also, to provide gziped or plain content as per request
          proxy_cache_key "$http_accept_encoding|$request_uri|$request_body";
          proxy_cache medium_cache;
          add_header X-Proxy-Cache $upstream_cache_status;
          add_header X-Proxy-Cache-Date $upstream_http_date;
          proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
          proxy_cache_methods GET HEAD POST;
          proxy_cache_revalidate on;
          proxy_cache_background_update on;
          proxy_cache_lock on;
          proxy_cache_valid 200 5m;
          rewrite ^/api/(.*) /$1 break;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header    X-Forwarded-For   $remote_addr;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_buffer_size 16k;
          proxy_busy_buffers_size 16k;
          proxy_pass http://kong;
        }
        location /api/ {
          if ($request_method = OPTIONS ) {
              add_header Access-Control-Allow-Origin "*" ;
              add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
              add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id, Content-Encoding";
              add_header Content-Length 0;
              add_header Content-Type text/plain;
              return 200;
          }
          include /etc/nginx/defaults.d/compression.conf;
          rewrite ^/api/(.*) /$1 break;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header    X-Forwarded-For   $remote_addr;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://kong;
        }
        # Oauth2 config
        location /oauth2/ {
          set $target http://oauth2-proxy;
          proxy_set_header Host                    $host;
          proxy_set_header X-Real-IP               $remote_addr;
          proxy_set_header X-Scheme                $scheme;
          proxy_set_header X-Auth-Request-Redirect $request_uri;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass $target;
        }
        location = /oauth2/auth {
          set $target http://oauth2-proxy;
          proxy_set_header Host             $host;
          proxy_set_header X-Real-IP        $remote_addr;
          proxy_set_header X-Scheme         $scheme;
          # nginx auth_request includes headers but not body
          proxy_set_header Content-Length   "";
          proxy_pass_request_body           off;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass $target;
        }
        location /graylog/ {
          auth_request /oauth2/auth;
          error_page 401 = /oauth2/sign_in;
          # Setting target url
          auth_request_set $target http://graylog;
          # pass information via X-User and X-Email headers to backend,
          # requires running with --set-xauthrequest flag
          auth_request_set $user   $upstream_http_x_auth_request_user;
          auth_request_set $email  $upstream_http_x_auth_request_email;
          proxy_set_header X-User  $user;
          proxy_set_header X-Email $email;
          # if you enabled --cookie-refresh, this is needed for it to work with auth_request
          auth_request_set $auth_cookie $upstream_http_set_cookie;
          add_header Set-Cookie $auth_cookie;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-Host $host;
          proxy_set_header X-Forwarded-Server $host;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header Graylog-User viewer;
          proxy_set_header X-Graylog-Server-URL https://example.com/graylog/;
          rewrite  ^/graylog/(.*)$  /$1  break;
          proxy_pass $target;
        }
        location /dashboard {
          return 301 /graylog/;
        }
        location /oauth3 {
          set $target http://oauth2-proxy;
          proxy_set_header Host                    $host;
          proxy_set_header X-Real-IP               $remote_addr;
          proxy_set_header X-Scheme                $scheme;
          proxy_set_header X-Auth-Request-Redirect $request_uri;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass $target;
        }
        location = /oauth3/auth {
          set $target http://oauth2-proxy;
          proxy_set_header Host             $host;
          proxy_set_header X-Real-IP        $remote_addr;
          proxy_set_header X-Scheme         $scheme;
          proxy_set_header Content-Length   "";
          proxy_pass_request_body           off;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass $target;
        }
        location /grafana {
          rewrite ^/grafana/(.*) /grafana/$1 break;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_connect_timeout 1;
          proxy_send_timeout 30;
          proxy_read_timeout 40;
          proxy_set_header    X-Forwarded-Proto $scheme;
          proxy_set_header    X-Forwarded-For   $http_x_forwarded_for;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://monitoring-grafana;
        }
        location /encryption/ {
          set $target http://encryption;
          rewrite ^/encryption/(.*) /$1 break;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_connect_timeout 1;
          proxy_send_timeout 30;
          proxy_read_timeout 40;
          proxy_set_header    X-Forwarded-Proto $scheme;
          proxy_set_header    X-Forwarded-For   $http_x_forwarded_for;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass $target;
        }
        location /discussions/ {
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Host $http_host;
          proxy_set_header X-NginX-Proxy true;
          proxy_redirect off;
          # Socket.IO Support
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          #rewrite ^/discussions/(.*) /$1 break;
          # set $target http://nodebb-service:4567;
          # proxy_pass $target;
          proxy_pass http://nodebb:4567;
        }
        location ~* ^/assets/public/(.*) {
          # Enabling cache for Response code 200
          expires 1M;
          add_header Pragma public;
          add_header Cache-Control "public";
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/javascript;
          if ($request_method = OPTIONS ) {
              add_header Access-Control-Allow-Origin "*" ;
              add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
              add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
              # add_header Access-Control-Allow-Credentials "true";
              add_header Content-Length 0;
              add_header Content-Type text/plain;
              return 200;
          }
          set $bucket           "https://storage.googleapis.com/ed-sunbird-public/";
          set $url_full         '$1';
          proxy_http_version     1.1;
          proxy_set_header       Host "https://storage.googleapis.com/ed-sunbird-public/";
          proxy_set_header       Authorization '';
          proxy_hide_header      Access-Control-Allow-Origin;
          proxy_hide_header      Access-Control-Allow-Methods;
          proxy_hide_header      x-amz-id-2;
          proxy_hide_header      x-amz-request-id;
          proxy_hide_header      Set-Cookie;
          proxy_ignore_headers   "Set-Cookie";
          proxy_buffering        off;
          proxy_intercept_errors on;
          add_header             Access-Control-Allow-Origin "*";
          add_header             Access-Control-Allow-Methods GET;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass             $bucket/$url_full;
        }
        location ~* ^/content/preview/(.*) {
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
              add_header Access-Control-Allow-Origin "*" ;
              add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
              add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
              # add_header Access-Control-Allow-Credentials "true";
              add_header Content-Length 0;
              add_header Content-Type text/plain;
              return 200;
          }
          set $bucket           "https://storage.googleapis.com/ed-sunbird-public/";
          set $url_full         '$1';
          proxy_http_version     1.1;
          proxy_set_header       Host "https://storage.googleapis.com/ed-sunbird-public/";
          proxy_set_header       Authorization '';
          proxy_hide_header      Access-Control-Allow-Origin;
          proxy_hide_header      Access-Control-Allow-Methods;
          proxy_hide_header      x-amz-id-2;
          proxy_hide_header      x-amz-request-id;
          proxy_hide_header      Set-Cookie;
          proxy_ignore_headers   "Set-Cookie";
          proxy_buffering        off;
          proxy_intercept_errors on;
          add_header             Access-Control-Allow-Origin "*" ;
          add_header             Access-Control-Allow-Methods GET;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass             $bucket/v3/preview/$url_full;
       }
       location ~ /content-editor/telemetry|collection-editor/telemetry {
          rewrite ^/(.*) /$1 break;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_set_header    X-Forwarded-Proto $scheme;
          proxy_set_header Connection "";
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://player;
        }
        location ~* ^/content-editor/(.*) {
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
              add_header Access-Control-Allow-Origin "*" ;
              add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
              add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
              # add_header Access-Control-Allow-Credentials "true";
              add_header Content-Length 0;
              add_header Content-Type text/plain;
              return 200;
          }
          set $bucket           "https://storage.googleapis.com/ed-sunbird-public/";
          set $url_full         '$1';
          proxy_http_version     1.1;
          proxy_set_header       Host "https://storage.googleapis.com/ed-sunbird-public/";
          proxy_set_header       Authorization '';
          proxy_hide_header      Access-Control-Allow-Origin;
          proxy_hide_header      Access-Control-Allow-Methods;
          proxy_hide_header      x-amz-id-2;
          proxy_hide_header      x-amz-request-id;
          proxy_hide_header      Set-Cookie;
          proxy_ignore_headers   "Set-Cookie";
          proxy_buffering        off;
          proxy_intercept_errors on;
          add_header             Access-Control-Allow-Origin "*" ;
          add_header             Access-Control-Allow-Methods GET;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass             $bucket/content-editor/$url_full;
        }
        location ~* ^/discussion-ui/(.*) {
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          set $bucket            "https://storage.googleapis.com/ed-sunbird-public/";
          set $url_full          '$1';
          proxy_http_version     1.1;
          proxy_set_header       Host "https://storage.googleapis.com/ed-sunbird-public/";
          proxy_set_header       Authorization '';
          proxy_hide_header      Access-Control-Allow-Origin;
          proxy_hide_header      Access-Control-Allow-Methods;
          proxy_hide_header      x-amz-id-2;
          proxy_hide_header      x-amz-request-id;
          proxy_hide_header      Set-Cookie;
          proxy_ignore_headers   "Set-Cookie";
          proxy_buffering        off;
          proxy_intercept_errors on;
          add_header             Access-Control-Allow-Origin "*" ;
          add_header             Access-Control-Allow-Methods GET;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass             $bucket/discussion-ui/$url_full;
        }
        location ~* ^/collection-editor/(.*) {
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
              add_header Access-Control-Allow-Origin "*" ;
              add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
              add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
              # add_header Access-Control-Allow-Credentials "true";
              add_header Content-Length 0;
              add_header Content-Type text/plain;
              return 200;
          }
          set $bucket            "https://storage.googleapis.com/ed-sunbird-public/";
          set $url_full          '$1';
          proxy_http_version     1.1;
          proxy_set_header       Host "https://storage.googleapis.com/ed-sunbird-public/";
          proxy_set_header       Authorization '';
          proxy_hide_header      Access-Control-Allow-Origin;
          proxy_hide_header      Access-Control-Allow-Methods;
          proxy_hide_header      x-amz-id-2;
          proxy_hide_header      x-amz-request-id;
          proxy_hide_header      Set-Cookie;
          proxy_ignore_headers   "Set-Cookie";
          proxy_buffering        off;
          proxy_intercept_errors on;
          add_header             Access-Control-Allow-Origin "*" ;
          add_header             Access-Control-Allow-Methods GET;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass             $bucket/collection-editor/$url_full;
        }
        location ~* ^/generic-editor/(.*) {
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
              add_header Access-Control-Allow-Origin "*" ;
              add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
              add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
              # add_header Access-Control-Allow-Credentials "true";
              add_header Content-Length 0;
              add_header Content-Type text/plain;
              return 200;
          }
          set $bucket            "https://storage.googleapis.com/ed-sunbird-public/";
          set $url_full          '$1';
          proxy_http_version     1.1;
          proxy_set_header       Host "https://storage.googleapis.com/ed-sunbird-public/";
          proxy_set_header       Authorization '';
          proxy_hide_header      Access-Control-Allow-Origin;
          proxy_hide_header      Access-Control-Allow-Methods;
          proxy_hide_header      x-amz-id-2;
          proxy_hide_header      x-amz-request-id;
          proxy_hide_header      Set-Cookie;
          proxy_ignore_headers   "Set-Cookie";
          proxy_buffering        off;
          proxy_intercept_errors on;
          add_header             Access-Control-Allow-Origin "*" ;
          add_header             Access-Control-Allow-Methods GET;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass             $bucket/generic-editor/$url_full;
        }
        location ~* ^/content-plugins/(.*) {
          # Enabling cache for Response code 200
          expires 1M;
          add_header Pragma public;
          add_header Cache-Control "public";
          # Enabling compression
          gzip        on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
              add_header Access-Control-Allow-Origin "*" ;
              add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
              add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
              # add_header Access-Control-Allow-Credentials "true";
              add_header Content-Length 0;
              add_header Content-Type text/plain;
              return 200;
          }
          set $bucket           "https://storage.googleapis.com/ed-sunbird-public/";
          set $url_full         '$1';
          proxy_http_version     1.1;
          proxy_set_header       Host "https://storage.googleapis.com/ed-sunbird-public/";
          proxy_set_header       Authorization '';
          proxy_hide_header      Access-Control-Allow-Origin;
          proxy_hide_header      Access-Control-Allow-Methods;
          proxy_hide_header      x-amz-id-2;
          proxy_hide_header      x-amz-request-id;
          proxy_hide_header      Set-Cookie;
          proxy_ignore_headers   "Set-Cookie";
          proxy_buffering        off;
          proxy_intercept_errors on;
          add_header             Access-Control-Allow-Origin "*";
          add_header             Access-Control-Allow-Methods GET;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass             $bucket/content-plugins/$url_full;
        }
        location /thirdparty {
          # Enabling cache for Response code 200
          expires 1M;
          add_header Pragma public;
          add_header Cache-Control "public";
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          rewrite ^/(.*) /$1 break;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_set_header    X-Forwarded-Proto $scheme;
          proxy_set_header Connection "";
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://player;
        }
        location ~* ^/.well-known/assetlinks.json {
          # Enabling cache for Response code 200
          expires 1M;
          add_header Pragma public;
          add_header Cache-Control "public";
          # Enabling compression
          gzip        on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
              add_header Access-Control-Allow-Origin "*" ;
              add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
              add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
              # add_header Access-Control-Allow-Credentials "true";
              add_header Content-Length 0;
              add_header Content-Type text/plain;
              return 200;
          }
          set $bucket           "https://storage.googleapis.com/ed-sunbird-public/";
          set $url_full         '$1';
          proxy_http_version     1.1;
          proxy_set_header       Host "https://storage.googleapis.com/ed-sunbird-public/";
          proxy_set_header       Authorization '';
          proxy_hide_header      Access-Control-Allow-Origin;
          proxy_hide_header      Access-Control-Allow-Methods;
          proxy_hide_header      x-amz-id-2;
          proxy_hide_header      x-amz-request-id;
          proxy_hide_header      Set-Cookie;
          proxy_ignore_headers   "Set-Cookie";
          proxy_buffering        off;
          proxy_intercept_errors on;
          add_header             Access-Control-Allow-Origin "*";
          add_header             Access-Control-Allow-Methods GET;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass             $bucket/mobile-deeplink/assetlinks.json;
        }
        location ~* ^/desktop/(.*) {
           # Enabling cache for Response code 200
           expires 1M;
           add_header Pragma public;
           add_header Cache-Control "public";
           # Enabling compression
           gzip            on;
           gzip_min_length 100000;
           gzip_proxied    expired no-cache no-store private auth;
           gzip_types application/javascript application/x-javascript text/css text/javascript;
           if ($request_method = OPTIONS ) {
               add_header Access-Control-Allow-Origin "*" ;
               add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
               add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
               # add_header Access-Control-Allow-Credentials "true";
               add_header Content-Length 0;
               add_header Content-Type text/plain;
               return 200;
          }
          set $offline_bucket        "https://storage.googleapis.com/ed-sunbird-public/";
          set $url_full         '$1';
          proxy_http_version     1.1;
          proxy_set_header       Host "https://storage.googleapis.com/ed-sunbird-public/";
          proxy_set_header       Authorization '';
          proxy_hide_header      Access-Control-Allow-Origin;
          proxy_hide_header      Access-Control-Allow-Methods;
          proxy_hide_header      x-amz-id-2;
          proxy_hide_header      x-amz-request-id;
          proxy_hide_header      Set-Cookie;
          proxy_ignore_headers   "Set-Cookie";
          proxy_buffering        off;
          proxy_intercept_errors on;
          add_header             Access-Control-Allow-Origin "*";
          add_header             Access-Control-Allow-Methods GET;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass             https://$offline_bucket/$url_full;
        }
        # compression for svg certs download
        location /api/certreg/v2/certs/download {
          rewrite ^/api/(.*) /$1 break;
          include /etc/nginx/defaults.d/compression.conf;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header    X-Forwarded-For   $remote_addr;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://kong;
        }
        location /userorg/certreg/v2/certs/download {
          # Compression
          gzip on;
          gzip_comp_level    5;
          gzip_min_length    50000; # 50KB
          gzip_proxied       any;
          gzip_vary          on;
          # Content types for compression
          gzip_types
          application/atom+xml
          application/javascript
          application/json
          application/ld+json
          application/manifest+json
          application/rss+xml
          application/vnd.geo+json
          application/vnd.ms-fontobject
          application/x-font-ttf
          application/x-web-app-manifest+json
          application/xhtml+xml
          application/xml
          font/opentype
          image/bmp
          image/svg+xml
          image/x-icon
          text/cache-manifest
          text/css
          text/plain
          add_header test hello;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_set_header    X-Forwarded-Proto $scheme;
          proxy_set_header Connection "";
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://player;
        }
        location / {
          rewrite ^/(.*) /$1 break;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_set_header    X-Forwarded-Proto $scheme;
          proxy_set_header Connection "";
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://player;
        }
        location /v3/device/register {
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://kong;
          proxy_set_header Connection "";
          rewrite ^/v3/device/register/(.*) /v3/device/register/$1 break;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
        }
        location /action/data/v3/metrics {
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://kong;
          proxy_set_header Connection "";
          rewrite ^/action/data/v3/metrics/(.*) /data/v3/metrics/$1 break;
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
        }
        location  ~ /resourcebundles/v1/read|/userorg/data/v1/(role/read|system/settings/get)|/v1/tenant/info  {
          # Enabling compression
          include /etc/nginx/defaults.d/compression.conf;
          # Enabling caching
          # caching include Accept-Encoding header also, to provide gziped or plain content as per request
          proxy_cache_key "$http_accept_encoding|$request_uri|$request_body";
          proxy_cache medium_cache;
          add_header X-Proxy-Cache $upstream_cache_status;
          add_header X-Proxy-Cache-Date $upstream_http_date;
          proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
          proxy_cache_revalidate on;
          proxy_cache_background_update on;
          proxy_cache_lock on;
          proxy_cache_valid 200 5m;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://player;
        }
        location /api/channel/v1/read {
          # Enabling compression
          include /etc/nginx/defaults.d/compression.conf;
          # Enabling caching
          # caching include Accept-Encoding header also, to provide gziped or plain content as per request
          proxy_cache_key "$http_accept_encoding|$request_uri|$request_body";
          proxy_cache medium_cache;
          add_header X-Proxy-Cache $upstream_cache_status;
          add_header X-Proxy-Cache-Date $upstream_http_date;
          proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
          proxy_cache_revalidate on;
          proxy_cache_background_update on;
          proxy_cache_lock on;
          proxy_cache_valid 200 5m;
          rewrite ^/api/channel/v1/read/(.*) /channel/v1/read/$1 break;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header    X-Forwarded-For   $remote_addr;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://kong;
        }
        location ~ ^/chatapi/ {
          set $target http://router-service:8000;
          rewrite ^/chatapi/(.*) /$1 break;
          proxy_pass $target;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_set_header    X-Forwarded-Proto $scheme;
          proxy_set_header Connection "";
          proxy_http_version 1.1;
        }
        location /oauth2callback {
          return 200 'OK';
          add_header Content-Type text/plain;
        }
        location /dial/ {
          if ($dial_upstream_host = kong) {
              rewrite ^/dial/(.*) /api/dialcode/v2/read/$1;
          }
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_set_header    X-Forwarded-Proto $scheme;
          proxy_set_header Connection "";
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://$dial_upstream_host;
        }
      }
      
    
  tls.crt: |-
      
    
  tls.key: |-
---
# Source: edbb/charts/nodebb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nodebb
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nodebb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nodebb-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  dummy.conf: |-
      name=sunbird
      config={
          name=dummy
        }
       # Take only root level files (configs/*) for configmaps
---
# Source: edbb/charts/nodebb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nodebb-env
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nodebb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nodebb-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  # for example,
  
  # ENV: dev
  NODE_OPTIONS: "1024"
  admin__password: nodebb
  admin__username: admin
  database: redis
  isCluster: "false"
  redis__database: '10'
  redis__host: redis-master
  redis__username: ""
  redis__password: ""
  redis__port: "6379"
  secret: "my-password"
  url: http://0.0.0.0:4567/discussions/
---
# Source: edbb/charts/player/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: player-env
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: player
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: player-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  GCP_STORAGE_ACCOUNT: sunbird
  GCP_STORAGE_KEY: 
  sunbird_public_storage_account_name: "https://storage.googleapis.com/ed-sunbird-public/"
  cloud_service_provider: gcp
  sunbird_cloud_storage_provider: gcp
  sunbird_cloud_storage_urls: https://storage.googleapis.com/ed-sunbird-public/
  cloud_private_storage_accountname: "sunbird"
  cloud_private_storage_secret: "gcp-service-account-config"
  cloud_storage_privatereports_bucketname: "ed-sunbird-reports"
  cloud_storage_resourceBundle_bucketname: "ed-sunbird-public"
  cloud_storage_desktopCrash_bucketname: ""
  cloud_private_storage_region: "asia-south1"
  cloud_private_storage_project: "sunbird-morocco-sandbox-434709"
  cloud_private_storage_endpoint: ""
  sunbird_google_captcha_site_key: ""
  config_refresh_interval: "10"
  config_service_enabled: "False"
  crypto_encryption_key: "superrandom"
  crypto_encryption_key_external: "superrandom"
  desktop_app_storage_url: "https://dev.blob.core.windows.net/staging-offlineinstaller"
  discussions_middleware: "http://discussionmw-service:3002"
  ekstep_env: "qa"
  google_captcha_private_key: ""
  ml_survey_url: "https://survey.preprod.ntp.net.in/staging"
  portal_redirect_error_callback_domain: "https://"
  portal_redis_connection_string: "redis://redis-master:6379/3"
  reportsListVersion: "v2"
  sunbird_android_app_url: ""
  sunbird_android_keycloak_client_id: "android"
  sunbird_anonymous_device_register_api: "http://kong:8000/api-manager/v2/consumer/portal_anonymous/credential/register"
  sunbird_anonymous_session_ttl: "1800000"
  sunbird_api_request_timeout: "60000"
  sunbird_autocreate_trampoline_user: "false"
  sunbird_base_proto: "https"
  sunbird_bot_configured: "false"
  sunbird_bot_service_URL: "/chatapi/bot"
  sunbird_build_number: ""
  sunbird_cassandra_consistency_level: ""
  sunbird_cassandra_replication_strategy: '{"class":"SimpleStrategy","replication_factor":1}'
  sunbird_cassandra_urls: "cassandra:9042"
  sunbird_collection_children_limit: "1200"
  sunbird_collectionEditorURL: "collection-editor/index.html"
  sunbird_config_service_url: ""
  sunbird_content_player_url: "http://kong:8000/"
  sunbird_content_proxy_url: "http://knowledge-mw-service:5000"
  sunbird_contentEditorURL: "content-editor/index.html"
  sunbird_data_product_service: "http://kong:8000/"
  sunbird_dataservice_url: "https:///api/"
  sunbird_default_channel: "sunbird"
  sunbird_default_device_token: ""
  sunbird_default_file_size: "150"
  sunbird_desktop_keycloak_client_id: "desktop"
  sunbird_device_api: "http://kong:8000/"
  sunbird_device_register_api: "https:///v3/device/register/"
  sunbird_echo_api_url: "http://kong:8000/echo/"
  sunbird_enable_api_whitelist: "true"
  sunbird_enable_permission_check: "1"
  sunbird_enable_signup: "True"
  sunbird_enable_sso: "true"
  sunbird_environment: "staging"
  sunbird_ext_plugin_url: "http://player:3000/plugin/"
  sunbird_external_content_whitelisted_domains: ""
  sunbird_genericEditorURL: "generic-editor/index.html"
  sunbird_google_android_keycloak_client_id: "google-auth-android"
  sunbird_google_android_keycloak_secret: "google_android_keycloak_secretsuperrandom"
  sunbird_google_desktop_keycloak_client_id: "google-auth-desktop"
  sunbird_google_desktop_keycloak_secret: "google_desktop_keycloak_secretsuperrandom"
  sunbird_google_keycloak_client_id: "google-auth"
  sunbird_google_keycloak_secret: "sunbird_google_keycloak_secretsuperrandom"
  sunbird_google_oauth_clientId: "google_oauth_clientId"
  sunbird_google_oauth_clientSecret: "google_oauth_clientSecretsuperrandom"
  sunbird_google_oauth_ios_clientId: "google_oauth_ios_clientId"
  sunbird_google_oauth_ios_clientSecret: "google_oauth_ios_clientSecretsuperrandom"
  sunbird_health_check_enable: "false"
  sunbird_help_link_visibility: "FALSE"
  sunbird_instance: "sunbird"
  sunbird_kong_device_register: "true"
  sunbird_kong_device_register_anonymous: "true"
  sunbird_kong_refresh_token_api: "http://kong:8000/auth/v1/refresh/token"
  sunbird_learner_player_url: "http://kong:8000/"
  sunbird_loggedin_device_register_api: "http://kong:8000/api-manager/v2/consumer/portal_loggedin/credential/register"
  sunbird_anonymous_default_token: ""
  sunbird_anonymous_register_token: ""
  sunbird_api_auth_token: ""
  sunbird_logged_default_token: ""
  sunbird_loggedin_register_token: ""
  sunbird_p1_reCaptcha_enabled: "true"
  sunbird_p2_reCaptcha_enabled: "true"
  sunbird_p3_reCaptcha_enabled: "true"
  sunbird_phraseApp_token: ""
  sunbird_port: "3000"
  sunbird_portal_auth_server_client: "portal"
  sunbird_portal_auth_server_url: "https:///auth"
  sunbird_portal_base_url: "https://"
  sunbird_portal_cdn_blob_url: "https://dev.blob.core.windows.net/uci/"
  sunbird_portal_cdn_url: ""
  sunbird_portal_log_level: "debug"
  sunbird_portal_merge_auth_server_url: "https://merge.testing.sunbirded.org/auth"
  sunbird_portal_offline_app_download_url: "https://play.google.com/store/apps/details?id:in.gov.diksha.app"
  sunbird_portal_offline_app_release_date: "17/3/2020"
  sunbird_portal_offline_app_version: "1.2.0"
  sunbird_portal_offline_supported_languages: "English, Assamese, Bengali, Gujarati, Hindi, Kannada, Malayalam, Marathi, Oriya, Punjabi, Tamil, Telugu, Urdu"
  sunbird_portal_offline_tenant: "tn"
  sunbird_portal_player_cdn_enabled: "true"
  sunbird_portal_preview_cdn_url: ""
  sunbird_portal_realm: "sunbird"
  sunbird_portal_session_secret: "superrandom"
  sunbird_portal_slugForProminentFilter: ""
  sunbird_portal_title_name: "Sunbird"
  sunbird_portal_uci_blob_url: "https://gpublic.blob.core.windows.net/uci"
  sunbird_portal_uci_bot_phone_number: "+912249757677"
  sunbird_portal_updateLoginTimeEnabled: "false"
  sunbird_portal_user_upload_ref_link: "https:///help/administrator/register-user/index.html"
  sunbird_portal_video_max_size: "150"
  sunbird_processing_kafka_host: "kafka:9092"
  sunbird_questionset_children_limit: "500"
  sunbird_redis_password: "none"
  sunbird_redis_port: "6379"
  sunbird_redis_type: "standalone"
  sunbird_redis_urls: "redis-master"
  sunbird_report_service_url: "http://kong:8000/data/v1/report-service"
  sunbird_response_cache_ttl: "180"
  sunbird_session_store_type: "redis"
  sunbird_session_ttl: "86400000"
  sunbird_sso_kafka_topic: "lms.sso.events"
  sunbird_super_admin_slug: "sunbird"
  sunbird_telemetry_packet_size: "200"
  sunbird_telemetry_service_local_url: "http://kong:8000/data/"
  sunbird_tenant_cdn_url: ""
  sunbird_trampoline_android_keycloak_client_id: "trampoline-android"
  sunbird_trampoline_android_keycloak_secret: "trampoline_android_keycloak_secretsuperrandom"
  sunbird_trampoline_client_id: "trampoline"
  sunbird_trampoline_desktop_keycloak_client_id: "trampoline-desktop"
  sunbird_trampoline_desktop_keycloak_secret: "trampoline_desktop_keycloak_secretsuperrandom"
  sunbird_trampoline_secret: "trampoline_secretsuperrandom"
  sunbird_default_board: ""
  vdnURL: ""
---
# Source: edbb/charts/player/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: player-access-keys
data:
---
# Source: edbb/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-configuration
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.9"
  annotations:
    helm.sh/hook-weight: "-5"
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: edbb/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-health
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.9"
  annotations:
    helm.sh/hook-weight: "-5"
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: edbb/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-scripts
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.9"
  annotations:
    helm.sh/hook-weight: "-5"
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: edbb/charts/report/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: report-env
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: report
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: report-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  # for example,
  SUNBIRD_REPORTS_DB_HOST: "postgresql"
  SUNBIRD_REPORTS_DB_NAME: "postgres"
  SUNBIRD_REPORTS_DB_PASSWORD: "postgres"
  SUNBIRD_REPORTS_DB_PORT: "5432"
  SUNBIRD_REPORTS_DB_USER: "postgres"
  SUNBIRD_SERVER_PORT: "3030 "
  SUNBIRD_BASE_REPORT_URL: report
  SUNBIRD_REPORTS_TABLE_NAME: report
  SUNBIRD_REPORT_SUMMARY_TABLE_NAME: ""
  SUNBIRD_ENV: "https://dummy.sunbird.com"
  DEACTIVATE_JOB_API_HOST: http://kong:8000/data/v1/report/jobs/deactivate
  DEACTIVATE_JOB_API_KEY: "sunbird_api_auth_token"
  
  # 4.10.0
  gcp_service_account_key_configmap: gcp-service-account-config
  gcp_service_account_key_file: key.json 
  gcp_project_id: sunbird-morocco-sandbox-434709
  gcp_storage_bucket: ed-sunbird-public
  sunbird_api_auth_token: ""
  sunbird_super_admin_slug: 'sunbird'
  sunbird_portal_auth_server_url: ""
  sunbird_portal_auth_server_client: ""
  sunbird_keycloak_public: ""
  sunbird_learner_player_url: ""
  sunbird_content_proxy_url: http://knowledge-mw-service:5000
  sunbird_keycloak_realm: ""
  sunbird_cache_store: "sunbird_cache_store"
  sunbird_cache_ttl: "sunbird_cache_ttl"
  sunbird_report_sas_expiry_in_minutes: "3600"
  sunbird_dataservice_url: "sunbird_dataservice_url"
---
# Source: edbb/charts/report/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: report-opa
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: report
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: report-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  common.rego: |-
      package common
      
      import input.attributes.request.http as http_request
      import future.keywords.in
      
      ROLES := {
         "BOOK_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "CONTENT_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "FLAG_REVIEWER": ["publishContent", "rejectContent", "rejectContentV2"],
      
         "BOOK_CREATOR": ["copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent"],
      
         "CONTENT_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock",  "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_MENTOR": ["updateBatch", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "PROGRAM_MANAGER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "PROGRAM_DESIGNER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "ORG_ADMIN": ["acceptTnc", "assignRole", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "getUserProfileV5", "updateUserV2", "readUserConsent", "createTenantPreferences", "updateTenantPreferences", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "REPORT_VIEWER": ["acceptTnc", "getReportSummary", "listReportSummary"],
      
         "REPORT_ADMIN": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "acceptTnc", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "PUBLIC": ["PUBLIC"]
      }
      
      x_authenticated_user_token := http_request.headers["x-authenticated-user-token"]
      x_authenticated_for := http_request.headers["x-authenticated-for"]
      private_ingressgateway_ip := ""
      
      jwt_public_keys := {
      "KEYCLOAK_KID": "KEYCLOAK_PUBLIC_KEY"
      }
      
      user_token := {"header": header, "payload": payload} {
        encoded := x_authenticated_user_token
        [header, payload, _] := io.jwt.decode(encoded)
      }
      
      for_token := {"payload": payload} {
        encoded := x_authenticated_for
        [_, payload, _] := io.jwt.decode(encoded)
      }
      
      iss := "https://https://dummy.sunbird.com/auth/realms/sunbird"
      token_kid := user_token.header.kid
      token_iss := user_token.payload.iss
      token_exp := user_token.payload.exp
      current_time := time.now_ns()
      
      token_sub := split(user_token.payload.sub, ":")
      # Check for both cases - With and without federation_id in sub field as below
      # sub := f:federation_id:user_id OR sub := user_id
      token_userid = token_sub[2] {
          count(token_sub) == 3
      } else = token_sub[0] {
          count(token_sub) == 1
      }
      for_token_userid := for_token.payload.sub
      for_token_parentid := for_token.payload.parentId
      
      # Desktop app is still using keycloak tokens which will not have roles
      # This is a temporary fix where we will append the roles as PUBLIC in OPA
      
      default_role := [{"role": "PUBLIC", "scope": []}]
      
      token_roles = user_token.payload.roles {
          user_token.payload.roles
      } else = default_role {
          not user_token.payload.roles
      }
      
      for_token_exists {
        x_authenticated_for
        count(x_authenticated_for) > 0
      }
      
      userid = token_userid {
          not x_authenticated_for
      } else = token_userid {
          count(x_authenticated_for) == 0 # This is a temporary fix as the mobile app is sending empty headers as x-authenticated-for: ""
      } else = for_token_userid {
          for_token_exists
      }
      
      validate_token {
        io.jwt.verify_rs256(x_authenticated_user_token, jwt_public_keys[token_kid])
        token_exp * 1000000000 > current_time
        token_iss == iss
      }
      
      is_an_internal_request {
        http_request.host == private_ingressgateway_ip
      }
      
      acls_check(acls) = indicies {
        validate_token
        indicies := [idx | some i; ROLES[token_roles[i].role][_] == acls[_]; idx := i]
        count(indicies) > 0
      }
      
      role_check(roles) = indicies {
        indicies := [idx | some i; token_roles[i].role in roles; idx := i]
        count(indicies) > 0
      }
      
      org_check(roles) = token_organisationids {
        indicies :=  role_check(roles)
        count(indicies) > 0
        token_organisationids := [ids | ids := token_roles[indicies[_]].scope[_].organisationId]
        count(token_organisationids) > 0
      }
      
      parent_id_check {
          x_authenticated_for
          count(x_authenticated_for) > 0
          token_userid == for_token_parentid
      }
      
      parent_id_check {
          count(x_authenticated_for) == 0
      }
      
      parent_id_check {
          not x_authenticated_for
      }
      
      public_role_check {
        acls := ["PUBLIC"]
        roles := ["PUBLIC"]
        acls_check(acls)
        role_check(roles)
        userid
        parent_id_check
      }
  
  main.rego: |-
      package main
      
      import input.attributes.request.http as http_request
      import data.policies as policy
      import future.keywords.in
      
      default allow = {
        "allowed": false,
        "headers": {"x-request-allowed": "no"},
        "body": "You do not have permission to perform this operation",
        "http_status": 403
      }
      
      urls[keys] { policy.urls_to_action_mapping[keys]}
      
      regex_urls := [url | url := regex.find_n(urls[_], http_request.path, 1)[0]]
      matching_urls := [url | some i; startswith(http_request.path, regex_urls[i]); url := regex_urls[i]]
      identified_url := max(matching_urls)
      identified_action := policy.urls_to_action_mapping[identified_url]
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      skipped_consumers := ["portal", "desktop"]
      x_consumer_username := http_request.headers["x-consumer-username"]
      check_if_consumer_is_skipped {
         x_consumer_username in skipped_consumers
      }
      
      allow = status {
         not check_if_consumer_is_skipped
         policy[identified_action]
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Passed",
            "http_status": 200
         }
      }
      
      allow = status {
         not identified_action
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      allow = status {
         check_if_consumer_is_skipped
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
  
  policies.rego: |-
      package policies
      
      import data.common as super
      import input.attributes.request.http as http_request
      
      x_authenticated_user_token := http_request.headers["x-authenticated-user-token"]
      
      urls_to_action_mapping := {
        "/report/get": "getReport",
        "/report/list": "listReports",
        "/report/create": "createReport",
        "/report/delete": "deleteReport",
        "/report/update": "updateReport",
        "/report/publish": "publishReport",
        "/report/retire": "retireReport",
        "/report/summary": "getReportSummary",
        "/report/summary/list": "listReportSummary",
        "/report/summary/create": "createReportSummary",
        "/report/datasets/get": "getReportDatasets"
      }
      
      getReport {
        super.public_role_check
      }
      
      getReport {
        not x_authenticated_user_token
      }
      
      getReport {
        super.is_an_internal_request
      }
      
      listReports {
        super.public_role_check
      }
      
      listReports {
        not x_authenticated_user_token
      }
      
      createReport {
        acls := ["createReport"]
        roles := ["REPORT_ADMIN", "ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
        input.parsed_body.request.report.createdby == super.userid
      }
      
      createReport {
        super.is_an_internal_request
      }
      
      deleteReport {
        acls := ["deleteReport"]
        roles := ["REPORT_ADMIN", "ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      updateReport {
        acls := ["updateReport"]
        roles := ["REPORT_ADMIN", "ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      updateReport {
        super.is_an_internal_request
      }
      
      publishReport {
        acls := ["publishReport"]
        roles := ["REPORT_ADMIN", "ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      retireReport {
        acls := ["retireReport"]
        roles := ["REPORT_ADMIN", "ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      getReportSummary {
        acls := ["getReportSummary"]
        roles := ["REPORT_ADMIN", "REPORT_VIEWER", "ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      listReportSummary {
        acls := ["listReportSummary"]
        roles := ["REPORT_ADMIN", "REPORT_VIEWER", "ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      createReportSummary {
        acls := ["createReportSummary"]
        roles := ["REPORT_ADMIN", "ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
        input.parsed_body.request.summary.createdby == super.userid
      }
      
      getReportDatasets {
        super.public_role_check
      }
      
      getReportDatasets {
        not x_authenticated_user_token
      }
---
# Source: edbb/charts/report/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: report-envoy
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: report
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: report-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  config.yaml: |-
      static_resources:
        listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9999
          per_connection_buffer_limit_bytes: 62914560
          filter_chains:
          - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                access_log:
                - name: envoy.access_loggers.stdout
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                    log_format:
                      text_format: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS_WITHOUT_PORT% - - [%START_TIME(%d/%b/%Y:%H:%M:%S %z)%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(X-DEVICE-ID)%\" \"%REQ(X-CHANNEL-ID)%\" \"%REQ(X-APP-ID)%\" \"%REQ(X-APP-VER)%\" \"%REQ(X-SESSION-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: backend
                    domains:
                    - "*"
                    routes:
                    - match:
                        prefix: "/opa/metrics"
                      route:
                        prefix_rewrite: "/metrics"
                        cluster: opa
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/"
                      route:
                        cluster: service
                        timeout: 60s
                http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    transport_api_version: V3
                    with_request_body:
                      max_request_bytes: 62914560
                      allow_partial_message: true
                    failure_mode_allow: true
                    grpc_service:
                      google_grpc:
                        target_uri: 127.0.0.1:9191
                        stat_prefix: ext_authz
                      timeout: 5s
                - name: envoy.filters.http.router
        clusters:
        - name: service
          connect_timeout: 5s
          per_connection_buffer_limit_bytes: 62914560
          type: static
          load_assignment:
            cluster_name: service
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 3030
        - name: opa
          connect_timeout: 5s
          type: static
          load_assignment:
            cluster_name: opa
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8181
      admin:
        access_log_path: "/dev/stdout"
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
---
# Source: edbb/charts/router/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: router
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: router
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: router-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  dummy.conf: |-
      name=sunbird
      config={
          name=dummy
        }
       # Take only root level files (configs/*) for configmaps
---
# Source: edbb/charts/router/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: router-env
  labels:

    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: router
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: router-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  # for example,
  
  # ENV: dev
  RASA_CORE_ENDPOINT: http://bot:5005/webhooks/rest/webhook
  REDIS_HOST: "redis-master"
  telemetry_endpoint: v1/telemetry
  sunbird_api_auth_token: ""
  telemetry_service_url: "https://test/api/data/"
  WHATSAPP_TELEMETRY_CHANNEL: ''
  WHATSAPP_SECRET_KEY: ""
  WHATSAPP_AUTH_TOKEN: ""
  WHATSAPP_URL: ""
  WHATSAPP_SOURCE: ""
  CONFIG_BLOB_PATH: ""
  HTTP_PORT: "8000"
  RASA_API_TIMEOUT: "200000"
---
# Source: edbb/charts/bot/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: bot
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bot
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: bot-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http-bot
    port: 5005
    targetPort: 5005
  selector:
    app.kubernetes.io/name: bot
---
# Source: edbb/charts/cassandra/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cassandra-headless
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: intra
      port: 7000
      targetPort: intra
    - name: tls
      port: 7001
      targetPort: tls
    - name: jmx
      port: 7199
      targetPort: jmx
    - name: cql
      port: 9042
      targetPort: cql
  selector:
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: edbb
---
# Source: edbb/charts/cassandra/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cassandra
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: cql
      port: 9042
      targetPort: cql
      nodePort: null
    - name: metrics
      port: 8080
      nodePort: null
  selector:
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: edbb
---
# Source: edbb/charts/discussionmw/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: discussionmw-service
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: discussionmw
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: discussionmw-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http-dmw
    port: 3002
    targetPort: 3002
  selector:
    app.kubernetes.io/name: discussionmw
---
# Source: edbb/charts/echo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: echo
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: echo
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: echo-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3030
    targetPort: 3030
  selector:
    app.kubernetes.io/name: echo
---
# Source: edbb/charts/kafka/charts/zookeeper/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-headless
  namespace: sunbird
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.1.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.8.1"
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/component: zookeeper
---
# Source: edbb/charts/kafka/charts/zookeeper/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: sunbird
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.1.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.8.1"
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
      nodePort: null
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/component: zookeeper
---
# Source: edbb/charts/kafka/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-21.3.1
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.4.0"
    app.kubernetes.io/component: kafka
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: false
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: kafka-client
    - name: tcp-internal
      port: 9093
      protocol: TCP
      targetPort: kafka-internal
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/component: kafka
---
# Source: edbb/charts/kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-21.3.1
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.4.0"
    app.kubernetes.io/component: kafka
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: kafka-client
      nodePort: null
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/component: kafka
---
# Source: edbb/charts/knowledgemw/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: knowledge-mw-service
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: knowledge-mw
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: knowledgemw-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 5000
    targetPort: 5000
  - name: opa-metrics
    port: 8181
    protocol: TCP
    targetPort: 8181
  - name: envoy-metrics
    port: 10000
    protocol: TCP
    targetPort: 10000
  selector:
    app.kubernetes.io/name: knowledge-mw
---
# Source: edbb/charts/kong/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong
    app.kubernetes.io/version: 0.14.1
    helm.sh/chart: kong-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  - name: admin
    port: 8001
    targetPort: 8001
  selector:
    app.kubernetes.io/name: kong
---
# Source: edbb/charts/nginx-private-ingress/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-private-ingress
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-private-ingress
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nginx-private-ingress-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
    cloud.google.com/load-balancer-type: Internal
spec:
  type: LoadBalancer
  loadBalancerIP: 10.0.1.21
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app.kubernetes.io/name: nginx-private-ingress
---
# Source: edbb/charts/nginx-public-ingress/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-public-ingress
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-public-ingress
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nginx-public-ingress-0.1.0
  annotations:
    cloud.google.com/load-balancer-type: External
    reloader.stakater.com/auto: "true"
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443
  selector:
    app.kubernetes.io/name: nginx-public-ingress
---
# Source: edbb/charts/nginx-public-ingress/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-public-ingress-metrics
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-public-ingress
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nginx-public-ingress-0.1.0
spec:
  selector:
    app.kubernetes.io/name: nginx-public-ingress
  ports:
  - name: http
    port: 9145
    targetPort: 9145
---
# Source: edbb/charts/nodebb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nodebb
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nodebb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nodebb-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http-nodebb
    port: 4567
    targetPort: 4567
  selector:
    app.kubernetes.io/name: nodebb
---
# Source: edbb/charts/player/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: player
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: player
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: player-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http-player
    port: 3000
    targetPort: 3000
  selector:
    app.kubernetes.io/name: player
---
# Source: edbb/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
  annotations:
    helm.sh/hook-weight: "-5"
    reloader.stakater.com/auto: "true"
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: sunbird
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: edbb
---
# Source: edbb/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
  annotations:
    helm.sh/hook-weight: "-5"
    reloader.stakater.com/auto: "true"
  namespace: sunbird
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: edbb
    role: primary
---
# Source: edbb/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.9"
  annotations:
    helm.sh/hook-weight: "-5"
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: edbb
---
# Source: edbb/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.9"
    app.kubernetes.io/component: master
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/component: master
---
# Source: edbb/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-replicas
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.9"
    app.kubernetes.io/component: replica
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/component: replica
---
# Source: edbb/charts/report/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: report-service
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: report
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: report-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http-report
    port: 3030
    targetPort: 3030
  - name: opa-metrics
    port: 8181
    protocol: TCP
    targetPort: 8181
  - name: envoy-metrics
    port: 10000
    protocol: TCP
    targetPort: 10000
  selector:
    app.kubernetes.io/name: report
---
# Source: edbb/charts/router/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: router-service
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: router
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: router-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app.kubernetes.io/name: router
---
# Source: edbb/charts/bot/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bot
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bot
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: bot-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bot
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bot
      annotations:
        checksum/config: b6f7fc2f88deecb47a14f47f019f20de0b4304d3330837e7c4a35bdc61354a29
    spec:
      serviceAccountName: bot
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
      containers:
        - name: bot
          image: "sunbirded.azurecr.io/bot:release-5.1.0_RC1_29_bot"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 5005
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 5005
            initialDelaySeconds: 5
            periodSeconds: 5
          ports:
            - name: http-bot
              containerPort: 5005
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: bot-env
          volumeMounts:
          - name: config
            mountPath: /config
      volumes:
      - name: env
        configMap:
          name: bot-env
      - name: config
        configMap:
          name: bot
---
# Source: edbb/charts/discussionmw/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discussionmw
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: discussionmw
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: discussionmw-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: discussionmw
  template:
    metadata:
      labels:
        app.kubernetes.io/name: discussionmw
      annotations:
        checksum/config: 0208e5c47312bd9f0b1b1ed0e4c48f027fba7805babcc0082c53b5d049f8c060
    spec:
      serviceAccountName: discussionmw
      securityContext:
        fsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      containers:
        - name: discussionmw
          image: "sunbirded.azurecr.io/discussion-middleware:release-5.0.0_RC2_1"
          imagePullPolicy: 
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /health
              port: 3002
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /health
              port: 3002
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          ports:
            - name: http-dmw
              containerPort: 3002
          resources:
            limits:
              cpu: 1
              memory: 1G
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
          envFrom:
          - configMapRef:
              name: discussionmw-env
          volumeMounts:
          - name: config
            mountPath: /config
      volumes:
      - name: env
        configMap:
          name: discussionmw-env
      - name: config
        configMap:
          name: discussionmw
---
# Source: edbb/charts/echo/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: echo
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: echo-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: echo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: echo
      annotations:
        checksum/config: b6f7fc2f88deecb47a14f47f019f20de0b4304d3330837e7c4a35bdc61354a29
    spec:
      serviceAccountName: echo
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
      containers:
        - name: echo
          image: "sunbirded.azurecr.io/echo-server:master-RC1"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /hello
              port: 9595
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /hello
              port: 9595
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 3030
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: echo-env
          volumeMounts:
          - name: config
            mountPath: /config
      volumes:
      - name: env
        configMap:
          name: echo-env
      - name: config
        configMap:
          name: echo
---
# Source: edbb/charts/knowledgemw/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: knowledge-mw
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: knowledge-mw
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: knowledgemw-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: knowledge-mw
  template:
    metadata:
      labels:
        app.kubernetes.io/name: knowledge-mw
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      serviceAccountName: knowledge-mw
      securityContext:
        {}
      containers:
        - name: knowledgemw
          envFrom:
          - configMapRef:
              name: knowledge-mw-env
          image: "sunbirded.azurecr.io/knowledge-mw-service:release-5.6.0_RC1_f24f1dd_10"
          imagePullPolicy: IfNotPresent
          env:
          - name: sunbird_sso_publickey
            valueFrom:
              configMapKeyRef:
                name: keycloak-kids-keys
                key: KEYCLOAK_PUBLIC_KEY
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /service/health
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /service/health
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 5000
          resources:
            {}
          securityContext:
            {}
          volumeMounts:
          - name: config
            mountPath: /config
          - name: keys
            mountPath: /home/sunbird/mw/content/keys/
        - args:
          - envoy
          - --config-path
          - /config/config.yaml
          env:
          - name: ENVOY_UID
            value: "1111"
          image: envoyproxy/envoy:v1.20.0
          imagePullPolicy: IfNotPresent
          name: envoy
          livenessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /config
              name: envoy-config
              readOnly: true
        - command: ["/bin/sh", "-c"]
          args:
          - |
            KID=$(cat /keys/KEYCLOAK_PUBLIC_KEY_KID) && PUBLIC_KEY=$(cat /keys/KEYCLOAK_PUBLIC_KEY) && \
            PUBLIC_KEY_PEM=$(echo "$PUBLIC_KEY" | sed -e 's/.\{64\}/&\\\\n/g' -e '1s/^/-----BEGIN PUBLIC KEY-----\\\\n/' -e '$s/$/\\\\n-----END PUBLIC KEY-----/') && \
            mkdir /policies && cp -Lr /opa-policies/*.rego /policies && \
            sed -i "s|KEYCLOAK_KID|$KID|g" /policies/common.rego && \
            sed -i "s|KEYCLOAK_PUBLIC_KEY|$PUBLIC_KEY_PEM|g" /policies/common.rego && \
            /app/opa run --server /policies \
              --addr=localhost:8181 \
              --diagnostic-addr=0.0.0.0:8282 \
              --set=plugins.envoy_ext_authz_grpc.addr=:9191 \
              --set=plugins.envoy_ext_authz_grpc.path=main/allow \
              --set=decision_logs.plugin=print_decision_logs_on_failure \
              --set=plugins.print_decision_logs_on_failure.stdout=true \
              --log-level=error \
              --ignore=.*
          image: keshavprasad/opa:0.34.2-envoy
          imagePullPolicy: IfNotPresent
          name: opa
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /opa-policies
              name: opa-policy
              readOnly: true
            - name: keycloak-key
              mountPath: /keys/
      initContainers:
        - args:
          - -p
          - "9999"
          - -u
          - "1111"
          - -w
          - "8282,10000"
          image: openpolicyagent/proxy_init:v5
          imagePullPolicy: IfNotPresent
          name: proxy-init
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            runAsNonRoot: false
            runAsUser: 0
      volumes:
      - name: env
        configMap:
          name: knowledge-mw-env
      - name: config
        configMap:
          name: knowledge-mw
      - name: envoy-config
        configMap:
          name: knowledge-mw-envoy
      - name: opa-policy
        configMap:
          name: knowledge-mw-opa
      - name: keycloak-key
        configMap:
          name: keycloak-kids-keys
      - name: keys
        projected:
          sources:
          - configMap:
              name: knowledge-mw-access-keys
          - configMap:
              name: keycloak-key
---
# Source: edbb/charts/kong/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong   ## kong
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong
    app.kubernetes.io/version: 0.14.1
    helm.sh/chart: kong-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kong  ## kong
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kong
      annotations:
        checksum/config: 9a470895f41664530917caa9ae49621aff048fc91f1b75c04afd7f50a7904284
    spec:
      serviceAccountName: kong
      securityContext:
        {}
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: ["/bin/sh", "-c"]
          args:
          - "timeout 300 sh -c 'until nc -zv postgresql 5432; do echo waiting for postgres; sleep 10; done'"
      containers:
        - name: kong
          image: "sunbirded.azurecr.io/kong:0.14.1"
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - kong
                  - quit
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /status
              port: 8001
            initialDelaySeconds: 15
            periodSeconds: 15
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /status
              port: 8001
            initialDelaySeconds: 15
            periodSeconds: 15
          ports:
            - name: http
              containerPort: 8000
            - name: admin
              containerPort: 8001
          resources:
            limits:
              cpu: 1
              memory: 1G
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: kong-env
          volumeMounts:
          - name: config
            mountPath: /config
      volumes:
      - name: env
        configMap:
          name: kong-env
      - name: config
        configMap:
          name: kong
---
# Source: edbb/charts/nginx-private-ingress/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-private-ingress
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-private-ingress
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nginx-private-ingress-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-private-ingress
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-private-ingress
      annotations:
        checksum/config: 7b9dcd10477703fa2431c7e375487eb6f42dc594575a0a6b5f74730631c2ef9a
    spec:
      serviceAccountName: nginx-private-ingress
      securityContext:
        null
      containers:
        - name: nginx-private-ingress
          image: "sunbirded.azurecr.io/proxy:release-7.0.0_8e6b2db_23"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            null
          envFrom:
          volumeMounts:
          - name: config
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
      volumes:
      - name: config
        configMap:
          name: nginx-private-ingress
---
# Source: edbb/charts/nginx-public-ingress/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-public-ingress
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-public-ingress
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nginx-public-ingress-0.1.0
  annotations:
    cloud.google.com/load-balancer-type: External
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-public-ingress
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-public-ingress
      annotations:
        checksum/config: 99791fafddece18fba22b2f07289c633090532395e10d6081f3640aaaf36ba36
    spec:
      serviceAccountName: nginx-public-ingress
      securityContext:
        {}
      initContainers:
        - args:
          - timeout 300 sh -c 'until nc -z keycloak 8080; do echo waiting for keycloak; sleep
            10; done'
          command:
          - /bin/sh
          - -c
          image: busybox
          name: wait-for-keycloak
        - args:
          - timeout 300 sh -c 'until nc -z kong 8000; do echo waiting for kong; sleep 10;
            done'
          command:
          - /bin/sh
          - -c
          image: busybox
          name: wait-for-kong
        - args:
          - timeout 300 sh -c 'until nc -z player 3000; do echo waiting for player; sleep
            10; done'
          command:
          - /bin/sh
          - -c
          image: busybox
          name: wait-for-player
      containers:
        - name: nginx-public-ingress
          image: "sunbirded.azurecr.io/proxy:release-7.0.0_8e6b2db_23"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          resources:
            {}
          securityContext:
            {}
          volumeMounts:
          - name: config
            mountPath: /etc/secrets/tls.key
            subPath: tls.key
          - name: config
            mountPath: /etc/secrets/tls.crt
            subPath: tls.crt
          - name: config
            mountPath: /etc/nginx/defaults.d/proxy-default.conf
            subPath: proxy-default.conf
          - name: config
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
          - name: config
            mountPath: /etc/nginx/defaults.d/compression.conf
            subPath: compression.conf
          - name: config
            mountPath: /var/www/html/apple-app-site-association.json
            subPath: apple-app-site-association.json
      volumes:
      - name: config
        configMap:
          name: nginx-public-ingress
---
# Source: edbb/charts/nodebb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodebb
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nodebb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: nodebb-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nodebb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nodebb
      annotations:
        checksum/config: f4b18ed32c96f0eb478cb0dfd83505399ecb2ed6c3987b2c2cb4939d40cb9959
    spec:
      serviceAccountName: nodebb
      securityContext:
        fsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      initContainers:
        - args:
          - timeout 300 sh -c 'until nc -z redis-master 6379; do echo waiting for redis; sleep
            10; done'
          command:
          - /bin/sh
          - -c
          image: busybox
          name: wait-for-redis
      containers:
        - name: nodebb
          image: "ssksanthosh/nodebb:release-5.0.0_RC1_1_v1.18.6"
          imagePullPolicy: 
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /discussions/api/category/2
              port: 4567
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /discussions/api/category/2
              port: 4567
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 5
          ports:
            - name: http-nodebb
              containerPort: 4567
          resources:
            limits:
              cpu: 1
              memory: 2G
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: nodebb-env
          volumeMounts:
          - name: config
            mountPath: /config
      volumes:
      - name: env
        configMap:
          name: nodebb-env
      - name: config
        configMap:
          name: nodebb
---
# Source: edbb/charts/player/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: player
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: player
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: player-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: player
  template:
    metadata:
      labels:
        app.kubernetes.io/name: player
      annotations:
        checksum/config: b5fe565e855d1a2c96e56b7dbf51c88351a8f31693d27b2c67e1d21eadaa8b38
    spec:
      serviceAccountName: player
      securityContext:
        {}
      containers:
        - name: player
          image: "sunbirded.azurecr.io/player:release-7.0.0_RC16_25baa89_2461"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /service/health
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /service/health
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          ports:
            - name: http-player
              containerPort: 3000
          resources:
            limits:
              cpu: 1
              memory: 1G
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          env:
          - name: sunbird_keycloak_public_key
            valueFrom:
              configMapKeyRef:
                name: keycloak-kids-keys
                key: KEYCLOAK_PUBLIC_KEY
          envFrom:
          - configMapRef:
              name: player-env
          volumeMounts:
          - name: keys
            mountPath: /home/sunbird/app_dist/keys/
      volumes:
      - name: env
        configMap:
          name: player-env
      - name: keys
        projected:
          sources:
          - configMap:
              name: player-access-keys
          - configMap:
              name: keycloak-key
---
# Source: edbb/charts/report/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: report
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: report
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: report-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: report
  template:
    metadata:
      labels:
        app.kubernetes.io/name: report
      annotations:
        checksum/config: d9df777c12e06520e2c799ec56c912c30d0117c986bfc960336e1aebb0df3b31
    spec:
      serviceAccountName: report
      securityContext:
        {}
      containers:
        - name: report
          image: "sunbirded.azurecr.io/report-service:release-4.10.0_RC6"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-report
              containerPort: 3030
          resources:
            {}
          securityContext:
            {}
          env:
          - name: sunbird_keycloak_public_key
            valueFrom:
              configMapKeyRef:
                name: keycloak-kids-keys
                key: KEYCLOAK_PUBLIC_KEY
          envFrom:
          - configMapRef:
              name: report-env
          volumeMounts:
        - args:
          - envoy
          - --config-path
          - /config/config.yaml
          env:
          - name: ENVOY_UID
            value: "1111"
          image: envoyproxy/envoy:v1.20.0
          imagePullPolicy: IfNotPresent
          name: envoy
          livenessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
        - command: ["/bin/sh", "-c"]
          args:
          - |
            KID=$(cat /keys/KEYCLOAK_PUBLIC_KEY_KID) && PUBLIC_KEY=$(cat /keys/KEYCLOAK_PUBLIC_KEY) && \
            PUBLIC_KEY_PEM=$(echo "$PUBLIC_KEY" | sed -e 's/.\{64\}/&\\\\n/g' -e '1s/^/-----BEGIN PUBLIC KEY-----\\\\n/' -e '$s/$/\\\\n-----END PUBLIC KEY-----/') && \
            mkdir /policies && cp -Lr /opa-policies/*.rego /policies && \
            sed -i "s|KEYCLOAK_KID|$KID|g" /policies/common.rego && \
            sed -i "s|KEYCLOAK_PUBLIC_KEY|$PUBLIC_KEY_PEM|g" /policies/common.rego && \
            /app/opa run --server /policies \
              --addr=localhost:8181 \
              --diagnostic-addr=0.0.0.0:8282 \
              --set=plugins.envoy_ext_authz_grpc.addr=:9191 \
              --set=plugins.envoy_ext_authz_grpc.path=main/allow \
              --set=decision_logs.plugin=print_decision_logs_on_failure \
              --set=plugins.print_decision_logs_on_failure.stdout=true \
              --log-level=error \
              --ignore=.*
          image: keshavprasad/opa:0.34.2-envoy
          imagePullPolicy: IfNotPresent
          name: opa
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /opa-policies
              name: opa-policy
              readOnly: true
            - name: keycloak-key
              mountPath: /keys/
      initContainers:
        - args:
          - -p
          - "9999"
          - -u
          - "1111"
          - -w
          - "8282,10000"
          image: openpolicyagent/proxy_init:v5
          imagePullPolicy: IfNotPresent
          name: proxy-init
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            runAsNonRoot: false
            runAsUser: 0
      volumes:
      - name: env
        configMap:
          name: report-env
      - name: envoy-config
        configMap:
          name: report-envoy
      - name: opa-policy
        configMap:
          name: report-opa
      - name: keycloak-key
        configMap:
          name: keycloak-kids-keys
---
# Source: edbb/charts/router/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: router
  labels:
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: router
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: router-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: router
  template:
    metadata:
      labels:
        app.kubernetes.io/name: router
      annotations:
        checksum/config: 06d86d7477d74c7094f3b668d118a45ec8756701271165ec46ce3bdf2a144901
    spec:
      serviceAccountName: router
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
      containers:
        - name: router
          image: "sunbirded.azurecr.io/router:release-3.9.0_RC1_01339f9_07941f0_1_router"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          ports:
            - name: http
              containerPort: 80
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: router-env
          volumeMounts:
          - name: config
            mountPath: /config
      volumes:
      - name: env
        configMap:
          name: router-env
      - name: config
        configMap:
          name: router
---
# Source: edbb/charts/cassandra/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cassandra
      app.kubernetes.io/instance: edbb
  serviceName: cassandra-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cassandra
        helm.sh/chart: cassandra-10.1.0
        app.kubernetes.io/instance: edbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "4.1.0"
    spec:
      
      serviceAccountName: cassandra
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: edbb
                    app.kubernetes.io/name: cassandra
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: cassandra
          command:
            - bash
            - -ec
            - |
              # Node 0 is the password seeder
              if [[ $POD_NAME =~ (.*)-0$ ]]; then
                  echo "Setting node as password seeder"
                  export CASSANDRA_PASSWORD_SEEDER=yes
              else
                  # Only node 0 will execute the startup initdb scripts
                  export CASSANDRA_IGNORE_INITDB_SCRIPTS=1
              fi
              /opt/bitnami/scripts/cassandra/entrypoint.sh /opt/bitnami/scripts/cassandra/run.sh
          image: docker.io/bitnami/cassandra:3.11.13-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CASSANDRA_CLUSTER_NAME
              value: cassandra
            - name: CASSANDRA_SEEDS
              value: "cassandra-0.cassandra-headless.sunbird.svc.cluster.local"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cassandra
                  key: cassandra-password
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CASSANDRA_USER
              value: "cassandra"
            - name: CASSANDRA_NUM_TOKENS
              value: "256"
            - name: CASSANDRA_DATACENTER
              value: dc1
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: SimpleSnitch
            - name: CASSANDRA_KEYSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/keystore"
            - name: CASSANDRA_TRUSTSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/truststore"
            - name: CASSANDRA_RACK
              value: rack1
            - name: CASSANDRA_TRANSPORT_PORT_NUMBER
              value: "7000"
            - name: CASSANDRA_JMX_PORT_NUMBER
              value: "7199"
            - name: CASSANDRA_CQL_PORT_NUMBER
              value: "9042"
            - name: CASSANDRA_AUTHENTICATOR
              value: AllowAllAuthenticator
            - name: CASSANDRA_AUTHORIZER
              value: AllowAllAuthorizer
          envFrom:
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool info | grep "Native Transport active: true"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool status | grep -E "^UN\\s+${POD_IP}"
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 5
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -ec
                  - nodetool drain
          ports:
            - name: intra
              containerPort: 7000
            - name: tls
              containerPort: 7001
            - name: jmx
              containerPort: 7199
            - name: cql
              containerPort: 9042
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/cassandra
            
      volumes:
        - name: metrics-conf
          configMap:
            name: cassandra-metrics-conf
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: cassandra
          app.kubernetes.io/instance: edbb
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "25Gi"
---
# Source: edbb/charts/kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: sunbird
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.1.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.8.1"
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: edbb
      app.kubernetes.io/component: zookeeper
  serviceName: zookeeper-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-11.1.3
        app.kubernetes.io/instance: edbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "3.8.1"
        app.kubernetes.io/component: zookeeper
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: edbb
                    app.kubernetes.io/name: zookeeper
                    app.kubernetes.io/component: zookeeper
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.8.1-debian-11-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_PRE_ALLOC_SIZE
              value: "65536"
            - name: ZOO_SNAPCOUNT
              value: "100000"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr, ruok"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: zookeeper-0.zookeeper-headless.sunbird.svc.cluster.local:2888:3888::1 
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_ENABLE_QUORUM_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/zookeeper
      volumes:
        - name: scripts
          configMap:
            name: zookeeper-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "2Gi"
---
# Source: edbb/charts/kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-21.3.1
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.4.0"
    app.kubernetes.io/component: kafka
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: edbb
      app.kubernetes.io/component: kafka
  serviceName: kafka-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        helm.sh/chart: kafka-21.3.1
        app.kubernetes.io/instance: edbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "3.4.0"
        app.kubernetes.io/component: kafka
      annotations:
    spec:
      
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: edbb
                    app.kubernetes.io/name: kafka
                    app.kubernetes.io/component: kafka
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: kafka
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3.3.1-debian-11-r25
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "zookeeper"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
            - name: KAFKA_CFG_LISTENERS
              value: "INTERNAL://:9093,CLIENT://:9092"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "INTERNAL://$(MY_POD_NAME).kafka-headless.sunbird.svc.cluster.local:9093,CLIENT://$(MY_POD_NAME).kafka-headless.sunbird.svc.cluster.local:9092"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_ZOOKEEPER_PROTOCOL
              value: PLAINTEXT
            - name: KAFKA_VOLUME_DIR
              value: "/bitnami/kafka"
            - name: KAFKA_LOG_DIR
              value: "/opt/bitnami/kafka/logs"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "false"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "10000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "1000012"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_DIRS
              value: "/bitnami/kafka/data"
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "104857600"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "6000"
            - name: KAFKA_CFG_AUTHORIZER_CLASS_NAME
              value: ""
            - name: KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND
              value: "true"
            - name: KAFKA_CFG_SUPER_USERS
              value: "User:admin"
          ports:
            - name: kafka-client
              containerPort: 9092
            - name: kafka-internal
              containerPort: 9093
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: kafka-client
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
            tcpSocket:
              port: kafka-client
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: logs
              mountPath: /opt/bitnami/kafka/logs
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
      volumes:
        - name: scripts
          configMap:
            name: kafka-scripts
            defaultMode: 0755
        - name: logs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "25Gi"
---
# Source: edbb/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
    app.kubernetes.io/component: primary
  annotations:
    helm.sh/hook-weight: "-5"
    reloader.stakater.com/auto: "true"
  namespace: sunbird
spec:
  serviceName: postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: edbb
      role: primary
  template:
    metadata:
      name: postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.16.3
        app.kubernetes.io/instance: edbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "11.14.0"
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: edbb
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r49
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "25Gi"
---
# Source: edbb/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.9"
    app.kubernetes.io/component: master
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: edbb
      app.kubernetes.io/component: master
  serviceName: redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.8.3
        app.kubernetes.io/instance: edbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "7.0.9"
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: a29620746e1f92873fd3eb997465498fa1e0ecc037b27d9e230bcfa165233fce
        checksum/health: 5bc33437afc878caad4744669aaca917309b3fbb07ff9656d0856ea677729c1e
        checksum/scripts: ac96dd9311e32a643cb12f09a39920f9ce6df8a7418d8fcc2bb36e3a1491c696
        checksum/secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: edbb
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.9-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: edbb
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "25Gi"
---
# Source: edbb/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-replicas
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: edbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.9"
    app.kubernetes.io/component: replica
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: edbb
      app.kubernetes.io/component: replica
  serviceName: redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.8.3
        app.kubernetes.io/instance: edbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "7.0.9"
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: a29620746e1f92873fd3eb997465498fa1e0ecc037b27d9e230bcfa165233fce
        checksum/health: 5bc33437afc878caad4744669aaca917309b3fbb07ff9656d0856ea677729c1e
        checksum/scripts: ac96dd9311e32a643cb12f09a39920f9ce6df8a7418d8fcc2bb36e3a1491c696
        checksum/secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: edbb
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.9-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: redis-master-0.redis-headless.sunbird.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: edbb
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: edbb/charts/kong/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-migrations  ## kong-migrations
  annotations:
    helm.sh/hook-weight: "-4"
spec:
  template:
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
          - "timeout 300 sh -c 'until nc -z postgresql 5432; do echo waiting for postgres; sleep 10; done'"
      containers:
        - name: kong
          image: "sunbirded.azurecr.io/kong:0.14.1"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
          args:
            - |
              echo "Starting migrations..."
              kong migrations up --v
          env:
            - name: KONG_DATABASE
              value: postgres
            - name: KONG_PG_DATABASE
              value: kong
            - name: KONG_PG_HOST
              value: postgresql
            - name: KONG_PG_PASSWORD
              value: postgres
            - name: KONG_PG_USER
              value: postgres
            - name: KONG_PROXY_ACCESS_LOG
              value: "/dev/stdout"
            - name: KONG_ADMIN_ACCESS_LOG
              value: "/dev/stdout"
            - name: KONG_PROXY_ERROR_LOG
              value: "/dev/stdout"
            - name: KONG_ADMIN_ERROR_LOG
              value: "/dev/stdout"
      restartPolicy: Never
  backoffLimit: 30
---
# Source: edbb/templates/provision/postgres.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: edbb-postgres-migration-job
  labels:
    app: edbb-postgres-migration
    scope: provisioning
  annotations:
    helm.sh/hook-weight: "-4"
spec:
  template:
    metadata:
      labels:
        app: edbb-postgres-migration
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-postgres
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c']
        args:
        - "timeout 120 sh -c 'until nc -z postgresql 5432; do echo waiting for postgres; sleep 10; done'"
      containers:
      - name: migration
        image: bitnami/postgresql:11.14.0-debian-10-r49
        imagePullPolicy: IfNotPresent
        command: ['bash', '-c']
        securityContext:
          runAsUser: 0
        args:
        - |
            set -e
            export devops_branch=release-7.0.0
            export PGHOST=postgresql
            export PGPORT=5432
            export PGUSER=postgres
            export PGPASSWORD=postgres
            # Check if the database exists
            if ! psql -lqt | cut -d \| -f 1 | grep -qw kong; then
              # Database doesn't exist, create it
              echo "SELECT 'CREATE DATABASE \"kong\"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '\"kong\"')\gexec" | psql
            else
                echo "Database kong already exists."
            fi
            # Check if the database exists
            if ! psql -lqt | cut -d \| -f 1 | grep -qw druid_raw; then
              # Database doesn't exist, create it
              echo "SELECT 'CREATE DATABASE \"druid_raw\"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '\"druid_raw\"')\gexec" | psql
            else
                echo "Database druid_raw already exists."
            fi

            echo "PostgreSQL setup completed."
  backoffLimit: 30
---
# Source: edbb/charts/kong/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: kong-recording.rule
  labels:
    release: monitoring
spec:
  groups:
  - name: apimanager-recording.rules
    rules:
    - expr: sum(rate(kong_request_count{api=~".*"}[5m])) by (api)
      record: job:kong_request_count:rate:sum:1m
    - expr: sum(increase(kong_request_status_count{api=~".*",status_code=~"2..|3..", status_code!= "total"}[5m])) by (api, status_code) / ignoring(api, status_code) group_left sum(increase(kong_request_status_count{api=~".*", status_code!= "total"}[5m]))
      record: job:kong_request_success_percentage:increase:sum:1m
    - expr: sum(increase(kong_request_count{api=~".*"}[5m])) by (api)
      record: job:kong_request_count:increase:sum:1m
    - expr: sum(increase(kong_request_status_count{api=~".*",status_code!~"2..|3..|5..|total"}[5m])) by (api, status_code) / ignoring(api, status_code) group_left  sum(increase(kong_request_status_count{api=~".*", status_code!= "total"}[5m]))
      record: job:kong_request_4xx_percentage:increase:sum:1m
    - expr: sum(increase(kong_request_status_count{api=~".*",status_code!~"2..|3..|4..|total"}[5m])) by (api, status_code) / ignoring(api, status_code) group_left  sum(increase(kong_request_status_count{api=~".*", status_code!= "total"}[5m]))
      record: job:kong_request_5xx_percentage:increase:sum:1m
    - expr: sum(rate(kong_latency_time_sum{api=~".*"}[5m]) / rate(kong_latency_time_count{api=~".*"}[5m])) by (api)
      record: job:kong_latency_time_sum:rate:sum:1m
    - expr: sum(rate(kong_upstream_latency_time_sum{api=~".*"}[5m])) by (api)  / sum(rate(kong_upstream_latency_time_count{api=~".*"}[5m])) by (api)
      record: job:kong_upstream_latency_time_sum:rate:sum:1m
    - expr: sum(increase(kong_request_status_count{api=~".*",status_code=~"2..|3..", status_code!= "total"}[5m])) by (api, status_code)
      record: job:kong_request_success_count:increase:sum:1m
    - expr: sum(increase(kong_request_status_count{api=~".*",status_code!~"2..|3..|5..|total"}[5m])) by (api, status_code)
      record: job:kong_request_4xx_count:increase:sum:1m
    - expr: sum(increase(kong_request_status_count{api=~".*",status_code!~"2..|3..|4..|total"}[5m])) by (api, status_code)
      record: job:kong_request_5xx_count:increase:sum:1m
    - expr: histogram_quantile(0.99, sum(rate(kong_latency_time_bucket{api=~".*"}[5m])) by (api,le))
      record: job:kong_latency_time_bucket99:rate:sum:1m
    - expr: histogram_quantile(0.99, sum(rate(kong_upstream_latency_time_bucket{api=~".*"}[5m])) by (api,le))
      record: job:kong_upstream_latency_time_bucket99:rate:sum:1m
    - expr: histogram_quantile(0.95, sum(rate(kong_latency_time_bucket{api=~".*"}[5m])) by (api,le))
      record: job:kong_latency_time_bucket95:rate:sum:1m
    - expr: histogram_quantile(0.95, sum(rate(kong_upstream_latency_time_bucket{api=~".*"}[5m])) by (api,le))
      record: job:kong_upstream_latency_time_bucket95:rate:sum:1m
    - expr: histogram_quantile(0.50, sum(rate(kong_latency_time_bucket{api=~".*"}[5m])) by (api,le))
      record: job:kong_latency_time_bucket50:rate:sum:1m
    - expr: histogram_quantile(0.50, sum(rate(kong_upstream_latency_time_bucket{api=~".*"}[5m])) by (api,le))
      record: job:kong_upstream_latency_time_bucket50:rate:sum:1m
    - expr: sum(rate(kong_request_size_sum{api=~".*"}[5m]) / rate(kong_request_size_count{api=~".*"}[5m])) by (api)
      record: job:kong_average_request_size_sum:rate:sum:1m
    - expr: sum(rate(kong_response_size_sum{api=~".*"}[5m]) / rate(kong_response_size_count{api=~".*"}[5m])) by (api)
      record: job:kong_average_response_size_sum:rate:sum:1m
    - expr: sum(rate(kong_request_size_sum{api=~".*"}[5m])) by (api)
      record: job:kong_total_request_size_sum:rate:sum:1m
    - expr: sum(rate(kong_response_size_sum{api=~".*"}[5m])) by (api)
      record: job:kong_total_response_size_sum:rate:sum:1m
    - expr: sum(rate(kong_latency_time_bucket{api=~".*", le="0.05"}[5m])) by (api) / sum(rate(kong_latency_time_count[5m])) by (api)
      record: job:kong_latency_time_bucket:rate:sum:1m
---
# Source: edbb/charts/nginx-public-ingress/templates/recordingrules.yaml
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: nginx-public-ingress-recordingrules
  labels:
    release: monitoring
spec:
  groups:
  - name: nginx-recording.rules
    rules:
    - expr: sum(irate(nginx_http_requests_total[1m])) by (cache_status, host, env, status)
      record: job:nginx_http_requests_total:irate:sum:1m
    - expr: sum(irate(nginx_http_requests_total[5m])) by (cache_status, host, env, status)
      record: job:nginx_http_requests_total:irate:sum:5m
    - expr: sum(irate(nginx_http_requests_total[15m])) by (cache_status, host, env, status)
      record: job:nginx_http_requests_total:irate:sum:15m
    - record: job:nginx_http_success_percentage:increase:sum:5m
      expr: |-
        (
        sum(increase(nginx_http_requests_total{status!~"4..|5.."}[5m])) by (status)
        /
        ignoring(status) group_left sum(increase(nginx_http_requests_total[5m]))
        ) * 100
    - record: job:nginx_http_success_percentage:increase:sum:15m
      expr: |-
        (
        sum(increase(nginx_http_requests_total{status!~"4..|5.."}[15m])) by (status)
        /
        ignoring(status) group_left sum(increase(nginx_http_requests_total[15m]))
        ) * 100
    - record: job:nginx_http_failure_percentage:increase:sum:5m
      expr: |-
        (
        sum(increase(nginx_http_requests_total{status!~"2..|3.."}[5m])) by (status)
        /
        ignoring(status) group_left sum(increase(nginx_http_requests_total[5m]))
        ) * 100
    - record: job:nginx_http_failure_percentage:increase:sum:15m
      expr: |-
        (
        sum(increase(nginx_http_requests_total{status!~"2..|3.."}[15m])) by (status)
        /
        ignoring(status) group_left sum(increase(nginx_http_requests_total[15m]))
        ) * 100
---
# Source: edbb/charts/knowledgemw/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: knowledge-mw-servicemonitor
  labels:
    release: monitoring
spec:
  endpoints:
  - honorLabels: true
    interval: 30s
    path: /opa/metrics
    port: opa-metrics
    scheme: http
    scrapeTimeout: 10s
  - honorLabels: true
    interval: 30s
    path: /stats/prometheus
    port: envoy-metrics
    scheme: http
    scrapeTimeout: 10s
  jobLabel: knowledge-mw
  selector:
    matchLabels:
      app.kubernetes.io/name: knowledge-mw
---
# Source: edbb/charts/nginx-public-ingress/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nginx-public-ingress-servicemonitor
  labels:
    release: monitoring
spec:
  endpoints:
  - honorLabels: true
    interval: 15s
    path: /metrics
    port: http
    scheme: http
    scrapeTimeout: 10s
  jobLabel: nginx-public-ingress
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-public-ingress
---
# Source: edbb/charts/report/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: report-servicemonitor
  labels:
    release: monitoring
spec:
  endpoints:
  - honorLabels: true
    interval: 30s
    path: /opa/metrics
    port: opa-metrics
    scheme: http
    scrapeTimeout: 10s
  - honorLabels: true
    interval: 30s
    path: /stats/prometheus
    port: envoy-metrics
    scheme: http
    scrapeTimeout: 10s
  jobLabel: report
  selector:
    matchLabels:
      app.kubernetes.io/name: report

